   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC9:
  13 0000 5472 6163 		.string	"Track:"
  13      6B3A 00
  14               	.LC10:
  15 0007 2564 00   		.string	"%d"
  16               	.LC11:
  17 000a 4D6F 746F 		.string	"Motor:"
  17      723A 00
  18               	.LC12:
  19 0011 204F 6E20 		.string	" On "
  19      00
  20               	.LC13:
  21 0016 204F 6666 		.string	" Off"
  21      00
  22               	.LC14:
  23 001b 5750 3A00 		.string	"WP:"
  24               	.LC15:
  25 001f 204F 6E00 		.string	" On"
  26               	.LC16:
  27 0023 4E6F 2049 		.string	"No Image Mounted"
  27      6D61 6765 
  27      204D 6F75 
  27      6E74 6564 
  27      00
  28               		.text
  30               	set_gui_mode.part.3:
  31               	.LFB60:
  32               		.file 1 "main.c"
   1:main.c        **** /* Name: main.c
   2:main.c        **** * Project: 1541-rebuild
   3:main.c        **** * Author: Thorsten Kattanek
   4:main.c        **** * Copyright: (c) 2020 by Thorsten Kattanek <thorsten.kattanek@gmx.de>
   5:main.c        **** * License: GPL 2
   6:main.c        **** */
   7:main.c        **** 
   8:main.c        **** /// CPU Clock
   9:main.c        **** #ifndef F_CPU
  10:main.c        **** #define F_CPU 24000000UL
  11:main.c        **** #endif
  12:main.c        **** 
  13:main.c        **** #include "./main.h"
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <string.h>
  16:main.c        **** #include <ctype.h>
  17:main.c        **** 
  18:main.c        **** /// \brief Anschluss für Drehgeber PIN A
  19:main.c        **** #define PHASE_1A	(PINB & (1<<IMPULS_1A_PIN))
  20:main.c        **** /// \brief Anschluss für Drehgeber PIN B
  21:main.c        **** #define PHASE_1B	(PINB & (1<<IMPULS_1B_PIN))
  22:main.c        **** 
  23:main.c        **** /// \brief Decodierungstabelle für Drehgeber
  24:main.c        **** const unsigned char drehimp_tab[16]PROGMEM = {0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0};
  25:main.c        **** 
  26:main.c        **** MENU_STRUCT main_menu;
  27:main.c        **** MENU_STRUCT image_menu;
  28:main.c        **** MENU_STRUCT settings_menu;
  29:main.c        **** MENU_STRUCT info_menu;
  30:main.c        **** 
  31:main.c        **** enum  MENU_IDS{M_BACK, M_IMAGE, M_SETTINGS, M_INFO, \
  32:main.c        ****                M_BACK_IMAGE, M_INSERT_IMAGE, M_REMOVE_IMAGE, M_WP_IMAGE, M_NEW_IMAGE, M_SAVE_IMAGE,
  33:main.c        ****                M_BACK_SETTINGS, M_PIN_PB2, M_PIN_PB3, M_SAVE_EEPROM, M_RESTART, \
  34:main.c        ****                M_BACK_INFO, M_VERSION_INFO, M_SDCARD_INFO};
  35:main.c        **** 
  36:main.c        **** static uint8_t exit_main = 1;
  37:main.c        **** 
  38:main.c        **** int main(void)
  39:main.c        **** {
  40:main.c        ****     while(1)
  41:main.c        ****     {
  42:main.c        ****         exit_main = 1;
  43:main.c        ****         reset();                // Alles initialisieren
  44:main.c        **** 
  45:main.c        ****         /// Menüs einrichten
  46:main.c        ****         /// Hauptmenü
  47:main.c        ****         MENU_ENTRY main_menu_entrys[] = {{"Disk Image",M_IMAGE,ENTRY_MENU,0,&image_menu},{"Settings
  48:main.c        ****         /// Image Menü
  49:main.c        ****         MENU_ENTRY image_menu_entrys[] = {{"Insert Image",M_INSERT_IMAGE}, {"Remove Image",M_REMOVE
  50:main.c        ****         /// Setting Menü
  51:main.c        ****         MENU_ENTRY settings_menu_entrys[] = {{"Pin PB2",M_PIN_PB2, ENTRY_ONOFF, 0}, {"Pin PB3",M_PI
  52:main.c        ****         /// Info Menü
  53:main.c        ****         MENU_ENTRY info_menu_entrys[] = {{"Version",M_VERSION_INFO}, {"SD Card Info",M_SDCARD_INFO}
  54:main.c        **** 
  55:main.c        ****         main_menu.lcd_cursor_char = 2;  // 126 Standard Pfeil
  56:main.c        ****         menu_init(&main_menu, main_menu_entrys, 3,LCD_LINE_COUNT);
  57:main.c        **** 
  58:main.c        ****         image_menu.lcd_cursor_char = 2;  // 126 Standard Pfeil
  59:main.c        ****         menu_init(&image_menu, image_menu_entrys, 5,LCD_LINE_COUNT);
  60:main.c        **** 
  61:main.c        ****         settings_menu.lcd_cursor_char = 2;  // 126 Standard Pfeil
  62:main.c        ****         menu_init(&settings_menu, settings_menu_entrys, 3,LCD_LINE_COUNT);
  63:main.c        **** 
  64:main.c        ****         info_menu.lcd_cursor_char = 2;  // 126 Standard Pfeil
  65:main.c        ****         menu_init(&info_menu, info_menu_entrys, 2,LCD_LINE_COUNT);
  66:main.c        **** 
  67:main.c        ****         menu_set_root(&main_menu);
  68:main.c        **** 
  69:main.c        ****         // Zeichen für Menü More Top setzen
  70:main.c        ****         uint8_t char00[] = {4,14,31,0,0,0,0,0};
  71:main.c        ****         lcd_generatechar(0, char00);
  72:main.c        ****         fb_lcd_more_top_char = 0;
  73:main.c        **** 
  74:main.c        **** 
  75:main.c        ****         // Zeichen für Menü More Down setzen
  76:main.c        ****         uint8_t char01[] = {0,0,0,0,31,14,4,0};
  77:main.c        ****         lcd_generatechar(1, char01);
  78:main.c        ****         fb_lcd_more_down_char = 1;
  79:main.c        **** 
  80:main.c        ****         // Zeichen für Menü Position setzen
  81:main.c        ****         uint8_t arrow_char[] = {0,4,6,31,6,4,0,0};
  82:main.c        ****         lcd_generatechar(2, arrow_char);
  83:main.c        ****         fb_lcd_cursor_char = 2;
  84:main.c        **** 
  85:main.c        ****         // Zeichen für Directory Symbol
  86:main.c        ****         uint8_t dir_char[] = {0,28,31,17,17,31,0,0};
  87:main.c        ****         lcd_generatechar(3, dir_char);
  88:main.c        ****         fb_lcd_dir_char = 3;
  89:main.c        **** 
  90:main.c        ****         // Zeichen für Diskimage
  91:main.c        ****         uint8_t diskimage_char[] = {15,27,17,27,31,27,27,31};
  92:main.c        ****         lcd_generatechar(4, diskimage_char);
  93:main.c        ****         fb_lcd_disk_char = 4;
  94:main.c        **** 
  95:main.c        ****         //// MAIN LOOP /////
  96:main.c        ****         while(exit_main)
  97:main.c        ****         {
  98:main.c        ****             check_stepper_signals();
  99:main.c        ****             check_motor_signal();
 100:main.c        ****             update_gui();
 101:main.c        ****         }
 102:main.c        **** 
 103:main.c        ****         release_sd_card();
 104:main.c        ****     }
 105:main.c        **** }
 106:main.c        **** 
 107:main.c        **** /////////////////////////////////////////////////////////////////////
 108:main.c        **** 
 109:main.c        **** void reset()
 110:main.c        **** {
 111:main.c        ****     // PB23 initialisieren
 112:main.c        ****     init_pb2_pb3();
 113:main.c        **** 
 114:main.c        ****     // SOE GateArray initialisieren
 115:main.c        ****     soe_gatearry_init();
 116:main.c        ****     soe_gatearry_lo();      // Damit die GateArray das Signal Byte_Ready auf Hi setzt
 117:main.c        ****                             // Somit stört mich das Signal nicht mehr und ich muss Byte_Ready
 118:main.c        ****                             // Nur auf Lo ziehen (hi = hiz und lo = gnd)
 119:main.c        **** 
 120:main.c        ****     // Settings vom EEPROM prüfen
 121:main.c        ****     if(eeprom_read_dword((uint32_t*)SETTINGS_IDENTIFIER) != 0x15411541)
 122:main.c        ****     {
 123:main.c        ****         settings_set_default_values(); // Default Values setzen
 124:main.c        ****         reset();
 125:main.c        ****     }
 126:main.c        **** 
 127:main.c        ****     // Tasten Initialisieren
 128:main.c        ****     init_keys();
 129:main.c        **** 
 130:main.c        ****     // LCD Display intialisieren
 131:main.c        ****     lcd_init();
 132:main.c        **** 
 133:main.c        ****     // Prüfen on Button2 gedrückt ist
 134:main.c        ****     if(get_key2())
 135:main.c        ****     {
 136:main.c        ****         lcd_clear();
 137:main.c        ****         lcd_setcursor(1,2);
 138:main.c        ****         lcd_string("Changed Input Mode");
 139:main.c        **** 
 140:main.c        ****         if(eeprom_read_byte((uint8_t*)SETTINGS_INPUT_MODE) == INPUT_MODE_BUTTON)
 141:main.c        ****         {
 142:main.c        ****             eeprom_update_byte((uint8_t*)SETTINGS_INPUT_MODE, INPUT_MODE_ENCODER);
 143:main.c        ****             lcd_setcursor(4,3);
 144:main.c        ****             lcd_string("Encoder Mode");
 145:main.c        ****         }
 146:main.c        ****         else
 147:main.c        ****         {
 148:main.c        ****             eeprom_update_byte((uint8_t*)SETTINGS_INPUT_MODE, INPUT_MODE_BUTTON);
 149:main.c        ****             lcd_setcursor(4,3);
 150:main.c        ****             lcd_string("Button Mode");
 151:main.c        ****         }
 152:main.c        ****         _delay_ms(3000);
 153:main.c        ****     }
 154:main.c        **** 
 155:main.c        ****     // Input Mode Setzen
 156:main.c        ****     input_mode = eeprom_read_byte((uint8_t)SETTINGS_INPUT_MODE);
 157:main.c        **** 
 158:main.c        ****     // WPS PIN Enable
 159:main.c        ****     endable_wps_port(1);
 160:main.c        **** 
 161:main.c        ****     // Startmeldung ausgeben
 162:main.c        ****     show_start_message();
 163:main.c        **** 
 164:main.c        ****     // Stepper Initialisieren
 165:main.c        ****     init_stepper();
 166:main.c        **** 
 167:main.c        ****     // Motor Initialisieren
 168:main.c        ****     init_motor();
 169:main.c        **** 
 170:main.c        ****     // Steursignale BYTE_READY, SYNC und SOE Initialisieren
 171:main.c        ****     init_controll_signals();
 172:main.c        **** 
 173:main.c        ****     // Image Remove
 174:main.c        ****     remove_image();
 175:main.c        **** 
 176:main.c        ****     // Timer0 --> GCR senden
 177:main.c        ****     init_timer0();
 178:main.c        **** 
 179:main.c        ****     // Timer2 --> wird alle 1ms aufgerufen
 180:main.c        ****     // z.B. zu Tasten entprellen
 181:main.c        ****     init_timer2();
 182:main.c        **** 
 183:main.c        ****     // Meldung ausgeben, das auf SD Karte gewartet wird
 184:main.c        ****     lcd_setcursor(0,2);
 185:main.c        ****     lcd_string("Wait for SD-Karte...");
 186:main.c        **** 
 187:main.c        ****     // SD Karte initialisieren
 188:main.c        ****     // Partition und Filesystem öffnen
 189:main.c        ****     // Warten bis alles O.K. ist
 190:main.c        ****     while(init_sd_card())
 191:main.c        ****     {
 192:main.c        ****         _delay_ms(1000);
 193:main.c        ****     }
 194:main.c        **** 
 195:main.c        ****     fb_dir_entry_count = get_dir_entry_count();
 196:main.c        **** 
 197:main.c        ****     // Key Puffer leeren
 198:main.c        ****     key_buffer_r_pos = 0;
 199:main.c        ****     key_buffer_w_pos = 0;
 200:main.c        **** 
 201:main.c        ****     // GUI Mode festlegen
 202:main.c        ****     set_gui_mode(GUI_INFO_MODE);
 203:main.c        **** 
 204:main.c        ****     // Interrupts erlauben
 205:main.c        ****     sei();
 206:main.c        **** }
 207:main.c        **** 
 208:main.c        **** /////////////////////////////////////////////////////////////////////
 209:main.c        **** 
 210:main.c        **** void check_stepper_signals()
 211:main.c        **** {
 212:main.c        ****     // Auf Steppermotor aktivität prüfen
 213:main.c        ****     // und auswerten
 214:main.c        ****     if(stepper_signal_r_pos != stepper_signal_w_pos)    // Prüfen ob sich was neues im Ringpuffer 
 215:main.c        ****     {
 216:main.c        ****             uint8_t stepper = stepper_signal_puffer[stepper_signal_r_pos]>>2 | stepper_signal_puffe
 217:main.c        ****             stepper_signal_r_pos++;
 218:main.c        **** 
 219:main.c        ****         switch(stepper)
 220:main.c        ****         {
 221:main.c        ****         case 0x30: case 0x40: case 0x90: case 0xE0:
 222:main.c        ****         // DEC
 223:main.c        ****         stepper_dec();
 224:main.c        ****             stepper_signal_time = 0;
 225:main.c        ****             stepper_signal = 1;
 226:main.c        ****         break;
 227:main.c        **** 
 228:main.c        ****         case 0x10: case 0x60: case 0xB0: case 0xC0:
 229:main.c        ****         // INC
 230:main.c        ****         stepper_inc();
 231:main.c        ****             stepper_signal_time = 0;
 232:main.c        ****             stepper_signal = 1;
 233:main.c        ****         break;
 234:main.c        ****         }
 235:main.c        ****     }
 236:main.c        ****     else if(stepper_signal && (stepper_signal_time >= STEPPER_DELAY_TIME))
 237:main.c        ****     {
 238:main.c        ****         stepper_signal = 0;
 239:main.c        **** 
 240:main.c        ****         if(!(akt_half_track & 0x01))
 241:main.c        ****         {
 242:main.c        ****             stop_timer0();
 243:main.c        **** 
 244:main.c        ****             // Geschwindigkeit setzen
 245:main.c        ****             OCR0A = timer0_orca0[d64_track_zone[akt_half_track>>1]];
 246:main.c        ****             akt_track_pos = 0;
 247:main.c        **** 
 248:main.c        ****             if(track_is_written == 1)
 249:main.c        ****             {
 250:main.c        ****                 no_byte_ready_send = 1;
 251:main.c        **** 
 252:main.c        ****                 track_is_written = 0;
 253:main.c        ****                 write_disk_track(fd,akt_image_type,old_half_track>>1,gcr_track, &gcr_track_length);
 254:main.c        **** 
 255:main.c        ****                 read_disk_track(fd,akt_image_type,akt_half_track>>1,gcr_track, &gcr_track_length);
 256:main.c        ****                 old_half_track = akt_half_track;    // Merken um evtl. dort zurück zu schreiben
 257:main.c        **** 
 258:main.c        ****                 no_byte_ready_send = 0;
 259:main.c        ****             }
 260:main.c        ****             else
 261:main.c        ****             {
 262:main.c        ****                 read_disk_track(fd,akt_image_type,akt_half_track>>1,gcr_track, &gcr_track_length);
 263:main.c        ****                 old_half_track = akt_half_track;    // Merken um evtl. dort zurück zu schreiben
 264:main.c        ****             }
 265:main.c        ****             start_timer0();
 266:main.c        ****         }
 267:main.c        ****     }
 268:main.c        **** }
 269:main.c        **** 
 270:main.c        **** /////////////////////////////////////////////////////////////////////
 271:main.c        **** 
 272:main.c        **** void check_motor_signal()
 273:main.c        **** {
 274:main.c        ****     if(!get_motor_status())
 275:main.c        ****     {
 276:main.c        ****         // Sollte der aktuelle Track noch veränderungen haben so wird hier erstmal gesichert.
 277:main.c        ****         if(track_is_written == 1)
 278:main.c        ****         {
 279:main.c        ****             stop_timer0();
 280:main.c        ****             no_byte_ready_send = 1;
 281:main.c        ****             track_is_written = 0;
 282:main.c        ****             write_disk_track(fd,akt_image_type,old_half_track>>1,gcr_track, &gcr_track_length);
 283:main.c        ****             no_byte_ready_send = 0;
 284:main.c        ****             start_timer0();
 285:main.c        ****         }
 286:main.c        ****     }
 287:main.c        **** }
 288:main.c        **** 
 289:main.c        **** /////////////////////////////////////////////////////////////////////
 290:main.c        **** 
 291:main.c        **** uint8_t get_key_from_buffer()
 292:main.c        **** {
 293:main.c        ****     if(key_buffer_r_pos != key_buffer_w_pos)
 294:main.c        ****     {
 295:main.c        ****         uint8_t val = key_buffer[key_buffer_r_pos++];
 296:main.c        ****         key_buffer_r_pos &= 0x0f;
 297:main.c        ****         return  val;
 298:main.c        ****     }
 299:main.c        ****     else
 300:main.c        ****         return NO_KEY;
 301:main.c        **** }
 302:main.c        **** 
 303:main.c        **** /////////////////////////////////////////////////////////////////////
 304:main.c        **** 
 305:main.c        **** void update_gui()
 306:main.c        **** {
 307:main.c        ****     static uint8_t old_half_track = 0;
 308:main.c        ****     static uint8_t old_motor_status = 0;
 309:main.c        ****     static uint16_t wait_counter0 = 0;
 310:main.c        **** 
 311:main.c        ****     uint8_t key_code = get_key_from_buffer();
 312:main.c        **** 
 313:main.c        ****     switch (current_gui_mode)
 314:main.c        ****     {
 315:main.c        ****     case GUI_INFO_MODE:
 316:main.c        **** 
 317:main.c        ****         if(key_code == KEY2_UP)
 318:main.c        ****             set_gui_mode(GUI_MENU_MODE);
 319:main.c        **** 
 320:main.c        ****         if(key_code == KEY2_TIMEOUT2)
 321:main.c        ****             exit_main = 0;
 322:main.c        **** 
 323:main.c        ****         if(old_half_track != akt_half_track)
 324:main.c        ****         {
 325:main.c        ****             lcd_setcursor(7,1);
 326:main.c        ****             lcd_string("   ");
 327:main.c        ****             lcd_setcursor(7,1);
 328:main.c        ****             sprintf (byte_str,"%d",akt_half_track >> 1);
 329:main.c        ****             lcd_string(byte_str);
 330:main.c        ****         }
 331:main.c        ****         old_half_track = akt_half_track;
 332:main.c        **** 
 333:main.c        ****         if(old_motor_status != get_motor_status())
 334:main.c        ****         {
 335:main.c        ****             lcd_setcursor(7,2);
 336:main.c        ****             if(get_motor_status())
 337:main.c        ****                 lcd_string("On ");
 338:main.c        ****             else
 339:main.c        ****                 lcd_string("Off");
 340:main.c        ****         }
 341:main.c        ****         old_motor_status = get_motor_status();
 342:main.c        **** 
 343:main.c        ****         if(is_image_mount)
 344:main.c        ****         {
 345:main.c        ****             //// Filename Scrolling
 346:main.c        **** 
 347:main.c        ****             wait_counter0++;
 348:main.c        **** 
 349:main.c        ****             if(gui_current_line_offset > 0 && wait_counter0 == 30000)
 350:main.c        ****             {
 351:main.c        ****                 wait_counter0 = 0;
 352:main.c        **** 
 353:main.c        ****                 if(gui_line_scroll_end_begin_wait == 0)
 354:main.c        ****                 {
 355:main.c        ****                     // Es darf gescrollt werden
 356:main.c        **** 
 357:main.c        **** 
 358:main.c        ****                     if(!gui_line_scroll_direction)
 359:main.c        ****                     {
 360:main.c        ****                         gui_line_scroll_pos++;
 361:main.c        ****                         if(gui_line_scroll_pos >= gui_current_line_offset)
 362:main.c        ****                         {
 363:main.c        ****                             gui_line_scroll_end_begin_wait = 6;
 364:main.c        ****                             gui_line_scroll_direction = 1;
 365:main.c        ****                         }
 366:main.c        ****                     }
 367:main.c        ****                     else
 368:main.c        ****                     {
 369:main.c        ****                         gui_line_scroll_pos--;
 370:main.c        ****                         if(gui_line_scroll_pos == 0)
 371:main.c        ****                         {
 372:main.c        ****                             gui_line_scroll_end_begin_wait = 6;
 373:main.c        ****                             gui_line_scroll_direction = 0;
 374:main.c        ****                         }
 375:main.c        ****                     }
 376:main.c        **** 
 377:main.c        ****                     lcd_setcursor(0,4);
 378:main.c        ****                     lcd_print(image_filename,gui_line_scroll_pos,20);
 379:main.c        ****                 }
 380:main.c        ****                 else gui_line_scroll_end_begin_wait--;
 381:main.c        ****             }
 382:main.c        ****         }
 383:main.c        ****         break;
 384:main.c        **** 
 385:main.c        ****     case GUI_MENU_MODE:
 386:main.c        ****         check_menu_events(menu_update(key_code));
 387:main.c        ****         break;
 388:main.c        **** 
 389:main.c        ****     case GUI_FILE_BROWSER:
 390:main.c        ****         filebrowser_update(key_code);
 391:main.c        ****         break;
 392:main.c        **** 
 393:main.c        ****     default:
 394:main.c        ****         break;
 395:main.c        ****     }
 396:main.c        **** }
 397:main.c        **** 
 398:main.c        **** /////////////////////////////////////////////////////////////////////
 399:main.c        **** 
 400:main.c        **** void check_menu_events(uint16_t menu_event)
 401:main.c        **** {
 402:main.c        ****     uint8_t command = menu_event >> 8;
 403:main.c        ****     uint8_t value = menu_event & 0xff;
 404:main.c        **** 
 405:main.c        ****     switch(command)
 406:main.c        ****     {
 407:main.c        ****     case MC_EXIT_MENU:
 408:main.c        ****         set_gui_mode(GUI_INFO_MODE);
 409:main.c        ****         break;
 410:main.c        **** 
 411:main.c        ****     case MC_SELECT_ENTRY:
 412:main.c        ****         switch(value)
 413:main.c        ****         {
 414:main.c        ****         /// Main Menü
 415:main.c        **** 
 416:main.c        ****         /// Image Menü
 417:main.c        ****         case M_INSERT_IMAGE:
 418:main.c        ****             set_gui_mode(GUI_FILE_BROWSER);
 419:main.c        ****             break;
 420:main.c        ****         case M_REMOVE_IMAGE:
 421:main.c        ****             remove_image();
 422:main.c        ****             set_gui_mode(GUI_INFO_MODE);
 423:main.c        ****             break;
 424:main.c        ****         case M_WP_IMAGE:
 425:main.c        ****             if(menu_get_entry_var1(&image_menu, M_WP_IMAGE))
 426:main.c        ****             {
 427:main.c        ****                 set_write_protection(1);
 428:main.c        ****             }
 429:main.c        ****             else
 430:main.c        ****             {
 431:main.c        ****                 set_write_protection(0);
 432:main.c        ****             }
 433:main.c        ****             menu_refresh();
 434:main.c        ****             break;
 435:main.c        **** 
 436:main.c        ****         /// Settings Menü
 437:main.c        ****         case M_PIN_PB2:
 438:main.c        ****             if(menu_get_entry_var1(&settings_menu, M_PIN_PB2))
 439:main.c        ****             {
 440:main.c        ****                 DDRB |= 1<<PB2;
 441:main.c        ****             }
 442:main.c        ****             else
 443:main.c        ****             {
 444:main.c        ****                 DDRB &= ~(1<<PB2);
 445:main.c        ****             }
 446:main.c        ****             menu_refresh();
 447:main.c        ****             break;
 448:main.c        **** 
 449:main.c        ****         case M_PIN_PB3:
 450:main.c        ****             if(menu_get_entry_var1(&settings_menu, M_PIN_PB3))
 451:main.c        ****             {
 452:main.c        ****                 DDRB |= 1<<PB3;
 453:main.c        ****             }
 454:main.c        ****             else
 455:main.c        ****             {
 456:main.c        ****                 DDRB &= ~(1<<PB3);
 457:main.c        ****             }
 458:main.c        ****             menu_refresh();
 459:main.c        ****             break;
 460:main.c        **** 
 461:main.c        ****         case M_SAVE_EEPROM:
 462:main.c        ****             break;
 463:main.c        **** 
 464:main.c        ****         case M_RESTART:
 465:main.c        ****             exit_main = 0;
 466:main.c        ****             break;
 467:main.c        **** 
 468:main.c        ****         /// Info Menü
 469:main.c        ****         case M_VERSION_INFO:
 470:main.c        ****             show_start_message();
 471:main.c        ****             menu_refresh();
 472:main.c        ****             break;
 473:main.c        **** 
 474:main.c        ****         case M_SDCARD_INFO:
 475:main.c        ****             show_sdcard_info_message();
 476:main.c        ****             menu_refresh();
 477:main.c        ****             break;
 478:main.c        ****         }
 479:main.c        ****         break;
 480:main.c        ****     }
 481:main.c        **** }
 482:main.c        **** 
 483:main.c        **** /////////////////////////////////////////////////////////////////////
 484:main.c        **** 
 485:main.c        **** void set_gui_mode(uint8_t gui_mode)
  33               		.loc 1 485 0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	.LVL0:
 486:main.c        **** {
 487:main.c        ****     current_gui_mode = gui_mode;
 488:main.c        ****     switch(gui_mode)
 489:main.c        ****     {
 490:main.c        ****     case GUI_INFO_MODE:
 491:main.c        ****         lcd_clear();
  40               		.loc 1 491 0
  41 0000 0E94 0000 		call lcd_clear
  42               	.LVL1:
 492:main.c        **** 
 493:main.c        ****         lcd_setcursor(0,1);
  43               		.loc 1 493 0
  44 0004 61E0      		ldi r22,lo8(1)
  45 0006 80E0      		ldi r24,0
  46 0008 0E94 0000 		call lcd_setcursor
  47               	.LVL2:
 494:main.c        ****         lcd_string("Track:");
  48               		.loc 1 494 0
  49 000c 80E0      		ldi r24,lo8(.LC9)
  50 000e 90E0      		ldi r25,hi8(.LC9)
  51 0010 0E94 0000 		call lcd_string
  52               	.LVL3:
 495:main.c        **** 
 496:main.c        ****         lcd_setcursor(7,1);
  53               		.loc 1 496 0
  54 0014 61E0      		ldi r22,lo8(1)
  55 0016 87E0      		ldi r24,lo8(7)
  56 0018 0E94 0000 		call lcd_setcursor
  57               	.LVL4:
 497:main.c        ****         sprintf (byte_str,"%d",akt_half_track >> 1);
  58               		.loc 1 497 0
  59 001c 8091 0000 		lds r24,akt_half_track
  60 0020 8695      		lsr r24
  61 0022 1F92      		push __zero_reg__
  62               	.LCFI0:
  63               		.cfi_def_cfa_offset 3
  64 0024 8F93      		push r24
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67 0026 80E0      		ldi r24,lo8(.LC10)
  68 0028 90E0      		ldi r25,hi8(.LC10)
  69 002a 9F93      		push r25
  70               	.LCFI2:
  71               		.cfi_def_cfa_offset 5
  72 002c 8F93      		push r24
  73               	.LCFI3:
  74               		.cfi_def_cfa_offset 6
  75 002e 80E0      		ldi r24,lo8(byte_str)
  76 0030 90E0      		ldi r25,hi8(byte_str)
  77 0032 9F93      		push r25
  78               	.LCFI4:
  79               		.cfi_def_cfa_offset 7
  80 0034 8F93      		push r24
  81               	.LCFI5:
  82               		.cfi_def_cfa_offset 8
  83 0036 0E94 0000 		call sprintf
  84               	.LVL5:
 498:main.c        ****         lcd_string(byte_str);
  85               		.loc 1 498 0
  86 003a 80E0      		ldi r24,lo8(byte_str)
  87 003c 90E0      		ldi r25,hi8(byte_str)
  88 003e 0E94 0000 		call lcd_string
  89               	.LVL6:
 499:main.c        **** 
 500:main.c        ****         lcd_setcursor(0,2);
  90               		.loc 1 500 0
  91 0042 62E0      		ldi r22,lo8(2)
  92 0044 80E0      		ldi r24,0
  93 0046 0E94 0000 		call lcd_setcursor
  94               	.LVL7:
 501:main.c        ****         lcd_string("Motor:");
  95               		.loc 1 501 0
  96 004a 80E0      		ldi r24,lo8(.LC11)
  97 004c 90E0      		ldi r25,hi8(.LC11)
  98 004e 0E94 0000 		call lcd_string
  99               	.LVL8:
 502:main.c        **** 
 503:main.c        ****         if(get_motor_status())
 100               		.loc 1 503 0
 101 0052 0F90      		pop __tmp_reg__
 102 0054 0F90      		pop __tmp_reg__
 103 0056 0F90      		pop __tmp_reg__
 104 0058 0F90      		pop __tmp_reg__
 105 005a 0F90      		pop __tmp_reg__
 106 005c 0F90      		pop __tmp_reg__
 107               	.LCFI6:
 108               		.cfi_def_cfa_offset 2
 109 005e 329B      		sbis 0x6,2
 110 0060 00C0      		rjmp .L2
 504:main.c        ****             lcd_string(" On ");
 111               		.loc 1 504 0
 112 0062 80E0      		ldi r24,lo8(.LC12)
 113 0064 90E0      		ldi r25,hi8(.LC12)
 114 0066 00C0      		rjmp .L13
 115               	.L2:
 505:main.c        ****         else
 506:main.c        ****             lcd_string(" Off");
 116               		.loc 1 506 0
 117 0068 80E0      		ldi r24,lo8(.LC13)
 118 006a 90E0      		ldi r25,hi8(.LC13)
 119               	.L13:
 120 006c 0E94 0000 		call lcd_string
 121               	.LVL9:
 507:main.c        **** 
 508:main.c        ****         lcd_setcursor(12,1);
 122               		.loc 1 508 0
 123 0070 61E0      		ldi r22,lo8(1)
 124 0072 8CE0      		ldi r24,lo8(12)
 125 0074 0E94 0000 		call lcd_setcursor
 126               	.LVL10:
 509:main.c        ****         lcd_string("WP:");
 127               		.loc 1 509 0
 128 0078 80E0      		ldi r24,lo8(.LC14)
 129 007a 90E0      		ldi r25,hi8(.LC14)
 130 007c 0E94 0000 		call lcd_string
 131               	.LVL11:
 510:main.c        **** 
 511:main.c        ****         if(floppy_wp)
 132               		.loc 1 511 0
 133 0080 8091 0000 		lds r24,floppy_wp
 134 0084 8823      		tst r24
 135 0086 01F0      		breq .L4
 512:main.c        ****             lcd_string(" On");
 136               		.loc 1 512 0
 137 0088 80E0      		ldi r24,lo8(.LC15)
 138 008a 90E0      		ldi r25,hi8(.LC15)
 139 008c 00C0      		rjmp .L14
 140               	.L4:
 513:main.c        ****         else
 514:main.c        ****             lcd_string(" Off");
 141               		.loc 1 514 0
 142 008e 80E0      		ldi r24,lo8(.LC13)
 143 0090 90E0      		ldi r25,hi8(.LC13)
 144               	.L14:
 145 0092 0E94 0000 		call lcd_string
 146               	.LVL12:
 515:main.c        **** 
 516:main.c        ****         if(is_image_mount)
 147               		.loc 1 516 0
 148 0096 8091 0000 		lds r24,is_image_mount
 149 009a 8823      		tst r24
 150 009c 01F0      		breq .L6
 151               	.LBB96:
 517:main.c        ****         {
 518:main.c        ****             lcd_setcursor(0,4);
 152               		.loc 1 518 0
 153 009e 64E0      		ldi r22,lo8(4)
 154 00a0 80E0      		ldi r24,0
 155 00a2 0E94 0000 		call lcd_setcursor
 156               	.LVL13:
 519:main.c        ****             lcd_print(image_filename,0,20);
 157               		.loc 1 519 0
 158 00a6 44E1      		ldi r20,lo8(20)
 159 00a8 60E0      		ldi r22,0
 160 00aa 80E0      		ldi r24,lo8(image_filename)
 161 00ac 90E0      		ldi r25,hi8(image_filename)
 162 00ae 0E94 0000 		call lcd_print
 163               	.LVL14:
 520:main.c        **** 
 521:main.c        ****             // Für Scrollenden Filename
 522:main.c        ****             int8_t var = (int8_t)strlen(image_filename) - 20;
 164               		.loc 1 522 0
 165 00b2 E0E0      		ldi r30,lo8(image_filename)
 166 00b4 F0E0      		ldi r31,hi8(image_filename)
 167               		0:
 168 00b6 0190      		ld __tmp_reg__,Z+
 169 00b8 0020      		tst __tmp_reg__
 170 00ba 01F4      		brne 0b
 171 00bc 3197      		sbiw r30,1
 172 00be E050      		subi r30,lo8(image_filename)
 173 00c0 F040      		sbci r31,hi8(image_filename)
 174 00c2 E451      		subi r30,lo8(-(-20))
 175               	.LVL15:
 523:main.c        ****             if(var < 0)
 176               		.loc 1 523 0
 177 00c4 E7FF      		sbrs r30,7
 178 00c6 00C0      		rjmp .L7
 524:main.c        ****                 gui_current_line_offset = 0;
 179               		.loc 1 524 0
 180 00c8 1092 0000 		sts gui_current_line_offset,__zero_reg__
 181 00cc 00C0      		rjmp .L8
 182               	.L7:
 525:main.c        ****             else
 526:main.c        ****                 gui_current_line_offset = var;
 183               		.loc 1 526 0
 184 00ce E093 0000 		sts gui_current_line_offset,r30
 185               	.L8:
 527:main.c        ****             gui_line_scroll_pos = 0;
 186               		.loc 1 527 0
 187 00d2 1092 0000 		sts gui_line_scroll_pos,__zero_reg__
 528:main.c        ****             gui_line_scroll_direction = 0;
 188               		.loc 1 528 0
 189 00d6 1092 0000 		sts gui_line_scroll_direction,__zero_reg__
 529:main.c        ****             gui_line_scroll_end_begin_wait = 6;
 190               		.loc 1 529 0
 191 00da 86E0      		ldi r24,lo8(6)
 192 00dc 8093 0000 		sts gui_line_scroll_end_begin_wait,r24
 193               	.LVL16:
 194               	.L6:
 195               	.LBE96:
 530:main.c        ****         }
 531:main.c        **** 
 532:main.c        ****         lcd_setcursor(2,4);
 196               		.loc 1 532 0
 197 00e0 64E0      		ldi r22,lo8(4)
 198 00e2 82E0      		ldi r24,lo8(2)
 199 00e4 0E94 0000 		call lcd_setcursor
 200               	.LVL17:
 533:main.c        ****         if(!is_image_mount)
 201               		.loc 1 533 0
 202 00e8 8091 0000 		lds r24,is_image_mount
 203 00ec 8111      		cpse r24,__zero_reg__
 204 00ee 00C0      		rjmp .L1
 534:main.c        ****             lcd_string("No Image Mounted");
 205               		.loc 1 534 0
 206 00f0 80E0      		ldi r24,lo8(.LC16)
 207 00f2 90E0      		ldi r25,hi8(.LC16)
 208 00f4 0C94 0000 		jmp lcd_string
 209               	.LVL18:
 210               	.L1:
 211 00f8 0895      		ret
 212               		.cfi_endproc
 213               	.LFE60:
 215               	.global	get_key_from_buffer
 217               	get_key_from_buffer:
 218               	.LFB12:
 292:main.c        ****     if(key_buffer_r_pos != key_buffer_w_pos)
 219               		.loc 1 292 0
 220               		.cfi_startproc
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 0 */
 224               	.L__stack_usage = 0
 293:main.c        ****     {
 225               		.loc 1 293 0
 226 00fa 9091 0000 		lds r25,key_buffer_r_pos
 227 00fe 8091 0000 		lds r24,key_buffer_w_pos
 228 0102 9817      		cp r25,r24
 229 0104 01F0      		breq .L18
 230               	.LBB100:
 231               	.LBB101:
 295:main.c        ****         key_buffer_r_pos &= 0x0f;
 232               		.loc 1 295 0
 233 0106 E091 0000 		lds r30,key_buffer_r_pos
 234 010a 81E0      		ldi r24,lo8(1)
 235 010c 8E0F      		add r24,r30
 236 010e 8093 0000 		sts key_buffer_r_pos,r24
 237 0112 F0E0      		ldi r31,0
 238 0114 E050      		subi r30,lo8(-(key_buffer))
 239 0116 F040      		sbci r31,hi8(-(key_buffer))
 240 0118 8081      		ld r24,Z
 241               	.LVL19:
 296:main.c        ****         return  val;
 242               		.loc 1 296 0
 243 011a 9091 0000 		lds r25,key_buffer_r_pos
 244 011e 9F70      		andi r25,lo8(15)
 245 0120 9093 0000 		sts key_buffer_r_pos,r25
 246               	.LVL20:
 247 0124 0895      		ret
 248               	.L18:
 249               	.LBE101:
 250               	.LBE100:
 300:main.c        **** }
 251               		.loc 1 300 0
 252 0126 88E0      		ldi r24,lo8(8)
 301:main.c        **** 
 253               		.loc 1 301 0
 254 0128 0895      		ret
 255               		.cfi_endproc
 256               	.LFE12:
 258               	.global	init_pb2_pb3
 260               	init_pb2_pb3:
 261               	.LFB18:
 535:main.c        **** 
 536:main.c        ****         break;
 537:main.c        ****     case GUI_MENU_MODE:
 538:main.c        ****         menu_refresh();
 539:main.c        ****         break;
 540:main.c        ****     case GUI_FILE_BROWSER:
 541:main.c        ****         filebrowser_refresh();
 542:main.c        ****         break;
 543:main.c        ****     default:
 544:main.c        ****         break;
 545:main.c        ****     }
 546:main.c        **** }
 547:main.c        **** 
 548:main.c        **** /////////////////////////////////////////////////////////////////////
 549:main.c        **** 
 550:main.c        **** void filebrowser_update(uint8_t key_code)
 551:main.c        **** {
 552:main.c        ****     uint16_t ret;
 553:main.c        ****     char out_str[21];
 554:main.c        **** 
 555:main.c        ****     switch (key_code)
 556:main.c        ****     {
 557:main.c        ****     case KEY0_DOWN:
 558:main.c        ****         if(fb_lcd_cursor_pos > 0)
 559:main.c        ****         {
 560:main.c        ****             fb_lcd_cursor_pos--;
 561:main.c        ****             filebrowser_refresh();
 562:main.c        ****         }
 563:main.c        ****         else
 564:main.c        ****         {
 565:main.c        ****             if(fb_lcd_window_pos > 0)
 566:main.c        ****             {
 567:main.c        ****                 fb_lcd_window_pos--;
 568:main.c        ****                 filebrowser_refresh();
 569:main.c        ****             }
 570:main.c        ****         }
 571:main.c        ****         break;
 572:main.c        ****     case KEY1_DOWN:
 573:main.c        ****         if((fb_lcd_cursor_pos < LCD_LINE_COUNT-1) && (fb_lcd_cursor_pos < fb_dir_entry_count-1))
 574:main.c        ****         {
 575:main.c        ****             fb_lcd_cursor_pos++;
 576:main.c        ****             filebrowser_refresh();
 577:main.c        ****         }
 578:main.c        ****         else
 579:main.c        ****         {
 580:main.c        ****             if(fb_lcd_window_pos < fb_dir_entry_count - LCD_LINE_COUNT)
 581:main.c        ****             {
 582:main.c        ****                 fb_lcd_window_pos++;
 583:main.c        ****                 filebrowser_refresh();
 584:main.c        ****             }
 585:main.c        ****         }
 586:main.c        ****         break;
 587:main.c        ****     case KEY2_UP:
 588:main.c        ****         stop_timer0();
 589:main.c        ****         no_byte_ready_send = 1;
 590:main.c        **** 
 591:main.c        ****         close_disk_image(fd);
 592:main.c        **** 
 593:main.c        ****         if(fb_dir_entry[fb_lcd_cursor_pos].attributes & FAT_ATTRIB_DIR)
 594:main.c        ****         {
 595:main.c        ****             // Eintrag ist ein Verzeichnis
 596:main.c        ****             change_dir(fb_dir_entry[fb_lcd_cursor_pos].long_name);
 597:main.c        ****             fb_lcd_cursor_pos = 0;
 598:main.c        ****             fb_lcd_window_pos = 0;
 599:main.c        ****             filebrowser_refresh();
 600:main.c        ****             return;
 601:main.c        ****         }
 602:main.c        **** 
 603:main.c        ****         fd = open_disk_image(fs, &fb_dir_entry[fb_lcd_cursor_pos], &akt_image_type);
 604:main.c        **** 
 605:main.c        ****         if(akt_image_type == UNDEF_IMAGE)
 606:main.c        ****         {
 607:main.c        ****             lcd_clear();
 608:main.c        ****             lcd_setcursor(0,2);
 609:main.c        ****             lcd_string("Not Supported Image!");
 610:main.c        ****             _delay_ms(1000);
 611:main.c        ****         }
 612:main.c        **** 
 613:main.c        ****         filebrowser_refresh();
 614:main.c        **** 
 615:main.c        ****         strcpy(image_filename, fb_dir_entry[fb_lcd_cursor_pos].long_name);
 616:main.c        **** 
 617:main.c        ****         if(!fd)
 618:main.c        ****         {
 619:main.c        ****             is_image_mount = 0;
 620:main.c        ****             return ;
 621:main.c        ****         }
 622:main.c        **** 
 623:main.c        ****         read_disk_track(fd,akt_image_type,akt_half_track>>1,gcr_track, &gcr_track_length);
 624:main.c        ****         akt_track_pos = 0;
 625:main.c        **** 
 626:main.c        ****         no_byte_ready_send = 0;
 627:main.c        ****         start_timer0();
 628:main.c        **** 
 629:main.c        ****         is_image_mount = 1;
 630:main.c        ****         send_disk_change();
 631:main.c        **** 
 632:main.c        ****         if(floppy_wp)
 633:main.c        ****             menu_set_entry_var1(&image_menu, M_WP_IMAGE, 1);
 634:main.c        ****         else
 635:main.c        ****             menu_set_entry_var1(&image_menu, M_WP_IMAGE, 0);
 636:main.c        **** 
 637:main.c        ****         set_gui_mode(GUI_INFO_MODE);
 638:main.c        ****         break;
 639:main.c        ****     case KEY2_TIMEOUT1:
 640:main.c        ****         set_gui_mode(GUI_MENU_MODE);
 641:main.c        ****         break;
 642:main.c        ****     }
 643:main.c        **** 
 644:main.c        ****     //// Filename Scrolling
 645:main.c        ****     static uint16_t wait_counter0;
 646:main.c        ****     wait_counter0++;
 647:main.c        **** 
 648:main.c        ****     if(fb_current_line_offset > 0 && wait_counter0 == 30000)
 649:main.c        ****     {
 650:main.c        ****         wait_counter0 = 0;
 651:main.c        **** 
 652:main.c        ****         if(fb_line_scroll_end_begin_wait == 0)
 653:main.c        ****         {
 654:main.c        ****             // Es darf gescrollt werden
 655:main.c        **** 
 656:main.c        **** 
 657:main.c        ****             if(!fb_line_scroll_direction)
 658:main.c        ****             {
 659:main.c        ****                 fb_line_scroll_pos++;
 660:main.c        ****                 if(fb_line_scroll_pos >= fb_current_line_offset)
 661:main.c        ****                 {
 662:main.c        ****                     fb_line_scroll_end_begin_wait = 6;
 663:main.c        ****                     fb_line_scroll_direction = 1;
 664:main.c        ****                 }
 665:main.c        ****             }
 666:main.c        ****             else
 667:main.c        ****             {
 668:main.c        ****                 fb_line_scroll_pos--;
 669:main.c        ****                 if(fb_line_scroll_pos == 0)
 670:main.c        ****                 {
 671:main.c        ****                     fb_line_scroll_end_begin_wait = 6;
 672:main.c        ****                     fb_line_scroll_direction = 0;
 673:main.c        ****                 }
 674:main.c        ****             }
 675:main.c        **** 
 676:main.c        ****             lcd_setcursor(2,fb_lcd_cursor_pos+1);
 677:main.c        ****             lcd_print(fb_dir_entry[fb_lcd_cursor_pos].long_name,fb_line_scroll_pos,17);
 678:main.c        ****         }
 679:main.c        ****         else fb_line_scroll_end_begin_wait--;
 680:main.c        ****     }
 681:main.c        **** }
 682:main.c        **** 
 683:main.c        **** void filebrowser_refresh()
 684:main.c        **** {
 685:main.c        ****     lcd_clear();
 686:main.c        ****     seek_to_dir_entry(fb_lcd_window_pos);
 687:main.c        **** 
 688:main.c        ****     uint8_t i=0;
 689:main.c        **** 
 690:main.c        ****     while(i<LCD_LINE_COUNT && ((fb_lcd_window_pos + i) < fb_dir_entry_count))
 691:main.c        ****     {
 692:main.c        ****         fat_read_dir(dd, &fb_dir_entry[i]);   // nächsten Directory Entry holen
 693:main.c        ****         if(!(fb_dir_entry[i].attributes & (FAT_ATTRIB_SYSTEM | FAT_ATTRIB_VOLUME | FAT_ATTRIB_HIDDE
 694:main.c        ****         {
 695:main.c        ****             lcd_setcursor(1,i+1);
 696:main.c        ****             if(fb_dir_entry[i].attributes & FAT_ATTRIB_DIR)
 697:main.c        ****                 lcd_data(fb_lcd_dir_char);
 698:main.c        ****             else
 699:main.c        ****                 lcd_data(' ');
 700:main.c        **** 
 701:main.c        ****             lcd_print(fb_dir_entry[i].long_name,0,17);
 702:main.c        **** 
 703:main.c        ****             i++;
 704:main.c        ****         }
 705:main.c        ****     }
 706:main.c        **** 
 707:main.c        ****     lcd_setcursor(0,fb_lcd_cursor_pos+1);
 708:main.c        ****     lcd_data(fb_lcd_cursor_char);
 709:main.c        **** 
 710:main.c        **** 
 711:main.c        ****     if(fb_lcd_window_pos > 0)
 712:main.c        ****     {
 713:main.c        ****         lcd_setcursor(19,1);
 714:main.c        ****         lcd_data(fb_lcd_more_top_char);
 715:main.c        ****     }
 716:main.c        **** 
 717:main.c        ****     if(fb_lcd_window_pos + LCD_LINE_COUNT < fb_dir_entry_count)
 718:main.c        ****     {
 719:main.c        ****         lcd_setcursor(19, LCD_LINE_COUNT);
 720:main.c        ****         lcd_data(fb_lcd_more_down_char);
 721:main.c        ****     }
 722:main.c        **** 
 723:main.c        ****     // Für Scrollenden Filename
 724:main.c        ****     int8_t var = (int8_t)strlen(fb_dir_entry[fb_lcd_cursor_pos].long_name) - 17;
 725:main.c        ****     if(var < 0)
 726:main.c        ****         fb_current_line_offset = 0;
 727:main.c        ****     else
 728:main.c        ****         fb_current_line_offset = var;
 729:main.c        ****     fb_line_scroll_pos = 0;
 730:main.c        ****     fb_line_scroll_direction = 0;
 731:main.c        ****     fb_line_scroll_end_begin_wait = 6;
 732:main.c        **** 
 733:main.c        **** }
 734:main.c        **** 
 735:main.c        **** /////////////////////////////////////////////////////////////////////
 736:main.c        **** 
 737:main.c        **** void init_pb2_pb3()
 738:main.c        **** {
 262               		.loc 1 738 0
 263               		.cfi_startproc
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
 739:main.c        ****     DDRB &= ~(1<<PB2 | 1<<PB3);
 268               		.loc 1 739 0
 269 012a 84B1      		in r24,0x4
 270 012c 837F      		andi r24,lo8(-13)
 271 012e 84B9      		out 0x4,r24
 740:main.c        ****     PORTB |= 1<<PB2 | 1<<PB3;
 272               		.loc 1 740 0
 273 0130 85B1      		in r24,0x5
 274 0132 8C60      		ori r24,lo8(12)
 275 0134 85B9      		out 0x5,r24
 276 0136 0895      		ret
 277               		.cfi_endproc
 278               	.LFE18:
 280               		.section	.rodata.str1.1
 281               	.LC17:
 282 0034 2020 2020 		.string	"                    "
 282      2020 2020 
 282      2020 2020 
 282      2020 2020 
 282      2020 2020 
 283               	.LC18:
 284 0049 6572 723A 		.string	"err: sd_raw_init"
 284      2073 645F 
 284      7261 775F 
 284      696E 6974 
 284      00
 285               	.LC19:
 286 005a 6572 723A 		.string	"err: partition_open"
 286      2070 6172 
 286      7469 7469 
 286      6F6E 5F6F 
 286      7065 6E00 
 287               	.LC20:
 288 006e 2A00      		.string	"*"
 289               	.LC21:
 290 0070 6572 723A 		.string	"err: fat_open"
 290      2066 6174 
 290      5F6F 7065 
 290      6E00 
 291               	.LC22:
 292 007e 2F00      		.string	"/"
 293               	.LC23:
 294 0080 6572 723A 		.string	"err: fat_open_root"
 294      2066 6174 
 294      5F6F 7065 
 294      6E5F 726F 
 294      6F74 00
 295               		.text
 296               	.global	init_sd_card
 298               	init_sd_card:
 299               	.LFB19:
 741:main.c        **** }
 742:main.c        **** 
 743:main.c        **** /////////////////////////////////////////////////////////////////////
 744:main.c        **** 
 745:main.c        **** int8_t init_sd_card(void)
 746:main.c        **** {
 300               		.loc 1 746 0
 301               		.cfi_startproc
 302 0138 0F93      		push r16
 303               	.LCFI7:
 304               		.cfi_def_cfa_offset 3
 305               		.cfi_offset 16, -2
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 1 */
 309               	.L__stack_usage = 1
 747:main.c        ****     // LCD Fehlermeldung löschen
 748:main.c        ****     lcd_setcursor( 0, 4);
 310               		.loc 1 748 0
 311 013a 64E0      		ldi r22,lo8(4)
 312 013c 80E0      		ldi r24,0
 313 013e 0E94 0000 		call lcd_setcursor
 314               	.LVL21:
 749:main.c        ****     lcd_string("                    ");
 315               		.loc 1 749 0
 316 0142 80E0      		ldi r24,lo8(.LC17)
 317 0144 90E0      		ldi r25,hi8(.LC17)
 318 0146 0E94 0000 		call lcd_string
 319               	.LVL22:
 750:main.c        ****     lcd_setcursor( 0, 4);
 320               		.loc 1 750 0
 321 014a 64E0      		ldi r22,lo8(4)
 322 014c 80E0      		ldi r24,0
 323 014e 0E94 0000 		call lcd_setcursor
 324               	.LVL23:
 751:main.c        **** 
 752:main.c        ****     set_sleep_mode(SLEEP_MODE_IDLE);
 325               		.loc 1 752 0
 326 0152 83B7      		in r24,0x33
 327 0154 817F      		andi r24,lo8(-15)
 328 0156 83BF      		out 0x33,r24
 753:main.c        **** 
 754:main.c        ****     // SD Karte initialisieren
 755:main.c        ****     if(!sd_raw_init())
 329               		.loc 1 755 0
 330 0158 0E94 0000 		call sd_raw_init
 331               	.LVL24:
 332 015c 8111      		cpse r24,__zero_reg__
 333 015e 00C0      		rjmp .L21
 756:main.c        ****     {
 757:main.c        ****         lcd_setcursor( 0, 4);
 334               		.loc 1 757 0
 335 0160 64E0      		ldi r22,lo8(4)
 336 0162 0E94 0000 		call lcd_setcursor
 337               	.LVL25:
 758:main.c        ****         lcd_string("err: sd_raw_init");
 338               		.loc 1 758 0
 339 0166 80E0      		ldi r24,lo8(.LC18)
 340 0168 90E0      		ldi r25,hi8(.LC18)
 341 016a 0E94 0000 		call lcd_string
 342               	.LVL26:
 759:main.c        ****         return 1;
 343               		.loc 1 759 0
 344 016e 81E0      		ldi r24,lo8(1)
 345 0170 00C0      		rjmp .L22
 346               	.L21:
 347               	.LBB104:
 348               	.LBB105:
 760:main.c        ****     }
 761:main.c        **** 
 762:main.c        ****     // Eine Partition öffnen (die erste)
 763:main.c        ****     partition = partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,
 349               		.loc 1 763 0
 350 0172 00E0      		ldi r16,0
 351 0174 20E0      		ldi r18,lo8(gs(sd_raw_write_interval))
 352 0176 30E0      		ldi r19,hi8(gs(sd_raw_write_interval))
 353 0178 40E0      		ldi r20,lo8(gs(sd_raw_write))
 354 017a 50E0      		ldi r21,hi8(gs(sd_raw_write))
 355 017c 60E0      		ldi r22,lo8(gs(sd_raw_read_interval))
 356 017e 70E0      		ldi r23,hi8(gs(sd_raw_read_interval))
 357 0180 80E0      		ldi r24,lo8(gs(sd_raw_read))
 358 0182 90E0      		ldi r25,hi8(gs(sd_raw_read))
 359 0184 0E94 0000 		call partition_open
 360               	.LVL27:
 361 0188 9093 0000 		sts partition+1,r25
 362 018c 8093 0000 		sts partition,r24
 764:main.c        ****     if(!partition)
 363               		.loc 1 764 0
 364 0190 892B      		or r24,r25
 365 0192 01F4      		brne .L23
 765:main.c        ****     {
 766:main.c        ****         partition = partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_inter
 366               		.loc 1 766 0
 367 0194 0FEF      		ldi r16,lo8(-1)
 368 0196 20E0      		ldi r18,lo8(gs(sd_raw_write_interval))
 369 0198 30E0      		ldi r19,hi8(gs(sd_raw_write_interval))
 370 019a 40E0      		ldi r20,lo8(gs(sd_raw_write))
 371 019c 50E0      		ldi r21,hi8(gs(sd_raw_write))
 372 019e 60E0      		ldi r22,lo8(gs(sd_raw_read_interval))
 373 01a0 70E0      		ldi r23,hi8(gs(sd_raw_read_interval))
 374 01a2 80E0      		ldi r24,lo8(gs(sd_raw_read))
 375 01a4 90E0      		ldi r25,hi8(gs(sd_raw_read))
 376 01a6 0E94 0000 		call partition_open
 377               	.LVL28:
 378 01aa 9093 0000 		sts partition+1,r25
 379 01ae 8093 0000 		sts partition,r24
 767:main.c        ****         if(!partition)
 380               		.loc 1 767 0
 381 01b2 892B      		or r24,r25
 382 01b4 01F4      		brne .L23
 768:main.c        ****         {
 769:main.c        ****             lcd_setcursor( 0, 4);
 383               		.loc 1 769 0
 384 01b6 64E0      		ldi r22,lo8(4)
 385 01b8 80E0      		ldi r24,0
 386 01ba 0E94 0000 		call lcd_setcursor
 387               	.LVL29:
 770:main.c        ****             lcd_string("err: partition_open");
 388               		.loc 1 770 0
 389 01be 80E0      		ldi r24,lo8(.LC19)
 390 01c0 90E0      		ldi r25,hi8(.LC19)
 391 01c2 0E94 0000 		call lcd_string
 392               	.LVL30:
 771:main.c        ****             return 2;
 393               		.loc 1 771 0
 394 01c6 82E0      		ldi r24,lo8(2)
 395 01c8 00C0      		rjmp .L22
 396               	.L23:
 772:main.c        ****         }
 773:main.c        ****     }
 774:main.c        **** 
 775:main.c        ****     // FAT16/32 Filesystem versuchen zu öffnen
 776:main.c        **** 
 777:main.c        ****     lcd_string("*");
 397               		.loc 1 777 0
 398 01ca 80E0      		ldi r24,lo8(.LC20)
 399 01cc 90E0      		ldi r25,hi8(.LC20)
 400 01ce 0E94 0000 		call lcd_string
 401               	.LVL31:
 778:main.c        **** 
 779:main.c        ****     fs = fat_open(partition);
 402               		.loc 1 779 0
 403 01d2 8091 0000 		lds r24,partition
 404 01d6 9091 0000 		lds r25,partition+1
 405 01da 0E94 0000 		call fat_open
 406               	.LVL32:
 407 01de 9093 0000 		sts fs+1,r25
 408 01e2 8093 0000 		sts fs,r24
 780:main.c        **** 
 781:main.c        ****     lcd_string("*");
 409               		.loc 1 781 0
 410 01e6 80E0      		ldi r24,lo8(.LC20)
 411 01e8 90E0      		ldi r25,hi8(.LC20)
 412 01ea 0E94 0000 		call lcd_string
 413               	.LVL33:
 782:main.c        **** 
 783:main.c        ****     if(!fs)
 414               		.loc 1 783 0
 415 01ee 8091 0000 		lds r24,fs
 416 01f2 9091 0000 		lds r25,fs+1
 417 01f6 0097      		sbiw r24,0
 418 01f8 01F4      		brne .L24
 784:main.c        ****     {
 785:main.c        ****         lcd_setcursor( 0, 4);
 419               		.loc 1 785 0
 420 01fa 64E0      		ldi r22,lo8(4)
 421 01fc 80E0      		ldi r24,0
 422 01fe 0E94 0000 		call lcd_setcursor
 423               	.LVL34:
 786:main.c        ****         lcd_string("err: fat_open");
 424               		.loc 1 786 0
 425 0202 80E0      		ldi r24,lo8(.LC21)
 426 0204 90E0      		ldi r25,hi8(.LC21)
 427 0206 0E94 0000 		call lcd_string
 428               	.LVL35:
 787:main.c        ****         return 3;
 429               		.loc 1 787 0
 430 020a 83E0      		ldi r24,lo8(3)
 431 020c 00C0      		rjmp .L22
 432               	.L24:
 788:main.c        ****     }
 789:main.c        **** 
 790:main.c        ****     // Root Verzeichnis öffnen
 791:main.c        ****     fat_get_dir_entry_of_path(fs, "/", &dir_entry);
 433               		.loc 1 791 0
 434 020e 40E0      		ldi r20,lo8(dir_entry)
 435 0210 50E0      		ldi r21,hi8(dir_entry)
 436 0212 60E0      		ldi r22,lo8(.LC22)
 437 0214 70E0      		ldi r23,hi8(.LC22)
 438 0216 0E94 0000 		call fat_get_dir_entry_of_path
 439               	.LVL36:
 792:main.c        ****     dd = fat_open_dir(fs, &dir_entry);
 440               		.loc 1 792 0
 441 021a 60E0      		ldi r22,lo8(dir_entry)
 442 021c 70E0      		ldi r23,hi8(dir_entry)
 443 021e 8091 0000 		lds r24,fs
 444 0222 9091 0000 		lds r25,fs+1
 445 0226 0E94 0000 		call fat_open_dir
 446               	.LVL37:
 447 022a 9093 0000 		sts dd+1,r25
 448 022e 8093 0000 		sts dd,r24
 793:main.c        ****     if(!dd)
 449               		.loc 1 793 0
 450 0232 892B      		or r24,r25
 451 0234 01F4      		brne .L25
 794:main.c        ****     {
 795:main.c        ****         lcd_setcursor( 0, 4);
 452               		.loc 1 795 0
 453 0236 64E0      		ldi r22,lo8(4)
 454 0238 80E0      		ldi r24,0
 455 023a 0E94 0000 		call lcd_setcursor
 456               	.LVL38:
 796:main.c        ****         lcd_string("err: fat_open_root");
 457               		.loc 1 796 0
 458 023e 80E0      		ldi r24,lo8(.LC23)
 459 0240 90E0      		ldi r25,hi8(.LC23)
 460 0242 0E94 0000 		call lcd_string
 461               	.LVL39:
 797:main.c        ****         return 4;
 462               		.loc 1 797 0
 463 0246 84E0      		ldi r24,lo8(4)
 464 0248 00C0      		rjmp .L22
 465               	.L25:
 798:main.c        ****     }
 799:main.c        ****     return 0;
 466               		.loc 1 799 0
 467 024a 80E0      		ldi r24,0
 468               	.L22:
 469               	/* epilogue start */
 470               	.LBE105:
 471               	.LBE104:
 800:main.c        **** }
 472               		.loc 1 800 0
 473 024c 0F91      		pop r16
 474 024e 0895      		ret
 475               		.cfi_endproc
 476               	.LFE19:
 478               	.global	release_sd_card
 480               	release_sd_card:
 481               	.LFB20:
 801:main.c        **** 
 802:main.c        **** /////////////////////////////////////////////////////////////////////
 803:main.c        **** 
 804:main.c        **** void release_sd_card()
 805:main.c        **** {
 482               		.loc 1 805 0
 483               		.cfi_startproc
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 0 */
 487               	.L__stack_usage = 0
 806:main.c        ****     fat_close_dir(dd);
 488               		.loc 1 806 0
 489 0250 8091 0000 		lds r24,dd
 490 0254 9091 0000 		lds r25,dd+1
 491 0258 0E94 0000 		call fat_close_dir
 492               	.LVL40:
 807:main.c        ****     fat_close(fs);
 493               		.loc 1 807 0
 494 025c 8091 0000 		lds r24,fs
 495 0260 9091 0000 		lds r25,fs+1
 496 0264 0E94 0000 		call fat_close
 497               	.LVL41:
 808:main.c        ****     partition_close(partition);
 498               		.loc 1 808 0
 499 0268 8091 0000 		lds r24,partition
 500 026c 9091 0000 		lds r25,partition+1
 501 0270 0C94 0000 		jmp partition_close
 502               	.LVL42:
 503               		.cfi_endproc
 504               	.LFE20:
 506               	.global	find_file_in_dir
 508               	find_file_in_dir:
 509               	.LFB21:
 809:main.c        **** }
 810:main.c        **** 
 811:main.c        **** /////////////////////////////////////////////////////////////////////
 812:main.c        **** 
 813:main.c        **** uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, str
 814:main.c        **** {
 510               		.loc 1 814 0
 511               		.cfi_startproc
 512               	.LVL43:
 513 0274 EF92      		push r14
 514               	.LCFI8:
 515               		.cfi_def_cfa_offset 3
 516               		.cfi_offset 14, -2
 517 0276 FF92      		push r15
 518               	.LCFI9:
 519               		.cfi_def_cfa_offset 4
 520               		.cfi_offset 15, -3
 521 0278 0F93      		push r16
 522               	.LCFI10:
 523               		.cfi_def_cfa_offset 5
 524               		.cfi_offset 16, -4
 525 027a 1F93      		push r17
 526               	.LCFI11:
 527               		.cfi_def_cfa_offset 6
 528               		.cfi_offset 17, -5
 529 027c CF93      		push r28
 530               	.LCFI12:
 531               		.cfi_def_cfa_offset 7
 532               		.cfi_offset 28, -6
 533 027e DF93      		push r29
 534               	.LCFI13:
 535               		.cfi_def_cfa_offset 8
 536               		.cfi_offset 29, -7
 537               	/* prologue: function */
 538               	/* frame size = 0 */
 539               	/* stack size = 6 */
 540               	.L__stack_usage = 6
 541 0280 EB01      		movw r28,r22
 542 0282 7A01      		movw r14,r20
 543 0284 8901      		movw r16,r18
 815:main.c        ****     fat_reset_dir(dd);
 544               		.loc 1 815 0
 545 0286 CB01      		movw r24,r22
 546               	.LVL44:
 547 0288 0E94 0000 		call fat_reset_dir
 548               	.LVL45:
 549               	.L28:
 816:main.c        ****     while(fat_read_dir(dd, dir_entry))
 550               		.loc 1 816 0
 551 028c B801      		movw r22,r16
 552 028e CE01      		movw r24,r28
 553 0290 0E94 0000 		call fat_read_dir
 554               	.LVL46:
 555 0294 8823      		tst r24
 556 0296 01F0      		breq .L29
 817:main.c        ****     {
 818:main.c        ****         if(strcmp(dir_entry->long_name, name) == 0)
 557               		.loc 1 818 0
 558 0298 B701      		movw r22,r14
 559 029a C801      		movw r24,r16
 560 029c 0E94 0000 		call strcmp
 561               	.LVL47:
 562 02a0 892B      		or r24,r25
 563 02a2 01F4      		brne .L28
 819:main.c        ****         {
 820:main.c        ****             //fat_reset_dir(dd);
 821:main.c        ****             return 1;
 564               		.loc 1 821 0
 565 02a4 81E0      		ldi r24,lo8(1)
 566               	.L29:
 567               	/* epilogue start */
 822:main.c        ****         }
 823:main.c        ****     }
 824:main.c        ****     return 0;
 825:main.c        **** }
 568               		.loc 1 825 0
 569 02a6 DF91      		pop r29
 570 02a8 CF91      		pop r28
 571               	.LVL48:
 572 02aa 1F91      		pop r17
 573 02ac 0F91      		pop r16
 574               	.LVL49:
 575 02ae FF90      		pop r15
 576 02b0 EF90      		pop r14
 577               	.LVL50:
 578 02b2 0895      		ret
 579               		.cfi_endproc
 580               	.LFE21:
 582               	.global	get_dir_entry_count
 584               	get_dir_entry_count:
 585               	.LFB22:
 826:main.c        **** 
 827:main.c        **** /////////////////////////////////////////////////////////////////////
 828:main.c        **** 
 829:main.c        **** uint16_t get_dir_entry_count()
 830:main.c        **** {
 586               		.loc 1 830 0
 587               		.cfi_startproc
 588 02b4 CF93      		push r28
 589               	.LCFI14:
 590               		.cfi_def_cfa_offset 3
 591               		.cfi_offset 28, -2
 592 02b6 DF93      		push r29
 593               	.LCFI15:
 594               		.cfi_def_cfa_offset 4
 595               		.cfi_offset 29, -3
 596               	/* prologue: function */
 597               	/* frame size = 0 */
 598               	/* stack size = 2 */
 599               	.L__stack_usage = 2
 600               	.LVL51:
 831:main.c        ****     uint16_t entry_count = 0;
 832:main.c        **** 
 833:main.c        ****     fat_reset_dir(dd);
 601               		.loc 1 833 0
 602 02b8 8091 0000 		lds r24,dd
 603 02bc 9091 0000 		lds r25,dd+1
 604 02c0 0E94 0000 		call fat_reset_dir
 605               	.LVL52:
 831:main.c        ****     uint16_t entry_count = 0;
 606               		.loc 1 831 0
 607 02c4 C0E0      		ldi r28,0
 608 02c6 D0E0      		ldi r29,0
 609               	.LVL53:
 610               	.L33:
 834:main.c        ****     while(fat_read_dir(dd, &dir_entry))
 611               		.loc 1 834 0
 612 02c8 60E0      		ldi r22,lo8(dir_entry)
 613 02ca 70E0      		ldi r23,hi8(dir_entry)
 614 02cc 8091 0000 		lds r24,dd
 615 02d0 9091 0000 		lds r25,dd+1
 616 02d4 0E94 0000 		call fat_read_dir
 617               	.LVL54:
 618 02d8 8823      		tst r24
 619 02da 01F0      		breq .L36
 835:main.c        ****     {
 836:main.c        ****         if(!(dir_entry.attributes & (FAT_ATTRIB_SYSTEM | FAT_ATTRIB_VOLUME | FAT_ATTRIB_HIDDEN)))
 620               		.loc 1 836 0
 621 02dc 8091 0000 		lds r24,dir_entry+32
 622 02e0 8E70      		andi r24,lo8(14)
 623 02e2 01F4      		brne .L33
 837:main.c        ****             entry_count++;
 624               		.loc 1 837 0
 625 02e4 2196      		adiw r28,1
 626               	.LVL55:
 627 02e6 00C0      		rjmp .L33
 628               	.L36:
 838:main.c        ****     }
 839:main.c        ****     return entry_count;
 840:main.c        **** }
 629               		.loc 1 840 0
 630 02e8 CE01      		movw r24,r28
 631               	/* epilogue start */
 632 02ea DF91      		pop r29
 633 02ec CF91      		pop r28
 634               	.LVL56:
 635 02ee 0895      		ret
 636               		.cfi_endproc
 637               	.LFE22:
 639               	.global	seek_to_dir_entry
 641               	seek_to_dir_entry:
 642               	.LFB23:
 841:main.c        **** 
 842:main.c        **** /////////////////////////////////////////////////////////////////////
 843:main.c        **** 
 844:main.c        **** uint16_t seek_to_dir_entry(uint16_t entry_num)
 845:main.c        **** {
 643               		.loc 1 845 0
 644               		.cfi_startproc
 645               	.LVL57:
 646 02f0 0F93      		push r16
 647               	.LCFI16:
 648               		.cfi_def_cfa_offset 3
 649               		.cfi_offset 16, -2
 650 02f2 1F93      		push r17
 651               	.LCFI17:
 652               		.cfi_def_cfa_offset 4
 653               		.cfi_offset 17, -3
 654 02f4 CF93      		push r28
 655               	.LCFI18:
 656               		.cfi_def_cfa_offset 5
 657               		.cfi_offset 28, -4
 658 02f6 DF93      		push r29
 659               	.LCFI19:
 660               		.cfi_def_cfa_offset 6
 661               		.cfi_offset 29, -5
 662               	/* prologue: function */
 663               	/* frame size = 0 */
 664               	/* stack size = 4 */
 665               	.L__stack_usage = 4
 666 02f8 8C01      		movw r16,r24
 667 02fa 8091 0000 		lds r24,dd
 668 02fe 9091 0000 		lds r25,dd+1
 669               	.LVL58:
 846:main.c        ****     if(entry_num == 0)
 670               		.loc 1 846 0
 671 0302 0115      		cp r16,__zero_reg__
 672 0304 1105      		cpc r17,__zero_reg__
 673 0306 01F4      		brne .L38
 674               	.LVL59:
 675               	.LBB108:
 676               	.LBB109:
 847:main.c        ****     {
 848:main.c        ****         fat_reset_dir(dd);
 677               		.loc 1 848 0
 678 0308 0E94 0000 		call fat_reset_dir
 679               	.LVL60:
 680 030c 80E0      		ldi r24,0
 681 030e 90E0      		ldi r25,0
 682 0310 00C0      		rjmp .L39
 683               	.L38:
 684               	.LVL61:
 685               	.LBE109:
 686               	.LBE108:
 849:main.c        ****         return 0;
 850:main.c        ****     }
 851:main.c        **** 
 852:main.c        ****     uint16_t entry_count = 0;
 853:main.c        **** 
 854:main.c        ****     fat_reset_dir(dd);
 687               		.loc 1 854 0
 688 0312 0E94 0000 		call fat_reset_dir
 689               	.LVL62:
 852:main.c        **** 
 690               		.loc 1 852 0
 691 0316 C0E0      		ldi r28,0
 692 0318 D0E0      		ldi r29,0
 855:main.c        ****     while(fat_read_dir(dd, &dir_entry) && (entry_count < (entry_num-1)))
 693               		.loc 1 855 0
 694 031a 0150      		subi r16,1
 695 031c 1109      		sbc r17,__zero_reg__
 696               	.LVL63:
 697               	.L40:
 698 031e 60E0      		ldi r22,lo8(dir_entry)
 699 0320 70E0      		ldi r23,hi8(dir_entry)
 700 0322 8091 0000 		lds r24,dd
 701 0326 9091 0000 		lds r25,dd+1
 702 032a 0E94 0000 		call fat_read_dir
 703               	.LVL64:
 704 032e 8823      		tst r24
 705 0330 01F0      		breq .L43
 706               		.loc 1 855 0 is_stmt 0 discriminator 1
 707 0332 C017      		cp r28,r16
 708 0334 D107      		cpc r29,r17
 709 0336 00F4      		brsh .L43
 856:main.c        ****     {
 857:main.c        ****         if(!(dir_entry.attributes & (FAT_ATTRIB_SYSTEM | FAT_ATTRIB_VOLUME | FAT_ATTRIB_HIDDEN)))
 710               		.loc 1 857 0 is_stmt 1
 711 0338 8091 0000 		lds r24,dir_entry+32
 712 033c 8E70      		andi r24,lo8(14)
 713 033e 01F4      		brne .L40
 858:main.c        ****             entry_count++;
 714               		.loc 1 858 0
 715 0340 2196      		adiw r28,1
 716               	.LVL65:
 717 0342 00C0      		rjmp .L40
 718               	.L43:
 719 0344 CE01      		movw r24,r28
 720               	.LVL66:
 721               	.L39:
 722               	/* epilogue start */
 859:main.c        ****     }
 860:main.c        ****     return entry_count;
 861:main.c        **** }
 723               		.loc 1 861 0
 724 0346 DF91      		pop r29
 725 0348 CF91      		pop r28
 726 034a 1F91      		pop r17
 727 034c 0F91      		pop r16
 728 034e 0895      		ret
 729               		.cfi_endproc
 730               	.LFE23:
 732               	.global	filebrowser_refresh
 734               	filebrowser_refresh:
 735               	.LFB17:
 684:main.c        ****     lcd_clear();
 736               		.loc 1 684 0
 737               		.cfi_startproc
 738 0350 FF92      		push r15
 739               	.LCFI20:
 740               		.cfi_def_cfa_offset 3
 741               		.cfi_offset 15, -2
 742 0352 0F93      		push r16
 743               	.LCFI21:
 744               		.cfi_def_cfa_offset 4
 745               		.cfi_offset 16, -3
 746 0354 1F93      		push r17
 747               	.LCFI22:
 748               		.cfi_def_cfa_offset 5
 749               		.cfi_offset 17, -4
 750 0356 CF93      		push r28
 751               	.LCFI23:
 752               		.cfi_def_cfa_offset 6
 753               		.cfi_offset 28, -5
 754 0358 DF93      		push r29
 755               	.LCFI24:
 756               		.cfi_def_cfa_offset 7
 757               		.cfi_offset 29, -6
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 5 */
 761               	.L__stack_usage = 5
 685:main.c        ****     seek_to_dir_entry(fb_lcd_window_pos);
 762               		.loc 1 685 0
 763 035a 0E94 0000 		call lcd_clear
 764               	.LVL67:
 686:main.c        **** 
 765               		.loc 1 686 0
 766 035e 8091 0000 		lds r24,fb_lcd_window_pos
 767 0362 90E0      		ldi r25,0
 768 0364 0E94 0000 		call seek_to_dir_entry
 769               	.LVL68:
 770 0368 00E0      		ldi r16,lo8(fb_dir_entry)
 771 036a 10E0      		ldi r17,hi8(fb_dir_entry)
 690:main.c        ****     {
 772               		.loc 1 690 0
 773 036c C0E0      		ldi r28,0
 774 036e D0E0      		ldi r29,0
 696:main.c        ****                 lcd_data(fb_lcd_dir_char);
 775               		.loc 1 696 0
 776 0370 81E3      		ldi r24,lo8(49)
 777 0372 F82E      		mov r15,r24
 778               	.LVL69:
 779               	.L46:
 690:main.c        ****     {
 780               		.loc 1 690 0
 781 0374 C430      		cpi r28,4
 782 0376 D105      		cpc r29,__zero_reg__
 783 0378 01F0      		breq .L49
 690:main.c        ****     {
 784               		.loc 1 690 0 is_stmt 0 discriminator 1
 785 037a 8091 0000 		lds r24,fb_lcd_window_pos
 786 037e 9E01      		movw r18,r28
 787 0380 280F      		add r18,r24
 788 0382 311D      		adc r19,__zero_reg__
 789 0384 8091 0000 		lds r24,fb_dir_entry_count
 790 0388 9091 0000 		lds r25,fb_dir_entry_count+1
 791 038c 2817      		cp r18,r24
 792 038e 3907      		cpc r19,r25
 793 0390 00F4      		brsh .L49
 692:main.c        ****         if(!(fb_dir_entry[i].attributes & (FAT_ATTRIB_SYSTEM | FAT_ATTRIB_VOLUME | FAT_ATTRIB_HIDDE
 794               		.loc 1 692 0 is_stmt 1
 795 0392 B801      		movw r22,r16
 796 0394 8091 0000 		lds r24,dd
 797 0398 9091 0000 		lds r25,dd+1
 798 039c 0E94 0000 		call fat_read_dir
 799               	.LVL70:
 693:main.c        ****         {
 800               		.loc 1 693 0
 801 03a0 F801      		movw r30,r16
 802 03a2 80A1      		ldd r24,Z+32
 803 03a4 8E70      		andi r24,lo8(14)
 804 03a6 01F4      		brne .L46
 695:main.c        ****             if(fb_dir_entry[i].attributes & FAT_ATTRIB_DIR)
 805               		.loc 1 695 0
 806 03a8 6C2F      		mov r22,r28
 807 03aa 6F5F      		subi r22,lo8(-(1))
 808 03ac 81E0      		ldi r24,lo8(1)
 809 03ae 0E94 0000 		call lcd_setcursor
 810               	.LVL71:
 696:main.c        ****                 lcd_data(fb_lcd_dir_char);
 811               		.loc 1 696 0
 812 03b2 FC9E      		mul r15,r28
 813 03b4 F001      		movw r30,r0
 814 03b6 FD9E      		mul r15,r29
 815 03b8 F00D      		add r31,r0
 816 03ba 1124      		clr __zero_reg__
 817 03bc E050      		subi r30,lo8(-(fb_dir_entry))
 818 03be F040      		sbci r31,hi8(-(fb_dir_entry))
 819 03c0 80A1      		ldd r24,Z+32
 820 03c2 84FF      		sbrs r24,4
 821 03c4 00C0      		rjmp .L47
 697:main.c        ****             else
 822               		.loc 1 697 0
 823 03c6 8091 0000 		lds r24,fb_lcd_dir_char
 824 03ca 00C0      		rjmp .L62
 825               	.L47:
 699:main.c        **** 
 826               		.loc 1 699 0
 827 03cc 80E2      		ldi r24,lo8(32)
 828               	.L62:
 829 03ce 0E94 0000 		call lcd_data
 830               	.LVL72:
 701:main.c        **** 
 831               		.loc 1 701 0
 832 03d2 41E1      		ldi r20,lo8(17)
 833 03d4 60E0      		ldi r22,0
 834 03d6 C801      		movw r24,r16
 835 03d8 0E94 0000 		call lcd_print
 836               	.LVL73:
 837 03dc 2196      		adiw r28,1
 838               	.LVL74:
 839 03de 0F5C      		subi r16,-49
 840 03e0 1F4F      		sbci r17,-1
 841 03e2 00C0      		rjmp .L46
 842               	.LVL75:
 843               	.L49:
 707:main.c        ****     lcd_data(fb_lcd_cursor_char);
 844               		.loc 1 707 0
 845 03e4 6091 0000 		lds r22,fb_lcd_cursor_pos
 846 03e8 6F5F      		subi r22,lo8(-(1))
 847 03ea 80E0      		ldi r24,0
 848 03ec 0E94 0000 		call lcd_setcursor
 849               	.LVL76:
 708:main.c        **** 
 850               		.loc 1 708 0
 851 03f0 8091 0000 		lds r24,fb_lcd_cursor_char
 852 03f4 0E94 0000 		call lcd_data
 853               	.LVL77:
 711:main.c        ****     {
 854               		.loc 1 711 0
 855 03f8 8091 0000 		lds r24,fb_lcd_window_pos
 856 03fc 8823      		tst r24
 857 03fe 01F0      		breq .L51
 713:main.c        ****         lcd_data(fb_lcd_more_top_char);
 858               		.loc 1 713 0
 859 0400 61E0      		ldi r22,lo8(1)
 860 0402 83E1      		ldi r24,lo8(19)
 861 0404 0E94 0000 		call lcd_setcursor
 862               	.LVL78:
 714:main.c        ****     }
 863               		.loc 1 714 0
 864 0408 8091 0000 		lds r24,fb_lcd_more_top_char
 865 040c 0E94 0000 		call lcd_data
 866               	.LVL79:
 867               	.L51:
 717:main.c        ****     {
 868               		.loc 1 717 0
 869 0410 8091 0000 		lds r24,fb_lcd_window_pos
 870 0414 90E0      		ldi r25,0
 871 0416 0496      		adiw r24,4
 872 0418 2091 0000 		lds r18,fb_dir_entry_count
 873 041c 3091 0000 		lds r19,fb_dir_entry_count+1
 874 0420 8217      		cp r24,r18
 875 0422 9307      		cpc r25,r19
 876 0424 00F4      		brsh .L52
 719:main.c        ****         lcd_data(fb_lcd_more_down_char);
 877               		.loc 1 719 0
 878 0426 64E0      		ldi r22,lo8(4)
 879 0428 83E1      		ldi r24,lo8(19)
 880 042a 0E94 0000 		call lcd_setcursor
 881               	.LVL80:
 720:main.c        ****     }
 882               		.loc 1 720 0
 883 042e 8091 0000 		lds r24,fb_lcd_more_down_char
 884 0432 0E94 0000 		call lcd_data
 885               	.LVL81:
 886               	.L52:
 724:main.c        ****     if(var < 0)
 887               		.loc 1 724 0
 888 0436 A091 0000 		lds r26,fb_lcd_cursor_pos
 889 043a F1E3      		ldi r31,lo8(49)
 890 043c AF9F      		mul r26,r31
 891 043e D001      		movw r26,r0
 892 0440 1124      		clr __zero_reg__
 893 0442 A050      		subi r26,lo8(-(fb_dir_entry))
 894 0444 B040      		sbci r27,hi8(-(fb_dir_entry))
 895 0446 FD01      		movw r30,r26
 896               		0:
 897 0448 0190      		ld __tmp_reg__,Z+
 898 044a 0020      		tst __tmp_reg__
 899 044c 01F4      		brne 0b
 900 044e EA1B      		sub r30,r26
 901 0450 E251      		subi r30,lo8(-(-18))
 902               	.LVL82:
 725:main.c        ****         fb_current_line_offset = 0;
 903               		.loc 1 725 0
 904 0452 E7FF      		sbrs r30,7
 905 0454 00C0      		rjmp .L53
 726:main.c        ****     else
 906               		.loc 1 726 0
 907 0456 1092 0000 		sts fb_current_line_offset,__zero_reg__
 908 045a 00C0      		rjmp .L54
 909               	.L53:
 728:main.c        ****     fb_line_scroll_pos = 0;
 910               		.loc 1 728 0
 911 045c E093 0000 		sts fb_current_line_offset,r30
 912               	.L54:
 729:main.c        ****     fb_line_scroll_direction = 0;
 913               		.loc 1 729 0
 914 0460 1092 0000 		sts fb_line_scroll_pos,__zero_reg__
 730:main.c        ****     fb_line_scroll_end_begin_wait = 6;
 915               		.loc 1 730 0
 916 0464 1092 0000 		sts fb_line_scroll_direction,__zero_reg__
 731:main.c        **** 
 917               		.loc 1 731 0
 918 0468 86E0      		ldi r24,lo8(6)
 919 046a 8093 0000 		sts fb_line_scroll_end_begin_wait,r24
 920               	/* epilogue start */
 733:main.c        **** 
 921               		.loc 1 733 0
 922 046e DF91      		pop r29
 923 0470 CF91      		pop r28
 924 0472 1F91      		pop r17
 925 0474 0F91      		pop r16
 926 0476 FF90      		pop r15
 927 0478 0895      		ret
 928               		.cfi_endproc
 929               	.LFE17:
 931               	.global	set_gui_mode
 933               	set_gui_mode:
 934               	.LFB15:
 486:main.c        ****     current_gui_mode = gui_mode;
 935               		.loc 1 486 0
 936               		.cfi_startproc
 937               	.LVL83:
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 0 */
 941               	.L__stack_usage = 0
 487:main.c        ****     switch(gui_mode)
 942               		.loc 1 487 0
 943 047a 8093 0000 		sts current_gui_mode,r24
 488:main.c        ****     {
 944               		.loc 1 488 0
 945 047e 8130      		cpi r24,lo8(1)
 946 0480 01F0      		breq .L65
 947 0482 00F0      		brlo .L66
 948 0484 8230      		cpi r24,lo8(2)
 949 0486 01F0      		breq .L67
 950 0488 0895      		ret
 951               	.L66:
 952 048a 0C94 0000 		jmp set_gui_mode.part.3
 953               	.LVL84:
 954               	.L65:
 538:main.c        ****         break;
 955               		.loc 1 538 0
 956 048e 0C94 0000 		jmp menu_refresh
 957               	.LVL85:
 958               	.L67:
 541:main.c        ****         break;
 959               		.loc 1 541 0
 960 0492 0C94 0000 		jmp filebrowser_refresh
 961               	.LVL86:
 962               		.cfi_endproc
 963               	.LFE15:
 965               	.global	change_dir
 967               	change_dir:
 968               	.LFB24:
 862:main.c        **** 
 863:main.c        **** /////////////////////////////////////////////////////////////////////
 864:main.c        **** 
 865:main.c        **** uint8_t change_dir(const char* path)
 866:main.c        **** {
 969               		.loc 1 866 0
 970               		.cfi_startproc
 971               	.LVL87:
 972 0496 0F93      		push r16
 973               	.LCFI25:
 974               		.cfi_def_cfa_offset 3
 975               		.cfi_offset 16, -2
 976 0498 1F93      		push r17
 977               	.LCFI26:
 978               		.cfi_def_cfa_offset 4
 979               		.cfi_offset 17, -3
 980 049a CF93      		push r28
 981               	.LCFI27:
 982               		.cfi_def_cfa_offset 5
 983               		.cfi_offset 28, -4
 984 049c DF93      		push r29
 985               	.LCFI28:
 986               		.cfi_def_cfa_offset 6
 987               		.cfi_offset 29, -5
 988 049e CDB7      		in r28,__SP_L__
 989 04a0 DEB7      		in r29,__SP_H__
 990               	.LCFI29:
 991               		.cfi_def_cfa_register 28
 992 04a2 E197      		sbiw r28,49
 993               	.LCFI30:
 994               		.cfi_def_cfa_offset 55
 995 04a4 0FB6      		in __tmp_reg__,__SREG__
 996 04a6 F894      		cli
 997 04a8 DEBF      		out __SP_H__,r29
 998 04aa 0FBE      		out __SREG__,__tmp_reg__
 999 04ac CDBF      		out __SP_L__,r28
 1000               	/* prologue: function */
 1001               	/* frame size = 49 */
 1002               	/* stack size = 53 */
 1003               	.L__stack_usage = 53
 867:main.c        ****     /* change directory */
 868:main.c        ****     struct fat_dir_entry_struct subdir_entry;
 869:main.c        ****     if(find_file_in_dir(fs, dd, path, &subdir_entry))
 1004               		.loc 1 869 0
 1005 04ae 6091 0000 		lds r22,dd
 1006 04b2 7091 0000 		lds r23,dd+1
 1007 04b6 9E01      		movw r18,r28
 1008 04b8 2F5F      		subi r18,-1
 1009 04ba 3F4F      		sbci r19,-1
 1010 04bc AC01      		movw r20,r24
 1011 04be 8091 0000 		lds r24,fs
 1012 04c2 9091 0000 		lds r25,fs+1
 1013               	.LVL88:
 1014 04c6 0E94 0000 		call find_file_in_dir
 1015               	.LVL89:
 1016 04ca 8111      		cpse r24,__zero_reg__
 1017 04cc 00C0      		rjmp .L70
 1018               	.L72:
 870:main.c        ****     {
 871:main.c        ****         struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
 872:main.c        ****         if(dd_new)
 873:main.c        ****         {
 874:main.c        **** 
 875:main.c        ****             fat_close_dir(dd);
 876:main.c        ****             dd = dd_new;
 877:main.c        **** 
 878:main.c        ****             fb_dir_entry_count = get_dir_entry_count();
 879:main.c        **** 
 880:main.c        ****             return 1;
 881:main.c        ****         }
 882:main.c        ****     }
 883:main.c        ****     return 0;
 1019               		.loc 1 883 0
 1020 04ce 80E0      		ldi r24,0
 1021 04d0 00C0      		rjmp .L71
 1022               	.L70:
 1023               	.LBB110:
 871:main.c        ****         if(dd_new)
 1024               		.loc 1 871 0
 1025 04d2 BE01      		movw r22,r28
 1026 04d4 6F5F      		subi r22,-1
 1027 04d6 7F4F      		sbci r23,-1
 1028 04d8 8091 0000 		lds r24,fs
 1029 04dc 9091 0000 		lds r25,fs+1
 1030 04e0 0E94 0000 		call fat_open_dir
 1031               	.LVL90:
 1032 04e4 8C01      		movw r16,r24
 1033               	.LVL91:
 872:main.c        ****         {
 1034               		.loc 1 872 0
 1035 04e6 892B      		or r24,r25
 1036 04e8 01F0      		breq .L72
 875:main.c        ****             dd = dd_new;
 1037               		.loc 1 875 0
 1038 04ea 8091 0000 		lds r24,dd
 1039 04ee 9091 0000 		lds r25,dd+1
 1040 04f2 0E94 0000 		call fat_close_dir
 1041               	.LVL92:
 876:main.c        **** 
 1042               		.loc 1 876 0
 1043 04f6 1093 0000 		sts dd+1,r17
 1044 04fa 0093 0000 		sts dd,r16
 878:main.c        **** 
 1045               		.loc 1 878 0
 1046 04fe 0E94 0000 		call get_dir_entry_count
 1047               	.LVL93:
 1048 0502 9093 0000 		sts fb_dir_entry_count+1,r25
 1049 0506 8093 0000 		sts fb_dir_entry_count,r24
 880:main.c        ****         }
 1050               		.loc 1 880 0
 1051 050a 81E0      		ldi r24,lo8(1)
 1052               	.LVL94:
 1053               	.L71:
 1054               	/* epilogue start */
 1055               	.LBE110:
 884:main.c        **** }
 1056               		.loc 1 884 0
 1057 050c E196      		adiw r28,49
 1058 050e 0FB6      		in __tmp_reg__,__SREG__
 1059 0510 F894      		cli
 1060 0512 DEBF      		out __SP_H__,r29
 1061 0514 0FBE      		out __SREG__,__tmp_reg__
 1062 0516 CDBF      		out __SP_L__,r28
 1063 0518 DF91      		pop r29
 1064 051a CF91      		pop r28
 1065 051c 1F91      		pop r17
 1066 051e 0F91      		pop r16
 1067 0520 0895      		ret
 1068               		.cfi_endproc
 1069               	.LFE24:
 1071               		.section	.rodata.str1.1
 1072               	.LC24:
 1073 0093 2D2D 2031 		.string	"-- 1541-rebuild --"
 1073      3534 312D 
 1073      7265 6275 
 1073      696C 6420 
 1073      2D2D 00
 1074               	.LC25:
 1075 00a6 4669 726D 		.string	"Firmware:  "
 1075      7761 7265 
 1075      3A20 2000 
 1076               	.LC26:
 1077 00b2 312E 332E 		.string	"1.3.0"
 1077      3000 
 1078               	.LC27:
 1079 00b8 6279 2074 		.string	"by thorsten kattanek"
 1079      686F 7273 
 1079      7465 6E20 
 1079      6B61 7474 
 1079      616E 656B 
 1080               		.text
 1081               	.global	show_start_message
 1083               	show_start_message:
 1084               	.LFB25:
 885:main.c        **** 
 886:main.c        **** /////////////////////////////////////////////////////////////////////
 887:main.c        **** 
 888:main.c        **** void show_start_message(void)
 889:main.c        **** {
 1085               		.loc 1 889 0
 1086               		.cfi_startproc
 1087               	/* prologue: function */
 1088               	/* frame size = 0 */
 1089               	/* stack size = 0 */
 1090               	.L__stack_usage = 0
 890:main.c        ****     lcd_clear();
 1091               		.loc 1 890 0
 1092 0522 0E94 0000 		call lcd_clear
 1093               	.LVL95:
 891:main.c        ****     lcd_setcursor( 1, 1);
 1094               		.loc 1 891 0
 1095 0526 61E0      		ldi r22,lo8(1)
 1096 0528 81E0      		ldi r24,lo8(1)
 1097 052a 0E94 0000 		call lcd_setcursor
 1098               	.LVL96:
 892:main.c        ****     lcd_string("-- 1541-rebuild --");
 1099               		.loc 1 892 0
 1100 052e 80E0      		ldi r24,lo8(.LC24)
 1101 0530 90E0      		ldi r25,hi8(.LC24)
 1102 0532 0E94 0000 		call lcd_string
 1103               	.LVL97:
 893:main.c        ****     lcd_setcursor( 2,2);
 1104               		.loc 1 893 0
 1105 0536 62E0      		ldi r22,lo8(2)
 1106 0538 82E0      		ldi r24,lo8(2)
 1107 053a 0E94 0000 		call lcd_setcursor
 1108               	.LVL98:
 894:main.c        ****     lcd_string("Firmware:  ");
 1109               		.loc 1 894 0
 1110 053e 80E0      		ldi r24,lo8(.LC25)
 1111 0540 90E0      		ldi r25,hi8(.LC25)
 1112 0542 0E94 0000 		call lcd_string
 1113               	.LVL99:
 895:main.c        ****     lcd_string(VERSION);
 1114               		.loc 1 895 0
 1115 0546 80E0      		ldi r24,lo8(.LC26)
 1116 0548 90E0      		ldi r25,hi8(.LC26)
 1117 054a 0E94 0000 		call lcd_string
 1118               	.LVL100:
 896:main.c        ****     lcd_setcursor( 0,4);
 1119               		.loc 1 896 0
 1120 054e 64E0      		ldi r22,lo8(4)
 1121 0550 80E0      		ldi r24,0
 1122 0552 0E94 0000 		call lcd_setcursor
 1123               	.LVL101:
 897:main.c        ****     lcd_string("by thorsten kattanek");
 1124               		.loc 1 897 0
 1125 0556 80E0      		ldi r24,lo8(.LC27)
 1126 0558 90E0      		ldi r25,hi8(.LC27)
 1127 055a 0E94 0000 		call lcd_string
 1128               	.LVL102:
 1129               	.LBB111:
 1130               	.LBB112:
 1131               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1132               		.loc 2 187 0
 1133 055e 2FEF      		ldi r18,lo8(7199999)
 1134 0560 8CED      		ldi r24,hi8(7199999)
 1135 0562 9DE6      		ldi r25,hlo8(7199999)
 1136 0564 2150      	1:	subi r18,1
 1137 0566 8040      		sbci r24,0
 1138 0568 9040      		sbci r25,0
 1139 056a 01F4      		brne 1b
 1140 056c 00C0      		rjmp .
 1141 056e 0000      		nop
 1142               	.LVL103:
 1143               	.LBE112:
 1144               	.LBE111:
 898:main.c        ****     _delay_ms(START_MESSAGE_TIME);
 899:main.c        ****     lcd_clear();
 1145               		.loc 1 899 0
 1146 0570 0C94 0000 		jmp lcd_clear
 1147               	.LVL104:
 1148               		.cfi_endproc
 1149               	.LFE25:
 1151               		.section	.rodata.str1.1
 1152               	.LC28:
 1153 00cd 4D41 4E55 		.string	"MANUFACT.: %.x"
 1153      4641 4354 
 1153      2E3A 2025 
 1153      2E78 00
 1154               	.LC29:
 1155 00dc 4F45 4D20 		.string	"OEM      : "
 1155      2020 2020 
 1155      203A 2000 
 1156               	.LC30:
 1157 00e8 5052 4F44 		.string	"PRODUCT  : "
 1157      5543 5420 
 1157      203A 2000 
 1158               	.LC31:
 1159 00f4 5349 5A45 		.string	"SIZE     : %d MB"
 1159      2020 2020 
 1159      203A 2025 
 1159      6420 4D42 
 1159      00
 1160               	.LC32:
 1161 0105 5245 5649 		.string	"REVISION : %c.%c"
 1161      5349 4F4E 
 1161      203A 2025 
 1161      632E 2563 
 1161      00
 1162               	.LC33:
 1163 0116 5345 5249 		.string	"SERIALNR.: %4.4X"
 1163      414C 4E52 
 1163      2E3A 2025 
 1163      342E 3458 
 1163      00
 1164               	.LC34:
 1165 0127 2534 2E34 		.string	"%4.4X"
 1165      5800 
 1166               	.LC35:
 1167 012d 5041 5254 		.string	"PARTITION: "
 1167      4954 494F 
 1167      4E3A 2000 
 1168               	.LC36:
 1169 0139 4641 5431 		.string	"FAT12"
 1169      3200 
 1170               	.LC37:
 1171 013f 4641 5431 		.string	"FAT16 MAX 32MB"
 1171      3620 4D41 
 1171      5820 3332 
 1171      4D42 00
 1172               	.LC38:
 1173 014e 4558 5445 		.string	"EXTENDED"
 1173      4E44 4544 
 1173      00
 1174               	.LC39:
 1175 0157 4641 5431 		.string	"FAT16"
 1175      3600 
 1176               	.LC40:
 1177 015d 4641 5433 		.string	"FAT32"
 1177      3200 
 1178               	.LC41:
 1179 0163 4641 5433 		.string	"FAT32 LBA"
 1179      3220 4C42 
 1179      4100 
 1180               	.LC42:
 1181 016d 4641 5431 		.string	"FAT16 LBA"
 1181      3620 4C42 
 1181      4100 
 1182               	.LC43:
 1183 0177 4558 5420 		.string	"EXT LBA"
 1183      4C42 4100 
 1184               	.LC44:
 1185 017f 554E 4B4E 		.string	"UNKNOWN"
 1185      4F57 4E00 
 1186               	.LC45:
 1187 0187 4572 726F 		.string	"Error: Ret Failure"
 1187      723A 2052 
 1187      6574 2046 
 1187      6169 6C75 
 1187      7265 00
 1188               	.LC46:
 1189 019a 7364 5F72 		.string	"sd_raw_get_info"
 1189      6177 5F67 
 1189      6574 5F69 
 1189      6E66 6F00 
 1190               		.text
 1191               	.global	show_sdcard_info_message
 1193               	show_sdcard_info_message:
 1194               	.LFB26:
 900:main.c        **** }
 901:main.c        **** 
 902:main.c        **** /////////////////////////////////////////////////////////////////////
 903:main.c        **** 
 904:main.c        **** void show_sdcard_info_message()
 905:main.c        **** {
 1195               		.loc 1 905 0
 1196               		.cfi_startproc
 1197 0574 EF92      		push r14
 1198               	.LCFI31:
 1199               		.cfi_def_cfa_offset 3
 1200               		.cfi_offset 14, -2
 1201 0576 FF92      		push r15
 1202               	.LCFI32:
 1203               		.cfi_def_cfa_offset 4
 1204               		.cfi_offset 15, -3
 1205 0578 0F93      		push r16
 1206               	.LCFI33:
 1207               		.cfi_def_cfa_offset 5
 1208               		.cfi_offset 16, -4
 1209 057a 1F93      		push r17
 1210               	.LCFI34:
 1211               		.cfi_def_cfa_offset 6
 1212               		.cfi_offset 17, -5
 1213 057c CF93      		push r28
 1214               	.LCFI35:
 1215               		.cfi_def_cfa_offset 7
 1216               		.cfi_offset 28, -6
 1217 057e DF93      		push r29
 1218               	.LCFI36:
 1219               		.cfi_def_cfa_offset 8
 1220               		.cfi_offset 29, -7
 1221 0580 CDB7      		in r28,__SP_L__
 1222 0582 DEB7      		in r29,__SP_H__
 1223               	.LCFI37:
 1224               		.cfi_def_cfa_register 28
 1225 0584 E297      		sbiw r28,50
 1226               	.LCFI38:
 1227               		.cfi_def_cfa_offset 58
 1228 0586 0FB6      		in __tmp_reg__,__SREG__
 1229 0588 F894      		cli
 1230 058a DEBF      		out __SP_H__,r29
 1231 058c 0FBE      		out __SREG__,__tmp_reg__
 1232 058e CDBF      		out __SP_L__,r28
 1233               	/* prologue: function */
 1234               	/* frame size = 50 */
 1235               	/* stack size = 56 */
 1236               	.L__stack_usage = 56
 906:main.c        ****     lcd_clear();
 1237               		.loc 1 906 0
 1238 0590 0E94 0000 		call lcd_clear
 1239               	.LVL105:
 1240 0594 15E0      		ldi r17,lo8(5)
 1241               	.LVL106:
 1242               	.L89:
 907:main.c        **** 
 908:main.c        ****     struct sd_raw_info info;
 909:main.c        **** 
 910:main.c        ****     uint8_t counter = 5;
 911:main.c        ****     uint8_t get_info_ok = 0;
 912:main.c        ****     char out_str[21];
 913:main.c        **** 
 914:main.c        ****     while(counter != 0)
 915:main.c        ****     {
 916:main.c        ****         if(0 != sd_raw_get_info(&info))
 1243               		.loc 1 916 0
 1244 0596 CE01      		movw r24,r28
 1245 0598 0196      		adiw r24,1
 1246 059a 0E94 0000 		call sd_raw_get_info
 1247               	.LVL107:
 1248 059e 8823      		tst r24
 1249 05a0 01F4      		brne .+2
 1250 05a2 00C0      		rjmp .L78
 917:main.c        ****         {
 918:main.c        ****             lcd_setcursor(0,1);
 1251               		.loc 1 918 0
 1252 05a4 61E0      		ldi r22,lo8(1)
 1253 05a6 80E0      		ldi r24,0
 1254 05a8 0E94 0000 		call lcd_setcursor
 1255               	.LVL108:
 919:main.c        ****             sprintf(out_str,"MANUFACT.: %.x",info.manufacturer);
 1256               		.loc 1 919 0
 1257 05ac 8981      		ldd r24,Y+1
 1258 05ae 1F92      		push __zero_reg__
 1259 05b0 8F93      		push r24
 1260 05b2 80E0      		ldi r24,lo8(.LC28)
 1261 05b4 90E0      		ldi r25,hi8(.LC28)
 1262 05b6 9F93      		push r25
 1263 05b8 8F93      		push r24
 1264 05ba 7E01      		movw r14,r28
 1265 05bc 2EE1      		ldi r18,30
 1266 05be E20E      		add r14,r18
 1267 05c0 F11C      		adc r15,__zero_reg__
 1268 05c2 FF92      		push r15
 1269 05c4 EF92      		push r14
 1270 05c6 0E94 0000 		call sprintf
 1271               	.LVL109:
 920:main.c        ****             lcd_string(out_str);
 1272               		.loc 1 920 0
 1273 05ca C701      		movw r24,r14
 1274 05cc 0E94 0000 		call lcd_string
 1275               	.LVL110:
 921:main.c        **** 
 922:main.c        ****             lcd_setcursor(0,2);
 1276               		.loc 1 922 0
 1277 05d0 62E0      		ldi r22,lo8(2)
 1278 05d2 80E0      		ldi r24,0
 1279 05d4 0E94 0000 		call lcd_setcursor
 1280               	.LVL111:
 923:main.c        ****             lcd_string("OEM      : ");
 1281               		.loc 1 923 0
 1282 05d8 80E0      		ldi r24,lo8(.LC29)
 1283 05da 90E0      		ldi r25,hi8(.LC29)
 1284 05dc 0E94 0000 		call lcd_string
 1285               	.LVL112:
 924:main.c        ****             lcd_string(info.oem);
 1286               		.loc 1 924 0
 1287 05e0 CE01      		movw r24,r28
 1288 05e2 0296      		adiw r24,2
 1289 05e4 0E94 0000 		call lcd_string
 1290               	.LVL113:
 925:main.c        **** 
 926:main.c        ****             lcd_setcursor(0,3);
 1291               		.loc 1 926 0
 1292 05e8 63E0      		ldi r22,lo8(3)
 1293 05ea 80E0      		ldi r24,0
 1294 05ec 0E94 0000 		call lcd_setcursor
 1295               	.LVL114:
 927:main.c        ****             lcd_string("PRODUCT  : ");
 1296               		.loc 1 927 0
 1297 05f0 80E0      		ldi r24,lo8(.LC30)
 1298 05f2 90E0      		ldi r25,hi8(.LC30)
 1299 05f4 0E94 0000 		call lcd_string
 1300               	.LVL115:
 928:main.c        ****             lcd_string(info.product);
 1301               		.loc 1 928 0
 1302 05f8 CE01      		movw r24,r28
 1303 05fa 0596      		adiw r24,5
 1304 05fc 0E94 0000 		call lcd_string
 1305               	.LVL116:
 929:main.c        **** 
 930:main.c        ****             lcd_setcursor(0,4);
 1306               		.loc 1 930 0
 1307 0600 64E0      		ldi r22,lo8(4)
 1308 0602 80E0      		ldi r24,0
 1309 0604 0E94 0000 		call lcd_setcursor
 1310               	.LVL117:
 931:main.c        ****             sprintf(out_str,"SIZE     : %d MB", (uint16_t)(info.capacity / 1024 / 1024));
 1311               		.loc 1 931 0
 1312 0608 2A89      		ldd r18,Y+18
 1313 060a 3B89      		ldd r19,Y+19
 1314 060c 4C89      		ldd r20,Y+20
 1315 060e 5D89      		ldd r21,Y+21
 1316 0610 6E89      		ldd r22,Y+22
 1317 0612 7F89      		ldd r23,Y+23
 1318 0614 888D      		ldd r24,Y+24
 1319 0616 998D      		ldd r25,Y+25
 1320 0618 04E1      		ldi r16,lo8(20)
 1321 061a 0E94 0000 		call __lshrdi3
 1322 061e 3F93      		push r19
 1323 0620 2F93      		push r18
 1324 0622 80E0      		ldi r24,lo8(.LC31)
 1325 0624 90E0      		ldi r25,hi8(.LC31)
 1326 0626 9F93      		push r25
 1327 0628 8F93      		push r24
 1328 062a FF92      		push r15
 1329 062c EF92      		push r14
 1330 062e 0E94 0000 		call sprintf
 1331               	.LVL118:
 932:main.c        ****             lcd_string(out_str);
 1332               		.loc 1 932 0
 1333 0632 C701      		movw r24,r14
 1334 0634 0E94 0000 		call lcd_string
 1335               	.LVL119:
 1336               	.LBB113:
 1337               	.LBB114:
 1338               		.loc 2 187 0
 1339 0638 8FEF      		ldi r24,lo8(7199999)
 1340 063a 9CED      		ldi r25,hi8(7199999)
 1341 063c 2DE6      		ldi r18,hlo8(7199999)
 1342 063e 8150      	1:	subi r24,1
 1343 0640 9040      		sbci r25,0
 1344 0642 2040      		sbci r18,0
 1345 0644 01F4      		brne 1b
 1346 0646 00C0      		rjmp .
 1347 0648 0000      		nop
 1348               	.LVL120:
 1349               	.LBE114:
 1350               	.LBE113:
 933:main.c        **** 
 934:main.c        ****             get_info_ok = 1;
 935:main.c        **** 
 936:main.c        ****             break;
 937:main.c        ****         }
 938:main.c        **** 
 939:main.c        ****         release_sd_card();
 940:main.c        ****         init_sd_card();
 941:main.c        **** 
 942:main.c        ****         counter--;
 943:main.c        ****     }
 944:main.c        **** 
 945:main.c        ****     if(!get_info_ok)
 946:main.c        ****     {
 947:main.c        ****         lcd_clear();
 948:main.c        ****         lcd_setcursor(0,2);
 949:main.c        ****         lcd_string("Error: Ret Failure");
 950:main.c        ****         lcd_setcursor(0,3);
 951:main.c        ****         lcd_string("sd_raw_get_info");
 952:main.c        ****         return;
 953:main.c        ****     }
 954:main.c        **** 
 955:main.c        ****     _delay_ms(START_MESSAGE_TIME);
 956:main.c        **** 
 957:main.c        ****     lcd_clear();
 1351               		.loc 1 957 0
 1352 064a 0E94 0000 		call lcd_clear
 1353               	.LVL121:
 958:main.c        **** 
 959:main.c        ****     lcd_setcursor(0,1);
 1354               		.loc 1 959 0
 1355 064e 61E0      		ldi r22,lo8(1)
 1356 0650 80E0      		ldi r24,0
 1357 0652 0E94 0000 		call lcd_setcursor
 1358               	.LVL122:
 960:main.c        ****     sprintf(out_str,"REVISION : %c.%c",(info.revision>>4)+'0', (info.revision&0x0f)+'0');
 1359               		.loc 1 960 0
 1360 0656 8B85      		ldd r24,Y+11
 1361 0658 282F      		mov r18,r24
 1362 065a 2F70      		andi r18,lo8(15)
 1363 065c 30E0      		ldi r19,0
 1364 065e 205D      		subi r18,-48
 1365 0660 3F4F      		sbci r19,-1
 1366 0662 3F93      		push r19
 1367 0664 2F93      		push r18
 1368 0666 8295      		swap r24
 1369 0668 8F70      		andi r24,lo8(15)
 1370 066a 90E0      		ldi r25,0
 1371 066c C096      		adiw r24,48
 1372 066e 9F93      		push r25
 1373 0670 8F93      		push r24
 1374 0672 80E0      		ldi r24,lo8(.LC32)
 1375 0674 90E0      		ldi r25,hi8(.LC32)
 1376 0676 9F93      		push r25
 1377 0678 8F93      		push r24
 1378 067a FF92      		push r15
 1379 067c EF92      		push r14
 1380 067e 0E94 0000 		call sprintf
 1381               	.LVL123:
 961:main.c        ****     lcd_string(out_str);
 1382               		.loc 1 961 0
 1383 0682 C701      		movw r24,r14
 1384 0684 0E94 0000 		call lcd_string
 1385               	.LVL124:
 962:main.c        **** 
 963:main.c        ****     lcd_setcursor(0,2);
 1386               		.loc 1 963 0
 1387 0688 62E0      		ldi r22,lo8(2)
 1388 068a 80E0      		ldi r24,0
 1389 068c 0E94 0000 		call lcd_setcursor
 1390               	.LVL125:
 964:main.c        ****     sprintf(out_str,"SERIALNR.: %4.4X",info.serial>>16);
 1391               		.loc 1 964 0
 1392 0690 8C85      		ldd r24,Y+12
 1393 0692 9D85      		ldd r25,Y+13
 1394 0694 AE85      		ldd r26,Y+14
 1395 0696 BF85      		ldd r27,Y+15
 1396 0698 CD01      		movw r24,r26
 1397 069a AA27      		clr r26
 1398 069c BB27      		clr r27
 1399 069e BF93      		push r27
 1400 06a0 AF93      		push r26
 1401 06a2 9F93      		push r25
 1402 06a4 8F93      		push r24
 1403 06a6 80E0      		ldi r24,lo8(.LC33)
 1404 06a8 90E0      		ldi r25,hi8(.LC33)
 1405 06aa 9F93      		push r25
 1406 06ac 8F93      		push r24
 1407 06ae FF92      		push r15
 1408 06b0 EF92      		push r14
 1409 06b2 0E94 0000 		call sprintf
 1410               	.LVL126:
 965:main.c        ****     lcd_string(out_str);
 1411               		.loc 1 965 0
 1412 06b6 C701      		movw r24,r14
 1413 06b8 0E94 0000 		call lcd_string
 1414               	.LVL127:
 966:main.c        ****     sprintf(out_str,"%4.4X",info.serial&0xffff);
 1415               		.loc 1 966 0
 1416 06bc 8C85      		ldd r24,Y+12
 1417 06be 9D85      		ldd r25,Y+13
 1418 06c0 AE85      		ldd r26,Y+14
 1419 06c2 BF85      		ldd r27,Y+15
 1420 06c4 AA27      		clr r26
 1421 06c6 BB27      		clr r27
 1422 06c8 BF93      		push r27
 1423 06ca AF93      		push r26
 1424 06cc 9F93      		push r25
 1425 06ce 8F93      		push r24
 1426 06d0 80E0      		ldi r24,lo8(.LC34)
 1427 06d2 90E0      		ldi r25,hi8(.LC34)
 1428 06d4 9F93      		push r25
 1429 06d6 8F93      		push r24
 1430 06d8 FF92      		push r15
 1431 06da EF92      		push r14
 1432 06dc 0E94 0000 		call sprintf
 1433               	.LVL128:
 967:main.c        ****     lcd_string(out_str);
 1434               		.loc 1 967 0
 1435 06e0 0FB6      		in __tmp_reg__,__SREG__
 1436 06e2 F894      		cli
 1437 06e4 DEBF      		out __SP_H__,r29
 1438 06e6 0FBE      		out __SREG__,__tmp_reg__
 1439 06e8 CDBF      		out __SP_L__,r28
 1440 06ea C701      		movw r24,r14
 1441 06ec 0E94 0000 		call lcd_string
 1442               	.LVL129:
 968:main.c        **** 
 969:main.c        ****     lcd_setcursor(0,3);
 1443               		.loc 1 969 0
 1444 06f0 63E0      		ldi r22,lo8(3)
 1445 06f2 80E0      		ldi r24,0
 1446 06f4 0E94 0000 		call lcd_setcursor
 1447               	.LVL130:
 970:main.c        ****     lcd_string("PARTITION: ");
 1448               		.loc 1 970 0
 1449 06f8 80E0      		ldi r24,lo8(.LC35)
 1450 06fa 90E0      		ldi r25,hi8(.LC35)
 1451 06fc 0E94 0000 		call lcd_string
 1452               	.LVL131:
 971:main.c        ****     switch(partition->type)
 1453               		.loc 1 971 0
 1454 0700 E091 0000 		lds r30,partition
 1455 0704 F091 0000 		lds r31,partition+1
 1456 0708 E085      		ldd r30,Z+8
 1457 070a 8E2F      		mov r24,r30
 1458 070c 90E0      		ldi r25,0
 1459 070e FC01      		movw r30,r24
 1460 0710 3197      		sbiw r30,1
 1461 0712 EF30      		cpi r30,15
 1462 0714 F105      		cpc r31,__zero_reg__
 1463 0716 00F4      		brsh .L79
 1464 0718 E050      		subi r30,lo8(-(gs(.L81)))
 1465 071a F040      		sbci r31,hi8(-(gs(.L81)))
 1466 071c 0C94 0000 		jmp __tablejump2__
 1467               		.section	.progmem.gcc_sw_table,"a",@progbits
 1468               		.p2align	1
 1469               	.L81:
 1470 0000 0000      		.word gs(.L80)
 1471 0002 0000      		.word gs(.L79)
 1472 0004 0000      		.word gs(.L79)
 1473 0006 0000      		.word gs(.L82)
 1474 0008 0000      		.word gs(.L83)
 1475 000a 0000      		.word gs(.L84)
 1476 000c 0000      		.word gs(.L79)
 1477 000e 0000      		.word gs(.L79)
 1478 0010 0000      		.word gs(.L79)
 1479 0012 0000      		.word gs(.L79)
 1480 0014 0000      		.word gs(.L85)
 1481 0016 0000      		.word gs(.L86)
 1482 0018 0000      		.word gs(.L79)
 1483 001a 0000      		.word gs(.L87)
 1484 001c 0000      		.word gs(.L88)
 1485               		.text
 1486               	.LVL132:
 1487               	.L78:
 939:main.c        ****         init_sd_card();
 1488               		.loc 1 939 0
 1489 0720 0E94 0000 		call release_sd_card
 1490               	.LVL133:
 940:main.c        **** 
 1491               		.loc 1 940 0
 1492 0724 0E94 0000 		call init_sd_card
 1493               	.LVL134:
 1494 0728 1150      		subi r17,lo8(-(-1))
 1495               	.LVL135:
 914:main.c        ****     {
 1496               		.loc 1 914 0
 1497 072a 01F0      		breq .+2
 1498 072c 00C0      		rjmp .L89
 947:main.c        ****         lcd_setcursor(0,2);
 1499               		.loc 1 947 0
 1500 072e 0E94 0000 		call lcd_clear
 1501               	.LVL136:
 948:main.c        ****         lcd_string("Error: Ret Failure");
 1502               		.loc 1 948 0
 1503 0732 62E0      		ldi r22,lo8(2)
 1504 0734 80E0      		ldi r24,0
 1505 0736 0E94 0000 		call lcd_setcursor
 1506               	.LVL137:
 949:main.c        ****         lcd_setcursor(0,3);
 1507               		.loc 1 949 0
 1508 073a 80E0      		ldi r24,lo8(.LC45)
 1509 073c 90E0      		ldi r25,hi8(.LC45)
 1510 073e 0E94 0000 		call lcd_string
 1511               	.LVL138:
 950:main.c        ****         lcd_string("sd_raw_get_info");
 1512               		.loc 1 950 0
 1513 0742 63E0      		ldi r22,lo8(3)
 1514 0744 80E0      		ldi r24,0
 1515 0746 0E94 0000 		call lcd_setcursor
 1516               	.LVL139:
 951:main.c        ****         return;
 1517               		.loc 1 951 0
 1518 074a 80E0      		ldi r24,lo8(.LC46)
 1519 074c 90E0      		ldi r25,hi8(.LC46)
 1520 074e 0E94 0000 		call lcd_string
 1521               	.LVL140:
 1522 0752 00C0      		rjmp .L77
 1523               	.LVL141:
 1524               	.L80:
 972:main.c        ****     {
 973:main.c        ****     case 0x01:
 974:main.c        ****         lcd_string("FAT12");
 1525               		.loc 1 974 0
 1526 0754 80E0      		ldi r24,lo8(.LC36)
 1527 0756 90E0      		ldi r25,hi8(.LC36)
 1528 0758 00C0      		rjmp .L95
 1529               	.L82:
 975:main.c        ****         break;
 976:main.c        **** 
 977:main.c        ****     case 0x04:
 978:main.c        ****         lcd_string("FAT16 MAX 32MB");
 1530               		.loc 1 978 0
 1531 075a 80E0      		ldi r24,lo8(.LC37)
 1532 075c 90E0      		ldi r25,hi8(.LC37)
 1533 075e 00C0      		rjmp .L95
 1534               	.L83:
 979:main.c        ****         break;
 980:main.c        **** 
 981:main.c        ****     case 0x05:
 982:main.c        ****         lcd_string("EXTENDED");
 1535               		.loc 1 982 0
 1536 0760 80E0      		ldi r24,lo8(.LC38)
 1537 0762 90E0      		ldi r25,hi8(.LC38)
 1538 0764 00C0      		rjmp .L95
 1539               	.L84:
 983:main.c        ****         break;
 984:main.c        **** 
 985:main.c        ****     case 0x06:
 986:main.c        ****         lcd_string("FAT16");
 1540               		.loc 1 986 0
 1541 0766 80E0      		ldi r24,lo8(.LC39)
 1542 0768 90E0      		ldi r25,hi8(.LC39)
 1543 076a 00C0      		rjmp .L95
 1544               	.L85:
 987:main.c        ****         break;
 988:main.c        **** 
 989:main.c        ****     case 0x0b:
 990:main.c        ****         lcd_string("FAT32");
 1545               		.loc 1 990 0
 1546 076c 80E0      		ldi r24,lo8(.LC40)
 1547 076e 90E0      		ldi r25,hi8(.LC40)
 1548 0770 00C0      		rjmp .L95
 1549               	.L86:
 991:main.c        ****         break;
 992:main.c        **** 
 993:main.c        ****     case 0x0c:
 994:main.c        ****         lcd_string("FAT32 LBA");
 1550               		.loc 1 994 0
 1551 0772 80E0      		ldi r24,lo8(.LC41)
 1552 0774 90E0      		ldi r25,hi8(.LC41)
 1553 0776 00C0      		rjmp .L95
 1554               	.L87:
 995:main.c        ****         break;
 996:main.c        **** 
 997:main.c        ****     case 0x0e:
 998:main.c        ****         lcd_string("FAT16 LBA");
 1555               		.loc 1 998 0
 1556 0778 80E0      		ldi r24,lo8(.LC42)
 1557 077a 90E0      		ldi r25,hi8(.LC42)
 1558 077c 00C0      		rjmp .L95
 1559               	.L88:
 999:main.c        ****         break;
1000:main.c        **** 
1001:main.c        ****     case 0x0f:
1002:main.c        ****         lcd_string("EXT LBA");
 1560               		.loc 1 1002 0
 1561 077e 80E0      		ldi r24,lo8(.LC43)
 1562 0780 90E0      		ldi r25,hi8(.LC43)
 1563 0782 00C0      		rjmp .L95
 1564               	.L79:
1003:main.c        ****         break;
1004:main.c        **** 
1005:main.c        ****     default:
1006:main.c        ****         lcd_string("UNKNOWN");
 1565               		.loc 1 1006 0
 1566 0784 80E0      		ldi r24,lo8(.LC44)
 1567 0786 90E0      		ldi r25,hi8(.LC44)
 1568               	.L95:
 1569 0788 0E94 0000 		call lcd_string
 1570               	.LVL142:
 1571               	.LBB115:
 1572               	.LBB116:
 1573               		.loc 2 187 0
 1574 078c 9FEF      		ldi r25,lo8(7199999)
 1575 078e 2CED      		ldi r18,hi8(7199999)
 1576 0790 8DE6      		ldi r24,hlo8(7199999)
 1577 0792 9150      	1:	subi r25,1
 1578 0794 2040      		sbci r18,0
 1579 0796 8040      		sbci r24,0
 1580 0798 01F4      		brne 1b
 1581 079a 00C0      		rjmp .
 1582 079c 0000      		nop
 1583               	.LVL143:
 1584               	.L77:
 1585               	/* epilogue start */
 1586               	.LBE116:
 1587               	.LBE115:
1007:main.c        ****         break;
1008:main.c        ****     }
1009:main.c        ****     _delay_ms(START_MESSAGE_TIME);
1010:main.c        **** }
 1588               		.loc 1 1010 0
 1589 079e E296      		adiw r28,50
 1590 07a0 0FB6      		in __tmp_reg__,__SREG__
 1591 07a2 F894      		cli
 1592 07a4 DEBF      		out __SP_H__,r29
 1593 07a6 0FBE      		out __SREG__,__tmp_reg__
 1594 07a8 CDBF      		out __SP_L__,r28
 1595 07aa DF91      		pop r29
 1596 07ac CF91      		pop r28
 1597 07ae 1F91      		pop r17
 1598 07b0 0F91      		pop r16
 1599 07b2 FF90      		pop r15
 1600 07b4 EF90      		pop r14
 1601 07b6 0895      		ret
 1602               		.cfi_endproc
 1603               	.LFE26:
 1605               	.global	init_stepper
 1607               	init_stepper:
 1608               	.LFB27:
1011:main.c        **** 
1012:main.c        **** /////////////////////////////////////////////////////////////////////
1013:main.c        **** 
1014:main.c        **** void init_stepper(void)
1015:main.c        **** {
 1609               		.loc 1 1015 0
 1610               		.cfi_startproc
 1611               	/* prologue: function */
 1612               	/* frame size = 0 */
 1613               	/* stack size = 0 */
 1614               	.L__stack_usage = 0
1016:main.c        ****     // Stepper PINs als Eingang schalten
1017:main.c        ****     STP_DDR &= ~(1<<STP0 | 1<<STP1);
 1615               		.loc 1 1017 0
 1616 07b8 81B1      		in r24,0x1
 1617 07ba 8F73      		andi r24,lo8(63)
 1618 07bc 81B9      		out 0x1,r24
1018:main.c        ****     akt_half_track = INIT_TRACK << 1;
 1619               		.loc 1 1018 0
 1620 07be 84E2      		ldi r24,lo8(36)
 1621 07c0 8093 0000 		sts akt_half_track,r24
1019:main.c        **** 
1020:main.c        ****     // Pin Change Ineterrupt für beide PIN's aktivieren
1021:main.c        ****     PCICR = 0x01;   // Enable PCINT0..7
 1622               		.loc 1 1021 0
 1623 07c4 81E0      		ldi r24,lo8(1)
 1624 07c6 8093 6800 		sts 104,r24
1022:main.c        ****     PCMSK0 = 0xc0;  // Set Mask Register für PCINT6 und PCINT7
 1625               		.loc 1 1022 0
 1626 07ca 80EC      		ldi r24,lo8(-64)
 1627 07cc 8093 6B00 		sts 107,r24
 1628 07d0 0895      		ret
 1629               		.cfi_endproc
 1630               	.LFE27:
 1632               	.global	stepper_inc
 1634               	stepper_inc:
 1635               	.LFB28:
1023:main.c        **** }
1024:main.c        **** 
1025:main.c        **** /////////////////////////////////////////////////////////////////////
1026:main.c        **** 
1027:main.c        **** void stepper_inc(void)
1028:main.c        **** {            
 1636               		.loc 1 1028 0
 1637               		.cfi_startproc
 1638               	/* prologue: function */
 1639               	/* frame size = 0 */
 1640               	/* stack size = 0 */
 1641               	.L__stack_usage = 0
1029:main.c        ****     if(akt_half_track == 83) return;
 1642               		.loc 1 1029 0
 1643 07d2 8091 0000 		lds r24,akt_half_track
 1644 07d6 8335      		cpi r24,lo8(83)
 1645 07d8 01F0      		breq .L97
1030:main.c        ****     akt_half_track++;
 1646               		.loc 1 1030 0
 1647 07da 8F5F      		subi r24,lo8(-(1))
 1648 07dc 8093 0000 		sts akt_half_track,r24
 1649               	.L97:
 1650 07e0 0895      		ret
 1651               		.cfi_endproc
 1652               	.LFE28:
 1654               	.global	stepper_dec
 1656               	stepper_dec:
 1657               	.LFB29:
1031:main.c        **** }
1032:main.c        **** 
1033:main.c        **** /////////////////////////////////////////////////////////////////////
1034:main.c        **** 
1035:main.c        **** void stepper_dec(void)
1036:main.c        **** {
 1658               		.loc 1 1036 0
 1659               		.cfi_startproc
 1660               	/* prologue: function */
 1661               	/* frame size = 0 */
 1662               	/* stack size = 0 */
 1663               	.L__stack_usage = 0
1037:main.c        ****     if(akt_half_track == 2) return;
 1664               		.loc 1 1037 0
 1665 07e2 8091 0000 		lds r24,akt_half_track
 1666 07e6 8230      		cpi r24,lo8(2)
 1667 07e8 01F0      		breq .L102
1038:main.c        ****     akt_half_track--;
 1668               		.loc 1 1038 0
 1669 07ea 8150      		subi r24,lo8(-(-1))
 1670 07ec 8093 0000 		sts akt_half_track,r24
 1671               	.L102:
 1672 07f0 0895      		ret
 1673               		.cfi_endproc
 1674               	.LFE29:
 1676               	.global	init_motor
 1678               	init_motor:
 1679               	.LFB30:
1039:main.c        **** }
1040:main.c        **** 
1041:main.c        **** /////////////////////////////////////////////////////////////////////
1042:main.c        **** 
1043:main.c        **** void init_motor()
1044:main.c        **** {
 1680               		.loc 1 1044 0
 1681               		.cfi_startproc
 1682               	/* prologue: function */
 1683               	/* frame size = 0 */
 1684               	/* stack size = 0 */
 1685               	.L__stack_usage = 0
1045:main.c        ****     // Als Eingang schalten
1046:main.c        ****     MTR_DDR &= ~(1<<MTR);
 1686               		.loc 1 1046 0
 1687 07f2 3A98      		cbi 0x7,2
 1688 07f4 0895      		ret
 1689               		.cfi_endproc
 1690               	.LFE30:
 1692               	.global	init_controll_signals
 1694               	init_controll_signals:
 1695               	.LFB31:
1047:main.c        **** }
1048:main.c        **** 
1049:main.c        **** /////////////////////////////////////////////////////////////////////
1050:main.c        **** 
1051:main.c        **** void init_controll_signals(void)
1052:main.c        **** {
 1696               		.loc 1 1052 0
 1697               		.cfi_startproc
 1698               	/* prologue: function */
 1699               	/* frame size = 0 */
 1700               	/* stack size = 0 */
 1701               	.L__stack_usage = 0
1053:main.c        ****     // Als Ausgang schalten
1054:main.c        ****     //DDxn = 0 , PORTxn = 0 --> HiZ
1055:main.c        ****     //DDxn = 1 , PORTxn = 0 --> Output Low (Sink)
1056:main.c        ****     BYTE_READY_DDR &= ~(1<<BYTE_READY);             // Byte Ready auf HiZ
 1702               		.loc 1 1056 0
 1703 07f6 3898      		cbi 0x7,0
1057:main.c        ****     BYTE_READY_PORT &= ~(1<<BYTE_READY);
 1704               		.loc 1 1057 0
 1705 07f8 4098      		cbi 0x8,0
1058:main.c        **** 
1059:main.c        ****     SYNC_DDR |= 1<<SYNC;
 1706               		.loc 1 1059 0
 1707 07fa 399A      		sbi 0x7,1
1060:main.c        **** 
1061:main.c        ****     // Als Eingang schalten
1062:main.c        ****     DATA_DDR = 0x00;
 1708               		.loc 1 1062 0
 1709 07fc 1AB8      		out 0xa,__zero_reg__
1063:main.c        ****     SOE_DDR &= ~(1<<SOE);
 1710               		.loc 1 1063 0
 1711 07fe 3E98      		cbi 0x7,6
1064:main.c        ****     SO_DDR &= ~(1<<SO);
 1712               		.loc 1 1064 0
 1713 0800 3D98      		cbi 0x7,5
 1714 0802 0895      		ret
 1715               		.cfi_endproc
 1716               	.LFE31:
 1718               	.global	start_timer0
 1720               	start_timer0:
 1721               	.LFB33:
1065:main.c        **** }
1066:main.c        **** 
1067:main.c        **** /////////////////////////////////////////////////////////////////////
1068:main.c        **** 
1069:main.c        **** void init_timer0(void)
1070:main.c        **** {
1071:main.c        ****     TCCR0A = (1<<WGM01);    // CTC Modus
1072:main.c        ****     TCCR0B |= (1<<CS01);    // Prescaler 8
1073:main.c        **** 
1074:main.c        ****     OCR0A = timer0_orca0[d64_track_zone[akt_half_track>>1]];
1075:main.c        ****     start_timer0();
1076:main.c        **** }
1077:main.c        **** 
1078:main.c        **** /////////////////////////////////////////////////////////////////////
1079:main.c        **** 
1080:main.c        **** void start_timer0(void)
1081:main.c        **** {
 1722               		.loc 1 1081 0
 1723               		.cfi_startproc
 1724               	/* prologue: function */
 1725               	/* frame size = 0 */
 1726               	/* stack size = 0 */
 1727               	.L__stack_usage = 0
1082:main.c        ****     // Compare Interrupt erlauben
1083:main.c        ****     TIMSK0 |= (1<<OCIE0A);
 1728               		.loc 1 1083 0
 1729 0804 EEE6      		ldi r30,lo8(110)
 1730 0806 F0E0      		ldi r31,0
 1731 0808 8081      		ld r24,Z
 1732 080a 8260      		ori r24,lo8(2)
 1733 080c 8083      		st Z,r24
 1734 080e 0895      		ret
 1735               		.cfi_endproc
 1736               	.LFE33:
 1738               	.global	init_timer0
 1740               	init_timer0:
 1741               	.LFB32:
1070:main.c        ****     TCCR0A = (1<<WGM01);    // CTC Modus
 1742               		.loc 1 1070 0
 1743               		.cfi_startproc
 1744               	/* prologue: function */
 1745               	/* frame size = 0 */
 1746               	/* stack size = 0 */
 1747               	.L__stack_usage = 0
1071:main.c        ****     TCCR0B |= (1<<CS01);    // Prescaler 8
 1748               		.loc 1 1071 0
 1749 0810 82E0      		ldi r24,lo8(2)
 1750 0812 84BD      		out 0x24,r24
1072:main.c        **** 
 1751               		.loc 1 1072 0
 1752 0814 85B5      		in r24,0x25
 1753 0816 8260      		ori r24,lo8(2)
 1754 0818 85BD      		out 0x25,r24
1074:main.c        ****     start_timer0();
 1755               		.loc 1 1074 0
 1756 081a E091 0000 		lds r30,akt_half_track
 1757 081e E695      		lsr r30
 1758 0820 F0E0      		ldi r31,0
 1759 0822 E050      		subi r30,lo8(-(d64_track_zone))
 1760 0824 F040      		sbci r31,hi8(-(d64_track_zone))
 1761 0826 E081      		ld r30,Z
 1762 0828 F0E0      		ldi r31,0
 1763 082a E050      		subi r30,lo8(-(timer0_orca0))
 1764 082c F040      		sbci r31,hi8(-(timer0_orca0))
 1765 082e 8081      		ld r24,Z
 1766 0830 87BD      		out 0x27,r24
1075:main.c        **** }
 1767               		.loc 1 1075 0
 1768 0832 0C94 0000 		jmp start_timer0
 1769               	.LVL144:
 1770               		.cfi_endproc
 1771               	.LFE32:
 1773               	.global	stop_timer0
 1775               	stop_timer0:
 1776               	.LFB34:
1084:main.c        **** }
1085:main.c        **** 
1086:main.c        **** /////////////////////////////////////////////////////////////////////
1087:main.c        **** 
1088:main.c        **** void stop_timer0(void)
1089:main.c        **** {
 1777               		.loc 1 1089 0
 1778               		.cfi_startproc
 1779               	/* prologue: function */
 1780               	/* frame size = 0 */
 1781               	/* stack size = 0 */
 1782               	.L__stack_usage = 0
1090:main.c        ****     // Compare Interrupt verhindern
1091:main.c        ****     TIMSK0 &= ~(1<<OCIE0A);
 1783               		.loc 1 1091 0
 1784 0836 EEE6      		ldi r30,lo8(110)
 1785 0838 F0E0      		ldi r31,0
 1786 083a 8081      		ld r24,Z
 1787 083c 8D7F      		andi r24,lo8(-3)
 1788 083e 8083      		st Z,r24
 1789 0840 0895      		ret
 1790               		.cfi_endproc
 1791               	.LFE34:
 1793               	.global	start_timer2
 1795               	start_timer2:
 1796               	.LFB36:
1092:main.c        **** }
1093:main.c        **** 
1094:main.c        **** /////////////////////////////////////////////////////////////////////
1095:main.c        **** 
1096:main.c        **** void init_timer2(void)
1097:main.c        **** {
1098:main.c        ****     TCCR2A = (1<<WGM21);    // CTC Modus
1099:main.c        ****   //  TCCR2B |= (1<<CS20) | (1<<CS21) | (1<<CS22);    // Prescaler 1024
1100:main.c        **** 
1101:main.c        ****     TCCR2B |= (1<<CS21) | (1<<CS22); // Prescaler 256
1102:main.c        **** 
1103:main.c        ****     // alle 2 ms aufrufen --> 500Hz
1104:main.c        ****     // ((24000000/256)/500) = 187,5
1105:main.c        **** 
1106:main.c        ****     OCR2A = 188-1;
1107:main.c        **** 
1108:main.c        ****     start_timer2();
1109:main.c        **** }
1110:main.c        **** /////////////////////////////////////////////////////////////////////
1111:main.c        **** 
1112:main.c        **** void start_timer2(void)
1113:main.c        **** {
 1797               		.loc 1 1113 0
 1798               		.cfi_startproc
 1799               	/* prologue: function */
 1800               	/* frame size = 0 */
 1801               	/* stack size = 0 */
 1802               	.L__stack_usage = 0
1114:main.c        ****     // Compare Interrupt erlauben
1115:main.c        ****     TIMSK2 |= (1<<OCIE2A);
 1803               		.loc 1 1115 0
 1804 0842 E0E7      		ldi r30,lo8(112)
 1805 0844 F0E0      		ldi r31,0
 1806 0846 8081      		ld r24,Z
 1807 0848 8260      		ori r24,lo8(2)
 1808 084a 8083      		st Z,r24
 1809 084c 0895      		ret
 1810               		.cfi_endproc
 1811               	.LFE36:
 1813               	.global	init_timer2
 1815               	init_timer2:
 1816               	.LFB35:
1097:main.c        ****     TCCR2A = (1<<WGM21);    // CTC Modus
 1817               		.loc 1 1097 0
 1818               		.cfi_startproc
 1819               	/* prologue: function */
 1820               	/* frame size = 0 */
 1821               	/* stack size = 0 */
 1822               	.L__stack_usage = 0
1098:main.c        ****   //  TCCR2B |= (1<<CS20) | (1<<CS21) | (1<<CS22);    // Prescaler 1024
 1823               		.loc 1 1098 0
 1824 084e 82E0      		ldi r24,lo8(2)
 1825 0850 8093 B000 		sts 176,r24
1101:main.c        **** 
 1826               		.loc 1 1101 0
 1827 0854 E1EB      		ldi r30,lo8(-79)
 1828 0856 F0E0      		ldi r31,0
 1829 0858 8081      		ld r24,Z
 1830 085a 8660      		ori r24,lo8(6)
 1831 085c 8083      		st Z,r24
1106:main.c        **** 
 1832               		.loc 1 1106 0
 1833 085e 8BEB      		ldi r24,lo8(-69)
 1834 0860 8093 B300 		sts 179,r24
1108:main.c        **** }
 1835               		.loc 1 1108 0
 1836 0864 0C94 0000 		jmp start_timer2
 1837               	.LVL145:
 1838               		.cfi_endproc
 1839               	.LFE35:
 1841               	.global	stop_timer2
 1843               	stop_timer2:
 1844               	.LFB37:
1116:main.c        **** }
1117:main.c        **** 
1118:main.c        **** /////////////////////////////////////////////////////////////////////
1119:main.c        **** 
1120:main.c        **** void stop_timer2(void)
1121:main.c        **** {
 1845               		.loc 1 1121 0
 1846               		.cfi_startproc
 1847               	/* prologue: function */
 1848               	/* frame size = 0 */
 1849               	/* stack size = 0 */
 1850               	.L__stack_usage = 0
1122:main.c        ****     // Compare Interrupt verhindern
1123:main.c        ****     TIMSK2 &= ~(1<<OCIE2A);
 1851               		.loc 1 1123 0
 1852 0868 E0E7      		ldi r30,lo8(112)
 1853 086a F0E0      		ldi r31,0
 1854 086c 8081      		ld r24,Z
 1855 086e 8D7F      		andi r24,lo8(-3)
 1856 0870 8083      		st Z,r24
 1857 0872 0895      		ret
 1858               		.cfi_endproc
 1859               	.LFE37:
 1861               	.global	init_keys
 1863               	init_keys:
 1864               	.LFB38:
1124:main.c        **** }
1125:main.c        **** 
1126:main.c        **** /////////////////////////////////////////////////////////////////////
1127:main.c        **** 
1128:main.c        **** void init_keys(void)
1129:main.c        **** {
 1865               		.loc 1 1129 0
 1866               		.cfi_startproc
 1867               	/* prologue: function */
 1868               	/* frame size = 0 */
 1869               	/* stack size = 0 */
 1870               	.L__stack_usage = 0
1130:main.c        ****     // Entsprechende Ports auf Eingangschalten
1131:main.c        ****     KEY0_DDR &= ~(1<<KEY0);
 1871               		.loc 1 1131 0
 1872 0874 2098      		cbi 0x4,0
1132:main.c        ****     KEY1_DDR &= ~(1<<KEY1);
 1873               		.loc 1 1132 0
 1874 0876 2198      		cbi 0x4,1
1133:main.c        ****     KEY2_DDR &= ~(1<<KEY2);
 1875               		.loc 1 1133 0
 1876 0878 3B98      		cbi 0x7,3
1134:main.c        **** 
1135:main.c        ****     // Interne Pullup Setzen
1136:main.c        ****     KEY0_PORT |= 1<<KEY0;
 1877               		.loc 1 1136 0
 1878 087a 289A      		sbi 0x5,0
1137:main.c        ****     KEY1_PORT |= 1<<KEY1;
 1879               		.loc 1 1137 0
 1880 087c 299A      		sbi 0x5,1
1138:main.c        ****     KEY2_PORT |= 1<<KEY2;
 1881               		.loc 1 1138 0
 1882 087e 439A      		sbi 0x8,3
 1883 0880 0895      		ret
 1884               		.cfi_endproc
 1885               	.LFE38:
 1887               	.global	soe_gatearry_hi
 1889               	soe_gatearry_hi:
 1890               	.LFB40:
1139:main.c        **** }
1140:main.c        **** 
1141:main.c        **** /////////////////////////////////////////////////////////////////////
1142:main.c        **** 
1143:main.c        **** void soe_gatearry_init(void)
1144:main.c        **** {
1145:main.c        ****     //DDxn = 1 , PORTxn = 0 --> Lo
1146:main.c        ****     //DDxn = 1 , PORTxn = 1 --> Hi
1147:main.c        **** 
1148:main.c        ****     SOE_GATEARRAY_DDR |= 1<<SOE_GATEARRAY;
1149:main.c        ****     soe_gatearry_lo();
1150:main.c        **** }
1151:main.c        **** 
1152:main.c        **** /////////////////////////////////////////////////////////////////////
1153:main.c        **** 
1154:main.c        **** void soe_gatearry_hi(void)
1155:main.c        **** {
 1891               		.loc 1 1155 0
 1892               		.cfi_startproc
 1893               	/* prologue: function */
 1894               	/* frame size = 0 */
 1895               	/* stack size = 0 */
 1896               	.L__stack_usage = 0
1156:main.c        ****     SOE_GATEARRAY_PORT |= 1<<SOE_GATEARRAY;
 1897               		.loc 1 1156 0
 1898 0882 479A      		sbi 0x8,7
 1899 0884 0895      		ret
 1900               		.cfi_endproc
 1901               	.LFE40:
 1903               	.global	soe_gatearry_lo
 1905               	soe_gatearry_lo:
 1906               	.LFB41:
1157:main.c        **** }
1158:main.c        **** 
1159:main.c        **** /////////////////////////////////////////////////////////////////////
1160:main.c        **** 
1161:main.c        **** void soe_gatearry_lo(void)
1162:main.c        **** {
 1907               		.loc 1 1162 0
 1908               		.cfi_startproc
 1909               	/* prologue: function */
 1910               	/* frame size = 0 */
 1911               	/* stack size = 0 */
 1912               	.L__stack_usage = 0
1163:main.c        ****     SOE_GATEARRAY_PORT &= ~(1<<SOE_GATEARRAY);
 1913               		.loc 1 1163 0
 1914 0886 4798      		cbi 0x8,7
 1915 0888 0895      		ret
 1916               		.cfi_endproc
 1917               	.LFE41:
 1919               	.global	soe_gatearry_init
 1921               	soe_gatearry_init:
 1922               	.LFB39:
1144:main.c        ****     //DDxn = 1 , PORTxn = 0 --> Lo
 1923               		.loc 1 1144 0
 1924               		.cfi_startproc
 1925               	/* prologue: function */
 1926               	/* frame size = 0 */
 1927               	/* stack size = 0 */
 1928               	.L__stack_usage = 0
1148:main.c        ****     soe_gatearry_lo();
 1929               		.loc 1 1148 0
 1930 088a 3F9A      		sbi 0x7,7
1149:main.c        **** }
 1931               		.loc 1 1149 0
 1932 088c 0C94 0000 		jmp soe_gatearry_lo
 1933               	.LVL146:
 1934               		.cfi_endproc
 1935               	.LFE39:
 1937               	.global	close_disk_image
 1939               	close_disk_image:
 1940               	.LFB43:
1164:main.c        **** }
1165:main.c        **** 
1166:main.c        **** /////////////////////////////////////////////////////////////////////
1167:main.c        **** 
1168:main.c        **** struct fat_file_struct* open_disk_image(struct fat_fs_struct* fs ,struct fat_dir_entry_struct* file
1169:main.c        **** {
1170:main.c        ****     if(strlen(file_entry->long_name) < 4) return NULL;
1171:main.c        **** 
1172:main.c        ****     struct fat_file_struct* fd = NULL;
1173:main.c        ****     char extension[5];
1174:main.c        ****     int i;
1175:main.c        **** 
1176:main.c        ****     // Extension überprüfen --> g64 oder d64
1177:main.c        ****     strcpy(extension, file_entry->long_name+(strlen(file_entry->long_name)-4));
1178:main.c        **** 
1179:main.c        ****     i=0;
1180:main.c        ****     while(extension[i] != 0)
1181:main.c        ****     {
1182:main.c        ****         extension[i] = tolower(extension[i]);
1183:main.c        ****         i++;
1184:main.c        ****     }
1185:main.c        **** 
1186:main.c        ****     fd = fat_open_file(fs, file_entry);
1187:main.c        ****     if(!fd)
1188:main.c        ****     {
1189:main.c        ****         *image_type = UNDEF_IMAGE;
1190:main.c        ****         return fd;
1191:main.c        ****     }
1192:main.c        **** 
1193:main.c        ****     if(!strcmp(extension,".g64"))
1194:main.c        ****     {
1195:main.c        ****         // Laut Extension ein G64
1196:main.c        ****         *image_type = G64_IMAGE;
1197:main.c        ****         open_g64_image(fd);
1198:main.c        ****         set_write_protection(1);
1199:main.c        ****     }
1200:main.c        ****     else if(!strcmp(extension,".d64"))
1201:main.c        ****     {
1202:main.c        ****         // Laut Extensions ein D64
1203:main.c        ****         *image_type = D64_IMAGE;
1204:main.c        ****         open_d64_image(fd);
1205:main.c        ****         set_write_protection(1);
1206:main.c        ****     }
1207:main.c        ****     else
1208:main.c        ****     {
1209:main.c        ****         // Nicht unterstützt
1210:main.c        ****         fat_close_file(fd);
1211:main.c        ****         fd = NULL;
1212:main.c        ****         *image_type = UNDEF_IMAGE;
1213:main.c        ****     }
1214:main.c        **** 
1215:main.c        ****     return fd;
1216:main.c        **** }
1217:main.c        **** 
1218:main.c        **** /////////////////////////////////////////////////////////////////////
1219:main.c        **** 
1220:main.c        **** void close_disk_image(struct fat_file_struct* fd)
1221:main.c        **** {
 1941               		.loc 1 1221 0
 1942               		.cfi_startproc
 1943               	.LVL147:
 1944               	/* prologue: function */
 1945               	/* frame size = 0 */
 1946               	/* stack size = 0 */
 1947               	.L__stack_usage = 0
1222:main.c        ****     fat_close_file(fd);
 1948               		.loc 1 1222 0
 1949 0890 0C94 0000 		jmp fat_close_file
 1950               	.LVL148:
 1951               		.cfi_endproc
 1952               	.LFE43:
 1954               	.global	open_g64_image
 1956               	open_g64_image:
 1957               	.LFB68:
 1958               		.cfi_startproc
 1959               	/* prologue: function */
 1960               	/* frame size = 0 */
 1961               	/* stack size = 0 */
 1962               	.L__stack_usage = 0
 1963 0894 80E0      		ldi r24,0
 1964 0896 0895      		ret
 1965               		.cfi_endproc
 1966               	.LFE68:
 1968               	.global	open_d64_image
 1970               	open_d64_image:
 1971               	.LFB45:
1223:main.c        ****     fd = NULL;
1224:main.c        **** }
1225:main.c        **** 
1226:main.c        **** /////////////////////////////////////////////////////////////////////
1227:main.c        **** 
1228:main.c        **** int8_t open_g64_image(struct fat_file_struct* fd)
1229:main.c        **** {
1230:main.c        ****     return 0;
1231:main.c        **** }
1232:main.c        **** 
1233:main.c        **** /////////////////////////////////////////////////////////////////////
1234:main.c        **** 
1235:main.c        **** int8_t open_d64_image(struct fat_file_struct* fd)
1236:main.c        **** {
 1972               		.loc 1 1236 0
 1973               		.cfi_startproc
 1974               	.LVL149:
 1975               	/* prologue: function */
 1976               	/* frame size = 0 */
 1977               	/* stack size = 0 */
 1978               	.L__stack_usage = 0
1237:main.c        ****     return 0;
1238:main.c        **** }
 1979               		.loc 1 1238 0
 1980 0898 80E0      		ldi r24,0
 1981               	.LVL150:
 1982 089a 0895      		ret
 1983               		.cfi_endproc
 1984               	.LFE45:
 1986               	.global	read_disk_track
 1988               	read_disk_track:
 1989               	.LFB46:
1239:main.c        **** 
1240:main.c        **** /////////////////////////////////////////////////////////////////////
1241:main.c        **** 
1242:main.c        **** int8_t read_disk_track(struct fat_file_struct* fd, uint8_t image_type, uint8_t track_nr, uint8_t* t
1243:main.c        **** {
 1990               		.loc 1 1243 0
 1991               		.cfi_startproc
 1992               	.LVL151:
 1993 089c 2F92      		push r2
 1994               	.LCFI39:
 1995               		.cfi_def_cfa_offset 3
 1996               		.cfi_offset 2, -2
 1997 089e 3F92      		push r3
 1998               	.LCFI40:
 1999               		.cfi_def_cfa_offset 4
 2000               		.cfi_offset 3, -3
 2001 08a0 4F92      		push r4
 2002               	.LCFI41:
 2003               		.cfi_def_cfa_offset 5
 2004               		.cfi_offset 4, -4
 2005 08a2 5F92      		push r5
 2006               	.LCFI42:
 2007               		.cfi_def_cfa_offset 6
 2008               		.cfi_offset 5, -5
 2009 08a4 6F92      		push r6
 2010               	.LCFI43:
 2011               		.cfi_def_cfa_offset 7
 2012               		.cfi_offset 6, -6
 2013 08a6 7F92      		push r7
 2014               	.LCFI44:
 2015               		.cfi_def_cfa_offset 8
 2016               		.cfi_offset 7, -7
 2017 08a8 8F92      		push r8
 2018               	.LCFI45:
 2019               		.cfi_def_cfa_offset 9
 2020               		.cfi_offset 8, -8
 2021 08aa 9F92      		push r9
 2022               	.LCFI46:
 2023               		.cfi_def_cfa_offset 10
 2024               		.cfi_offset 9, -9
 2025 08ac AF92      		push r10
 2026               	.LCFI47:
 2027               		.cfi_def_cfa_offset 11
 2028               		.cfi_offset 10, -10
 2029 08ae BF92      		push r11
 2030               	.LCFI48:
 2031               		.cfi_def_cfa_offset 12
 2032               		.cfi_offset 11, -11
 2033 08b0 CF92      		push r12
 2034               	.LCFI49:
 2035               		.cfi_def_cfa_offset 13
 2036               		.cfi_offset 12, -12
 2037 08b2 DF92      		push r13
 2038               	.LCFI50:
 2039               		.cfi_def_cfa_offset 14
 2040               		.cfi_offset 13, -13
 2041 08b4 EF92      		push r14
 2042               	.LCFI51:
 2043               		.cfi_def_cfa_offset 15
 2044               		.cfi_offset 14, -14
 2045 08b6 FF92      		push r15
 2046               	.LCFI52:
 2047               		.cfi_def_cfa_offset 16
 2048               		.cfi_offset 15, -15
 2049 08b8 0F93      		push r16
 2050               	.LCFI53:
 2051               		.cfi_def_cfa_offset 17
 2052               		.cfi_offset 16, -16
 2053 08ba 1F93      		push r17
 2054               	.LCFI54:
 2055               		.cfi_def_cfa_offset 18
 2056               		.cfi_offset 17, -17
 2057 08bc CF93      		push r28
 2058               	.LCFI55:
 2059               		.cfi_def_cfa_offset 19
 2060               		.cfi_offset 28, -18
 2061 08be DF93      		push r29
 2062               	.LCFI56:
 2063               		.cfi_def_cfa_offset 20
 2064               		.cfi_offset 29, -19
 2065 08c0 CDB7      		in r28,__SP_L__
 2066 08c2 DEB7      		in r29,__SP_H__
 2067               	.LCFI57:
 2068               		.cfi_def_cfa_register 28
 2069 08c4 CB50      		subi r28,11
 2070 08c6 D140      		sbci r29,1
 2071               	.LCFI58:
 2072               		.cfi_def_cfa_offset 287
 2073 08c8 0FB6      		in __tmp_reg__,__SREG__
 2074 08ca F894      		cli
 2075 08cc DEBF      		out __SP_H__,r29
 2076 08ce 0FBE      		out __SREG__,__tmp_reg__
 2077 08d0 CDBF      		out __SP_L__,r28
 2078               	/* prologue: function */
 2079               	/* frame size = 267 */
 2080               	/* stack size = 285 */
 2081               	.L__stack_usage = 285
 2082 08d2 5C01      		movw r10,r24
 2083 08d4 D42E      		mov r13,r20
 2084 08d6 7901      		movw r14,r18
 2085 08d8 2801      		movw r4,r16
 2086               	.LVL152:
1244:main.c        ****     uint8_t id1 = 0;
1245:main.c        ****     uint8_t id2 = 0;
1246:main.c        **** 
1247:main.c        ****     uint8_t* P;
1248:main.c        ****     uint8_t buffer[4];
1249:main.c        ****     uint8_t d64_sector_puffer[D64_SECTOR_SIZE];
1250:main.c        ****     uint8_t is_read = 0;
1251:main.c        ****     int32_t offset = 0;
1252:main.c        ****     uint8_t sector_nr;
1253:main.c        ****     uint8_t SUM;
1254:main.c        **** 
1255:main.c        ****     switch(image_type)
 2087               		.loc 1 1255 0
 2088 08da 6130      		cpi r22,lo8(1)
 2089 08dc 01F0      		breq .L124
 2090 08de 6230      		cpi r22,lo8(2)
 2091 08e0 01F4      		brne .+2
 2092 08e2 00C0      		rjmp .L125
 2093 08e4 00C0      		rjmp .L142
 2094               	.L124:
1256:main.c        ****     {
1257:main.c        ****     ///////////////////////////////////////////////////////////////////////////
1258:main.c        ****     case G64_IMAGE:	// G64
1259:main.c        **** 	/// Track18 eines G64 einlesen
1260:main.c        **** 
1261:main.c        **** 	offset = (int32_t)track_nr - 1;
1262:main.c        **** 	offset = (offset << 3) + 0x0c;
 2095               		.loc 1 1262 0
 2096 08e6 842F      		mov r24,r20
 2097               	.LVL153:
 2098 08e8 90E0      		ldi r25,0
 2099 08ea A0E0      		ldi r26,0
 2100 08ec B0E0      		ldi r27,0
 2101 08ee 03E0      		ldi r16,3
 2102               		1:
 2103 08f0 880F      		lsl r24
 2104 08f2 991F      		rol r25
 2105 08f4 AA1F      		rol r26
 2106 08f6 BB1F      		rol r27
 2107 08f8 0A95      		dec r16
 2108 08fa 01F4      		brne 1b
 2109               	.LVL154:
 2110 08fc 0496      		adiw r24,4
 2111 08fe A11D      		adc r26,__zero_reg__
 2112 0900 B11D      		adc r27,__zero_reg__
 2113 0902 CF5F      		subi r28,lo8(-257)
 2114 0904 DE4F      		sbci r29,hi8(-257)
 2115 0906 8883      		st Y,r24
 2116 0908 9983      		std Y+1,r25
 2117 090a AA83      		std Y+2,r26
 2118 090c BB83      		std Y+3,r27
 2119 090e C150      		subi r28,lo8(257)
 2120 0910 D140      		sbci r29,hi8(257)
1263:main.c        **** 
1264:main.c        **** 	if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
 2121               		.loc 1 1264 0
 2122 0912 40E0      		ldi r20,0
 2123               	.LVL155:
 2124 0914 BE01      		movw r22,r28
 2125               	.LVL156:
 2126 0916 6F5F      		subi r22,-1
 2127 0918 7E4F      		sbci r23,-2
 2128 091a C501      		movw r24,r10
 2129 091c 0E94 0000 		call fat_seek_file
 2130               	.LVL157:
 2131 0920 8823      		tst r24
 2132 0922 01F4      		brne .+2
 2133 0924 00C0      		rjmp .L142
1265:main.c        **** 	{
1266:main.c        ****         if(fat_read_file(fd, (uint8_t*)&offset, 4))
 2134               		.loc 1 1266 0
 2135 0926 44E0      		ldi r20,lo8(4)
 2136 0928 50E0      		ldi r21,0
 2137 092a BE01      		movw r22,r28
 2138 092c 6F5F      		subi r22,-1
 2139 092e 7E4F      		sbci r23,-2
 2140 0930 C501      		movw r24,r10
 2141 0932 0E94 0000 		call fat_read_file
 2142               	.LVL158:
 2143 0936 892B      		or r24,r25
 2144 0938 01F4      		brne .+2
 2145 093a 00C0      		rjmp .L142
1267:main.c        **** 	    {
1268:main.c        ****             if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
 2146               		.loc 1 1268 0
 2147 093c 40E0      		ldi r20,0
 2148 093e BE01      		movw r22,r28
 2149 0940 6F5F      		subi r22,-1
 2150 0942 7E4F      		sbci r23,-2
 2151 0944 C501      		movw r24,r10
 2152 0946 0E94 0000 		call fat_seek_file
 2153               	.LVL159:
 2154 094a 8823      		tst r24
 2155 094c 01F4      		brne .+2
 2156 094e 00C0      		rjmp .L142
1269:main.c        ****             {
1270:main.c        ****                         fat_read_file(fd, (uint8_t*)gcr_track_length, 2);
 2157               		.loc 1 1270 0
 2158 0950 42E0      		ldi r20,lo8(2)
 2159 0952 50E0      		ldi r21,0
 2160 0954 B201      		movw r22,r4
 2161 0956 C501      		movw r24,r10
 2162 0958 0E94 0000 		call fat_read_file
 2163               	.LVL160:
1271:main.c        ****                         fat_read_file(fd, track_buffer, *gcr_track_length);
 2164               		.loc 1 1271 0
 2165 095c D201      		movw r26,r4
 2166 095e 4D91      		ld r20,X+
 2167 0960 5C91      		ld r21,X
 2168 0962 B701      		movw r22,r14
 2169 0964 C501      		movw r24,r10
 2170 0966 0E94 0000 		call fat_read_file
 2171               	.LVL161:
1272:main.c        **** 
1273:main.c        ****                 is_read = 1;
 2172               		.loc 1 1273 0
 2173 096a 81E0      		ldi r24,lo8(1)
 2174 096c 00C0      		rjmp .L123
 2175               	.LVL162:
 2176               	.L125:
1274:main.c        ****             }
1275:main.c        **** 	    }
1276:main.c        **** 	}
1277:main.c        **** 	break;
1278:main.c        **** 
1279:main.c        ****     ///////////////////////////////////////////////////////////////////////////
1280:main.c        ****     case D64_IMAGE:	// D64
1281:main.c        **** 
1282:main.c        **** 	offset = d64_track_offset[track_nr];
 2177               		.loc 1 1282 0
 2178 096e 842E      		mov r8,r20
 2179 0970 912C      		mov r9,__zero_reg__
 2180 0972 F401      		movw r30,r8
 2181 0974 EE0F      		lsl r30
 2182 0976 FF1F      		rol r31
 2183 0978 EE0F      		lsl r30
 2184 097a FF1F      		rol r31
 2185 097c E050      		subi r30,lo8(-(d64_track_offset))
 2186 097e F040      		sbci r31,hi8(-(d64_track_offset))
 2187 0980 8081      		ld r24,Z
 2188 0982 9181      		ldd r25,Z+1
 2189 0984 A281      		ldd r26,Z+2
 2190 0986 B381      		ldd r27,Z+3
 2191 0988 CF5F      		subi r28,lo8(-257)
 2192 098a DE4F      		sbci r29,hi8(-257)
 2193 098c 8883      		st Y,r24
 2194 098e 9983      		std Y+1,r25
 2195 0990 AA83      		std Y+2,r26
 2196 0992 BB83      		std Y+3,r27
 2197 0994 C150      		subi r28,lo8(257)
 2198 0996 D140      		sbci r29,hi8(257)
1283:main.c        **** 
1284:main.c        **** 	if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
 2199               		.loc 1 1284 0
 2200 0998 40E0      		ldi r20,0
 2201 099a BE01      		movw r22,r28
 2202               	.LVL163:
 2203 099c 6F5F      		subi r22,-1
 2204 099e 7E4F      		sbci r23,-2
 2205 09a0 C501      		movw r24,r10
 2206 09a2 0E94 0000 		call fat_seek_file
 2207               	.LVL164:
 2208 09a6 8823      		tst r24
 2209 09a8 01F4      		brne .+2
 2210 09aa 00C0      		rjmp .L142
 2211               	.LVL165:
 2212               	.LBB117:
 2213               	.LBB118:
 2214               	.LBB119:
1285:main.c        **** 	{
1286:main.c        **** 	    P = track_buffer;
1287:main.c        **** 
1288:main.c        **** 	    for(sector_nr=0;sector_nr<d64_sector_count[track_nr];sector_nr++)
1289:main.c        **** 	    {
1290:main.c        ****             fat_read_file(fd, d64_sector_puffer, D64_SECTOR_SIZE);
1291:main.c        **** 
1292:main.c        ****             *P++ = 0xFF;								// SYNC
1293:main.c        ****             *P++ = 0xFF;								// SYNC
1294:main.c        ****             *P++ = 0xFF;								// SYNC
1295:main.c        ****             *P++ = 0xFF;								// SYNC
1296:main.c        ****             *P++ = 0xFF;								// SYNC
1297:main.c        **** 
1298:main.c        ****             buffer[0] = 0x08;							// Header Markierung
1299:main.c        ****             buffer[1] = sector_nr ^ track_nr ^ id2 ^ id1;				// Checksumme
1300:main.c        ****             buffer[2] = sector_nr;
1301:main.c        ****             buffer[3] = track_nr;
1302:main.c        ****             ConvertToGCR(buffer, P);
1303:main.c        ****             buffer[0] = id2;
1304:main.c        ****             buffer[1] = id1;
1305:main.c        ****             buffer[2] = 0x0F;
1306:main.c        ****             buffer[3] = 0x0F;
1307:main.c        ****             ConvertToGCR(buffer, P+5);
1308:main.c        ****             P += 10;
1309:main.c        **** 
1310:main.c        ****             // GAP Bytes als Lücke
1311:main.c        ****             memset(P, 0x55, HEADER_GAP_BYTES);
1312:main.c        ****             P += HEADER_GAP_BYTES;
1313:main.c        **** 
1314:main.c        ****             // SYNC
1315:main.c        ****             *P++ = 0xFF;								// SYNC
1316:main.c        ****             *P++ = 0xFF;								// SYNC
1317:main.c        ****             *P++ = 0xFF;								// SYNC
1318:main.c        ****             *P++ = 0xFF;								// SYNC
1319:main.c        ****             *P++ = 0xFF;								// SYNC
1320:main.c        **** 
1321:main.c        ****             buffer[0] = 0x07;							// Data mark
1322:main.c        ****             SUM = buffer[1] = d64_sector_puffer[0];
1323:main.c        ****             SUM ^= buffer[2] = d64_sector_puffer[1];
1324:main.c        ****             SUM ^= buffer[3] = d64_sector_puffer[2];
1325:main.c        ****             ConvertToGCR(buffer, P);
1326:main.c        ****             P += 5;
1327:main.c        **** 
1328:main.c        ****             for (int i=3; i<255; i+=4)
1329:main.c        ****             {
1330:main.c        ****                 SUM ^= buffer[0] = d64_sector_puffer[i];
1331:main.c        ****                 SUM ^= buffer[1] = d64_sector_puffer[i+1];
1332:main.c        ****                 SUM ^= buffer[2] = d64_sector_puffer[i+2];
1333:main.c        ****                 SUM ^= buffer[3] = d64_sector_puffer[i+3];
1334:main.c        ****                 ConvertToGCR(buffer, P);
1335:main.c        ****                 P += 5;
1336:main.c        ****             }
1337:main.c        **** 
1338:main.c        ****             SUM ^= buffer[0] = d64_sector_puffer[255];
1339:main.c        ****             buffer[1] = SUM;							// Checksum
1340:main.c        ****             buffer[2] = 0;
1341:main.c        ****             buffer[3] = 0;
1342:main.c        ****             ConvertToGCR(buffer, P);
1343:main.c        ****             P += 5;
1344:main.c        **** 
1345:main.c        ****             // GCR Bytes als Lücken auffüllen (sorgt für eine Gleichverteilung)
1346:main.c        ****             uint8_t gap_size = d64_sector_gap[d64_track_zone[track_nr]];
1347:main.c        ****             memset(P, 0x55, gap_size);
1348:main.c        ****             P += gap_size;
1349:main.c        **** 
1350:main.c        ****             //*gcr_track_length = d64_track_length[d64_track_zone[track_nr]];
1351:main.c        ****             *gcr_track_length = P - gcr_track;
1352:main.c        **** 	    }
1353:main.c        **** 	}
1354:main.c        **** 	break;
1355:main.c        ****     }
1356:main.c        ****     return is_read;
1357:main.c        **** }
1358:main.c        **** 
1359:main.c        **** /////////////////////////////////////////////////////////////////////
1360:main.c        **** 
1361:main.c        **** void write_disk_track(struct fat_file_struct *fd, uint8_t image_type, uint8_t track_nr, uint8_t* tr
1362:main.c        **** {
1363:main.c        ****     uint8_t* P;
1364:main.c        ****     uint8_t d64_sector_puffer[D64_SECTOR_SIZE+5]; // add some gap for GCR overhead+checksum
1365:main.c        ****     int32_t offset = 0;
1366:main.c        **** 
1367:main.c        ****     switch(image_type)
1368:main.c        ****     {
1369:main.c        ****     ///////////////////////////////////////////////////////////////////////////
1370:main.c        ****     case G64_IMAGE:	// G64
1371:main.c        ****         /// Track18 eines G64 einlesen
1372:main.c        **** 
1373:main.c        ****         offset = (int32_t)track_nr - 1;
1374:main.c        ****         offset = (offset << 3) + 0x0c;
1375:main.c        **** 
1376:main.c        ****         if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
1377:main.c        ****         {
1378:main.c        ****             if(fat_read_file(fd, (uint8_t*)&offset, 4))
1379:main.c        ****             {
1380:main.c        ****                 offset += 2;
1381:main.c        ****                 if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
1382:main.c        ****                 {
1383:main.c        ****                     fat_write_file(fd, track_buffer, *gcr_track_length);
1384:main.c        ****                 }
1385:main.c        ****             }
1386:main.c        ****         }
1387:main.c        ****         break;
1388:main.c        **** 
1389:main.c        ****     ///////////////////////////////////////////////////////////////////////////
1390:main.c        ****     case D64_IMAGE:	// D64
1391:main.c        ****         {
1392:main.c        ****             offset = d64_track_offset[track_nr];
1393:main.c        ****             P = track_buffer;
1394:main.c        **** 
1395:main.c        ****             if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
1396:main.c        ****             {
1397:main.c        ****                 for(int sector_nr=0;sector_nr<d64_sector_count[track_nr];sector_nr++)
1398:main.c        ****                 {
1399:main.c        ****                     // search for Sector Sync (maybe custom write routines change this)
1400:main.c        ****                     while ((P[0] != 0xFF) || (P[1] != 0xFF) || (P[2] != 0x52)) { ++P; }
1401:main.c        ****                     P+=2;
1402:main.c        ****                     // find Data-Sync .. ignore SectorHeader-Data
1403:main.c        ****                     while ((P[0] != 0xFF) || (P[1] != 0x55)) { ++P; }
1404:main.c        ****                     ++P;
1405:main.c        ****                     // P += 2+10+9+5; // Sector-Sync, Sect-header, GAP, Data-Sync
1406:main.c        ****                     for(int i=0; i<260; i += 4)
1407:main.c        ****                     {
1408:main.c        ****                         ConvertFromGCR(P, &(d64_sector_puffer[i]));
1409:main.c        ****                         P += 5;
1410:main.c        ****                     }
1411:main.c        ****                     fat_write_file(fd, &d64_sector_puffer[1], D64_SECTOR_SIZE);
1412:main.c        ****                 }
1413:main.c        ****             }
1414:main.c        ****         }
1415:main.c        ****         break;
1416:main.c        ****     }
1417:main.c        **** }
1418:main.c        **** 
1419:main.c        **** /////////////////////////////////////////////////////////////////////
1420:main.c        **** 
1421:main.c        **** void remove_image()
1422:main.c        **** {
1423:main.c        ****     is_image_mount = 0;
1424:main.c        ****     akt_image_type = UNDEF_IMAGE;
1425:main.c        ****     set_write_protection(1);
1426:main.c        ****     menu_set_entry_var1(&image_menu, M_WP_IMAGE, 1);
1427:main.c        ****     send_disk_change();
1428:main.c        **** }
1429:main.c        **** 
1430:main.c        **** /////////////////////////////////////////////////////////////////////
1431:main.c        **** 
1432:main.c        **** inline void ConvertToGCR(uint8_t *source_buffer, uint8_t *destination_buffer)
1433:main.c        **** {
1434:main.c        ****     const static uint8_t GCR_TBL[16] = {0x0a, 0x0b, 0x12, 0x13, 0x0e, 0x0f, 0x16, 0x17,0x09, 0x19, 
1435:main.c        ****     uint16_t tmp;
1436:main.c        **** 
1437:main.c        ****     tmp = (GCR_TBL[*source_buffer >> 4] << 5) | GCR_TBL[*source_buffer & 15];
1438:main.c        ****     *destination_buffer++ = tmp >> 2;
1439:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
1440:main.c        ****     source_buffer++;
1441:main.c        **** 
1442:main.c        ****     tmp = (GCR_TBL[*source_buffer >> 4] << 5) | GCR_TBL[*source_buffer & 15];
1443:main.c        ****     *destination_buffer++ |= (tmp >> 4) & 0x3f;
1444:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
1445:main.c        ****     source_buffer++;
1446:main.c        **** 
1447:main.c        ****     tmp = (GCR_TBL[*source_buffer >> 4] << 5) | GCR_TBL[*source_buffer & 15];
1448:main.c        ****     *destination_buffer++ |= (tmp >> 6) & 0x0f;
1449:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
1450:main.c        ****     source_buffer++;
1451:main.c        **** 
1452:main.c        ****     tmp = (GCR_TBL[*source_buffer >> 4] << 5) | GCR_TBL[*source_buffer & 15];
 2215               		.loc 1 1452 0
 2216 09ac 8D2D      		mov r24,r13
 2217 09ae 8295      		swap r24
 2218 09b0 8F70      		andi r24,lo8(15)
 2219 09b2 90E0      		ldi r25,0
 2220 09b4 00E0      		ldi r16,0
 2221               	.LBE119:
 2222               	.LBE118:
 2223               	.LBE117:
1288:main.c        **** 	    {
 2224               		.loc 1 1288 0
 2225 09b6 F401      		movw r30,r8
 2226 09b8 E050      		subi r30,lo8(-(d64_sector_count))
 2227 09ba F040      		sbci r31,hi8(-(d64_sector_count))
 2228 09bc 2080      		ld r2,Z
 2229               	.LBB135:
1292:main.c        ****             *P++ = 0xFF;								// SYNC
 2230               		.loc 1 1292 0
 2231 09be 1FEF      		ldi r17,lo8(-1)
 2232               	.LBB122:
 2233               	.LBB120:
 2234               		.loc 1 1452 0
 2235 09c0 FC01      		movw r30,r24
 2236 09c2 E050      		subi r30,lo8(-(GCR_TBL.3026))
 2237 09c4 F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2238 09c6 CB5F      		subi r28,lo8(-261)
 2239 09c8 DE4F      		sbci r29,hi8(-261)
 2240 09ca F983      		std Y+1,r31
 2241 09cc E883      		st Y,r30
 2242 09ce C550      		subi r28,lo8(261)
 2243 09d0 D140      		sbci r29,hi8(261)
 2244 09d2 8D2D      		mov r24,r13
 2245 09d4 8F70      		andi r24,lo8(15)
 2246 09d6 90E0      		ldi r25,0
 2247 09d8 9C01      		movw r18,r24
 2248 09da 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2249 09dc 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2250 09de C95F      		subi r28,lo8(-263)
 2251 09e0 DE4F      		sbci r29,hi8(-263)
 2252 09e2 3983      		std Y+1,r19
 2253 09e4 2883      		st Y,r18
 2254 09e6 C750      		subi r28,lo8(263)
 2255 09e8 D140      		sbci r29,hi8(263)
 2256               	.LBE120:
 2257               	.LBE122:
 2258               	.LBB123:
 2259               	.LBB124:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2260               		.loc 1 1443 0
 2261 09ea A4E9      		ldi r26,lo8(-108)
 2262 09ec 3A2E      		mov r3,r26
1453:main.c        ****     *destination_buffer++ |= (tmp >> 8) & 0x03;
 2263               		.loc 1 1453 0
 2264 09ee B5E5      		ldi r27,lo8(85)
 2265 09f0 CB2E      		mov r12,r27
 2266               	.LBE124:
 2267               	.LBE123:
1346:main.c        ****             memset(P, 0x55, gap_size);
 2268               		.loc 1 1346 0
 2269 09f2 B401      		movw r22,r8
 2270 09f4 6050      		subi r22,lo8(-(d64_track_zone))
 2271 09f6 7040      		sbci r23,hi8(-(d64_track_zone))
 2272 09f8 C75F      		subi r28,lo8(-265)
 2273 09fa DE4F      		sbci r29,hi8(-265)
 2274 09fc 7983      		std Y+1,r23
 2275 09fe 6883      		st Y,r22
 2276 0a00 C950      		subi r28,lo8(265)
 2277 0a02 D140      		sbci r29,hi8(265)
 2278               	.LVL166:
 2279               	.L128:
 2280               	.LBE135:
1288:main.c        **** 	    {
 2281               		.loc 1 1288 0 discriminator 1
 2282 0a04 0215      		cp r16,r2
 2283 0a06 00F0      		brlo .+2
 2284 0a08 00C0      		rjmp .L142
 2285               	.LBB136:
1290:main.c        **** 
 2286               		.loc 1 1290 0
 2287 0a0a 40E0      		ldi r20,0
 2288 0a0c 51E0      		ldi r21,lo8(1)
 2289 0a0e BE01      		movw r22,r28
 2290 0a10 6F5F      		subi r22,-1
 2291 0a12 7F4F      		sbci r23,-1
 2292 0a14 C501      		movw r24,r10
 2293 0a16 0E94 0000 		call fat_read_file
 2294               	.LVL167:
1292:main.c        ****             *P++ = 0xFF;								// SYNC
 2295               		.loc 1 1292 0
 2296 0a1a D701      		movw r26,r14
 2297 0a1c 1C93      		st X,r17
 2298               	.LVL168:
1293:main.c        ****             *P++ = 0xFF;								// SYNC
 2299               		.loc 1 1293 0
 2300 0a1e 1196      		adiw r26,1
 2301 0a20 1C93      		st X,r17
 2302 0a22 1197      		sbiw r26,1
 2303               	.LVL169:
1294:main.c        ****             *P++ = 0xFF;								// SYNC
 2304               		.loc 1 1294 0
 2305 0a24 1296      		adiw r26,2
 2306 0a26 1C93      		st X,r17
 2307 0a28 1297      		sbiw r26,2
 2308               	.LVL170:
1295:main.c        ****             *P++ = 0xFF;								// SYNC
 2309               		.loc 1 1295 0
 2310 0a2a 1396      		adiw r26,3
 2311 0a2c 1C93      		st X,r17
 2312 0a2e 1397      		sbiw r26,3
 2313               	.LVL171:
1296:main.c        **** 
 2314               		.loc 1 1296 0
 2315 0a30 1496      		adiw r26,4
 2316 0a32 1C93      		st X,r17
 2317 0a34 1497      		sbiw r26,4
 2318               	.LVL172:
 2319               	.LBB126:
 2320               	.LBB121:
1438:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
 2321               		.loc 1 1438 0
 2322 0a36 E2E5      		ldi r30,lo8(82)
 2323 0a38 1596      		adiw r26,5
 2324 0a3a EC93      		st X,r30
 2325               	.LVL173:
1442:main.c        ****     *destination_buffer++ |= (tmp >> 4) & 0x3f;
 2326               		.loc 1 1442 0
 2327 0a3c E02F      		mov r30,r16
 2328 0a3e ED25      		eor r30,r13
 2329 0a40 AE2F      		mov r26,r30
 2330 0a42 A295      		swap r26
 2331 0a44 AF70      		andi r26,lo8(15)
 2332 0a46 B0E0      		ldi r27,0
 2333 0a48 A050      		subi r26,lo8(-(GCR_TBL.3026))
 2334 0a4a B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2335 0a4c 2C91      		ld r18,X
 2336 0a4e F0E2      		ldi r31,lo8(32)
 2337 0a50 2F9F      		mul r18,r31
 2338 0a52 9001      		movw r18,r0
 2339 0a54 1124      		clr __zero_reg__
 2340 0a56 EF70      		andi r30,lo8(15)
 2341 0a58 F0E0      		ldi r31,0
 2342 0a5a E050      		subi r30,lo8(-(GCR_TBL.3026))
 2343 0a5c F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2344 0a5e 8081      		ld r24,Z
 2345 0a60 282B      		or r18,r24
 2346               	.LVL174:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2347               		.loc 1 1443 0
 2348 0a62 C901      		movw r24,r18
 2349 0a64 64E0      		ldi r22,4
 2350               		1:
 2351 0a66 9695      		lsr r25
 2352 0a68 8795      		ror r24
 2353 0a6a 6A95      		dec r22
 2354 0a6c 01F4      		brne 1b
 2355 0a6e 8F73      		andi r24,lo8(63)
 2356 0a70 8064      		ori r24,lo8(64)
 2357 0a72 D701      		movw r26,r14
 2358 0a74 1696      		adiw r26,6
 2359 0a76 8C93      		st X,r24
 2360               	.LVL175:
1447:main.c        ****     *destination_buffer++ |= (tmp >> 6) & 0x0f;
 2361               		.loc 1 1447 0
 2362 0a78 E02F      		mov r30,r16
 2363 0a7a E295      		swap r30
 2364 0a7c EF70      		andi r30,lo8(15)
 2365 0a7e F0E0      		ldi r31,0
 2366 0a80 E050      		subi r30,lo8(-(GCR_TBL.3026))
 2367 0a82 F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2368 0a84 8081      		ld r24,Z
 2369 0a86 B0E2      		ldi r27,lo8(32)
 2370 0a88 8B9F      		mul r24,r27
 2371 0a8a C001      		movw r24,r0
 2372 0a8c 1124      		clr __zero_reg__
 2373 0a8e E02F      		mov r30,r16
 2374 0a90 EF70      		andi r30,lo8(15)
 2375 0a92 F0E0      		ldi r31,0
 2376 0a94 E050      		subi r30,lo8(-(GCR_TBL.3026))
 2377 0a96 F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2378 0a98 3081      		ld r19,Z
 2379 0a9a 832B      		or r24,r19
 2380               	.LVL176:
1448:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
 2381               		.loc 1 1448 0
 2382 0a9c AC01      		movw r20,r24
 2383 0a9e 76E0      		ldi r23,6
 2384               		1:
 2385 0aa0 5695      		lsr r21
 2386 0aa2 4795      		ror r20
 2387 0aa4 7A95      		dec r23
 2388 0aa6 01F4      		brne 1b
 2389 0aa8 4F70      		andi r20,lo8(15)
 2390 0aaa 2295      		swap r18
 2391 0aac 207F      		andi r18,lo8(-16)
 2392 0aae 242B      		or r18,r20
 2393 0ab0 F701      		movw r30,r14
 2394 0ab2 2783      		std Z+7,r18
 2395               	.LVL177:
1452:main.c        ****     *destination_buffer++ |= (tmp >> 8) & 0x03;
 2396               		.loc 1 1452 0
 2397 0ab4 CB5F      		subi r28,lo8(-261)
 2398 0ab6 DE4F      		sbci r29,hi8(-261)
 2399 0ab8 A881      		ld r26,Y
 2400 0aba B981      		ldd r27,Y+1
 2401 0abc C550      		subi r28,lo8(261)
 2402 0abe D140      		sbci r29,hi8(261)
 2403 0ac0 2C91      		ld r18,X
 2404 0ac2 B0E2      		ldi r27,lo8(32)
 2405 0ac4 2B9F      		mul r18,r27
 2406 0ac6 9001      		movw r18,r0
 2407 0ac8 1124      		clr __zero_reg__
 2408 0aca C95F      		subi r28,lo8(-263)
 2409 0acc DE4F      		sbci r29,hi8(-263)
 2410 0ace E881      		ld r30,Y
 2411 0ad0 F981      		ldd r31,Y+1
 2412 0ad2 C750      		subi r28,lo8(263)
 2413 0ad4 D140      		sbci r29,hi8(263)
 2414 0ad6 9081      		ld r25,Z
 2415 0ad8 292B      		or r18,r25
 2416               	.LVL178:
 2417               		.loc 1 1453 0
 2418 0ada 932F      		mov r25,r19
 2419 0adc 9370      		andi r25,lo8(3)
 2420 0ade 880F      		lsl r24
 2421 0ae0 880F      		lsl r24
 2422 0ae2 892B      		or r24,r25
 2423 0ae4 D701      		movw r26,r14
 2424 0ae6 1896      		adiw r26,8
 2425 0ae8 8C93      		st X,r24
 2426 0aea 1897      		sbiw r26,8
1454:main.c        ****     *destination_buffer = (uint8_t)tmp;
 2427               		.loc 1 1454 0
 2428 0aec 1996      		adiw r26,9
 2429 0aee 2C93      		st X,r18
 2430 0af0 1997      		sbiw r26,9
 2431               	.LVL179:
 2432               	.LBE121:
 2433               	.LBE126:
 2434               	.LBB127:
 2435               	.LBB125:
1438:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
 2436               		.loc 1 1438 0
 2437 0af2 E2E5      		ldi r30,lo8(82)
 2438 0af4 1A96      		adiw r26,10
 2439 0af6 EC93      		st X,r30
 2440 0af8 1A97      		sbiw r26,10
 2441               	.LVL180:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2442               		.loc 1 1443 0
 2443 0afa 1B96      		adiw r26,11
 2444 0afc 3C92      		st X,r3
 2445 0afe 1B97      		sbiw r26,11
 2446               	.LVL181:
1448:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
 2447               		.loc 1 1448 0
 2448 0b00 F5EA      		ldi r31,lo8(-91)
 2449 0b02 1C96      		adiw r26,12
 2450 0b04 FC93      		st X,r31
 2451 0b06 1C97      		sbiw r26,12
 2452               	.LVL182:
1453:main.c        ****     *destination_buffer = (uint8_t)tmp;
 2453               		.loc 1 1453 0
 2454 0b08 1D96      		adiw r26,13
 2455 0b0a CC92      		st X,r12
 2456 0b0c 1D97      		sbiw r26,13
 2457               		.loc 1 1454 0
 2458 0b0e 1E96      		adiw r26,14
 2459 0b10 CC92      		st X,r12
 2460               	.LVL183:
 2461               	.LBE125:
 2462               	.LBE127:
1311:main.c        ****             P += HEADER_GAP_BYTES;
 2463               		.loc 1 1311 0
 2464 0b12 49E0      		ldi r20,lo8(9)
 2465 0b14 50E0      		ldi r21,0
 2466 0b16 65E5      		ldi r22,lo8(85)
 2467 0b18 70E0      		ldi r23,0
 2468 0b1a C701      		movw r24,r14
 2469 0b1c 0F96      		adiw r24,15
 2470               	.LVL184:
 2471 0b1e 0E94 0000 		call memset
 2472               	.LVL185:
1315:main.c        ****             *P++ = 0xFF;								// SYNC
 2473               		.loc 1 1315 0
 2474 0b22 D701      		movw r26,r14
 2475 0b24 5896      		adiw r26,24
 2476 0b26 1C93      		st X,r17
 2477 0b28 5897      		sbiw r26,24
 2478               	.LVL186:
1316:main.c        ****             *P++ = 0xFF;								// SYNC
 2479               		.loc 1 1316 0
 2480 0b2a 5996      		adiw r26,25
 2481 0b2c 1C93      		st X,r17
 2482 0b2e 5997      		sbiw r26,25
 2483               	.LVL187:
1317:main.c        ****             *P++ = 0xFF;								// SYNC
 2484               		.loc 1 1317 0
 2485 0b30 5A96      		adiw r26,26
 2486 0b32 1C93      		st X,r17
 2487 0b34 5A97      		sbiw r26,26
 2488               	.LVL188:
1318:main.c        ****             *P++ = 0xFF;								// SYNC
 2489               		.loc 1 1318 0
 2490 0b36 5B96      		adiw r26,27
 2491 0b38 1C93      		st X,r17
 2492 0b3a 5B97      		sbiw r26,27
 2493               	.LVL189:
1319:main.c        **** 
 2494               		.loc 1 1319 0
 2495 0b3c 5C96      		adiw r26,28
 2496 0b3e 1C93      		st X,r17
 2497               	.LVL190:
1322:main.c        ****             SUM ^= buffer[2] = d64_sector_puffer[1];
 2498               		.loc 1 1322 0
 2499 0b40 2981      		ldd r18,Y+1
 2500               	.LVL191:
1323:main.c        ****             SUM ^= buffer[3] = d64_sector_puffer[2];
 2501               		.loc 1 1323 0
 2502 0b42 AA81      		ldd r26,Y+2
 2503               	.LVL192:
 2504 0b44 822F      		mov r24,r18
 2505 0b46 8A27      		eor r24,r26
 2506               	.LVL193:
1324:main.c        ****             ConvertToGCR(buffer, P);
 2507               		.loc 1 1324 0
 2508 0b48 9B80      		ldd r9,Y+3
 2509               	.LVL194:
 2510 0b4a 8925      		eor r24,r9
 2511               	.LVL195:
 2512               	.LBB128:
 2513               	.LBB129:
1438:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
 2514               		.loc 1 1438 0
 2515 0b4c F701      		movw r30,r14
 2516 0b4e C58E      		std Z+29,r12
 2517               	.LVL196:
1442:main.c        ****     *destination_buffer++ |= (tmp >> 4) & 0x3f;
 2518               		.loc 1 1442 0
 2519 0b50 422F      		mov r20,r18
 2520 0b52 4295      		swap r20
 2521 0b54 4F70      		andi r20,lo8(15)
 2522 0b56 50E0      		ldi r21,0
 2523 0b58 4050      		subi r20,lo8(-(GCR_TBL.3026))
 2524 0b5a 5040      		sbci r21,hi8(-(GCR_TBL.3026))
 2525 0b5c FA01      		movw r30,r20
 2526 0b5e 4081      		ld r20,Z
 2527 0b60 F0E2      		ldi r31,lo8(32)
 2528 0b62 4F9F      		mul r20,r31
 2529 0b64 A001      		movw r20,r0
 2530 0b66 1124      		clr __zero_reg__
 2531 0b68 2F70      		andi r18,lo8(15)
 2532               	.LVL197:
 2533 0b6a 30E0      		ldi r19,0
 2534 0b6c 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2535 0b6e 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2536 0b70 F901      		movw r30,r18
 2537 0b72 9081      		ld r25,Z
 2538 0b74 492B      		or r20,r25
 2539               	.LVL198:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2540               		.loc 1 1443 0
 2541 0b76 9A01      		movw r18,r20
 2542 0b78 E4E0      		ldi r30,4
 2543               		1:
 2544 0b7a 3695      		lsr r19
 2545 0b7c 2795      		ror r18
 2546 0b7e EA95      		dec r30
 2547 0b80 01F4      		brne 1b
 2548 0b82 206C      		ori r18,lo8(-64)
 2549 0b84 F701      		movw r30,r14
 2550 0b86 268F      		std Z+30,r18
 2551               	.LVL199:
1447:main.c        ****     *destination_buffer++ |= (tmp >> 6) & 0x0f;
 2552               		.loc 1 1447 0
 2553 0b88 2A2F      		mov r18,r26
 2554 0b8a 2295      		swap r18
 2555 0b8c 2F70      		andi r18,lo8(15)
 2556 0b8e 30E0      		ldi r19,0
 2557 0b90 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2558 0b92 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2559 0b94 F901      		movw r30,r18
 2560 0b96 2081      		ld r18,Z
 2561 0b98 F0E2      		ldi r31,lo8(32)
 2562 0b9a 2F9F      		mul r18,r31
 2563 0b9c 9001      		movw r18,r0
 2564 0b9e 1124      		clr __zero_reg__
 2565 0ba0 AF70      		andi r26,lo8(15)
 2566               	.LVL200:
 2567 0ba2 B0E0      		ldi r27,0
 2568 0ba4 A050      		subi r26,lo8(-(GCR_TBL.3026))
 2569 0ba6 B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2570 0ba8 9C91      		ld r25,X
 2571 0baa 292B      		or r18,r25
 2572               	.LVL201:
1448:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
 2573               		.loc 1 1448 0
 2574 0bac B901      		movw r22,r18
 2575 0bae F6E0      		ldi r31,6
 2576               		1:
 2577 0bb0 7695      		lsr r23
 2578 0bb2 6795      		ror r22
 2579 0bb4 FA95      		dec r31
 2580 0bb6 01F4      		brne 1b
 2581 0bb8 6F70      		andi r22,lo8(15)
 2582 0bba 4295      		swap r20
 2583 0bbc 407F      		andi r20,lo8(-16)
 2584 0bbe 462B      		or r20,r22
 2585 0bc0 D701      		movw r26,r14
 2586 0bc2 5F96      		adiw r26,31
 2587 0bc4 4C93      		st X,r20
 2588               	.LVL202:
1452:main.c        ****     *destination_buffer++ |= (tmp >> 8) & 0x03;
 2589               		.loc 1 1452 0
 2590 0bc6 A92D      		mov r26,r9
 2591 0bc8 A295      		swap r26
 2592 0bca AF70      		andi r26,lo8(15)
 2593 0bcc B0E0      		ldi r27,0
 2594 0bce A050      		subi r26,lo8(-(GCR_TBL.3026))
 2595 0bd0 B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2596 0bd2 4C91      		ld r20,X
 2597 0bd4 B0E2      		ldi r27,lo8(32)
 2598 0bd6 4B9F      		mul r20,r27
 2599 0bd8 A001      		movw r20,r0
 2600 0bda 1124      		clr __zero_reg__
 2601 0bdc E92D      		mov r30,r9
 2602 0bde EF70      		andi r30,lo8(15)
 2603 0be0 F0E0      		ldi r31,0
 2604 0be2 E050      		subi r30,lo8(-(GCR_TBL.3026))
 2605 0be4 F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2606 0be6 9081      		ld r25,Z
 2607 0be8 492B      		or r20,r25
 2608               	.LVL203:
1453:main.c        ****     *destination_buffer = (uint8_t)tmp;
 2609               		.loc 1 1453 0
 2610 0bea 952F      		mov r25,r21
 2611 0bec 9370      		andi r25,lo8(3)
 2612 0bee 220F      		lsl r18
 2613 0bf0 220F      		lsl r18
 2614 0bf2 292B      		or r18,r25
 2615 0bf4 F701      		movw r30,r14
 2616 0bf6 20A3      		std Z+32,r18
 2617               		.loc 1 1454 0
 2618 0bf8 41A3      		std Z+33,r20
 2619               	.LVL204:
 2620               	.LBE129:
 2621               	.LBE128:
1326:main.c        **** 
 2622               		.loc 1 1326 0
 2623 0bfa B296      		adiw r30,34
 2624               	.LVL205:
 2625 0bfc 9E01      		movw r18,r28
 2626 0bfe 2F5F      		subi r18,-1
 2627 0c00 3F4F      		sbci r19,-1
 2628 0c02 4901      		movw r8,r18
 2629 0c04 3701      		movw r6,r14
 2630 0c06 33EA      		ldi r19,-93
 2631 0c08 631A      		sub r6,r19
 2632 0c0a 3EEF      		ldi r19,-2
 2633 0c0c 730A      		sbc r7,r19
 2634               	.LVL206:
 2635               	.L129:
 2636               	.LBB130:
1330:main.c        ****                 SUM ^= buffer[1] = d64_sector_puffer[i+1];
 2637               		.loc 1 1330 0 discriminator 3
 2638 0c0e D401      		movw r26,r8
 2639 0c10 1396      		adiw r26,3
 2640 0c12 2C91      		ld r18,X
 2641 0c14 1397      		sbiw r26,3
 2642               	.LVL207:
1331:main.c        ****                 SUM ^= buffer[2] = d64_sector_puffer[i+2];
 2643               		.loc 1 1331 0 discriminator 3
 2644 0c16 1496      		adiw r26,4
 2645 0c18 BC91      		ld r27,X
 2646 0c1a C55F      		subi r28,lo8(-267)
 2647 0c1c DE4F      		sbci r29,hi8(-267)
 2648 0c1e B883      		st Y,r27
 2649 0c20 CB50      		subi r28,lo8(267)
 2650 0c22 D140      		sbci r29,hi8(267)
 2651               	.LVL208:
1332:main.c        ****                 SUM ^= buffer[3] = d64_sector_puffer[i+3];
 2652               		.loc 1 1332 0 discriminator 3
 2653 0c24 D401      		movw r26,r8
 2654 0c26 1596      		adiw r26,5
 2655 0c28 6C91      		ld r22,X
 2656 0c2a 1597      		sbiw r26,5
 2657               	.LVL209:
1333:main.c        ****                 ConvertToGCR(buffer, P);
 2658               		.loc 1 1333 0 discriminator 3
 2659 0c2c 1696      		adiw r26,6
 2660 0c2e 9C91      		ld r25,X
 2661               	.LVL210:
 2662 0c30 C55F      		subi r28,lo8(-267)
 2663 0c32 DE4F      		sbci r29,hi8(-267)
 2664 0c34 3881      		ld r19,Y
 2665 0c36 CB50      		subi r28,lo8(267)
 2666 0c38 D140      		sbci r29,hi8(267)
 2667 0c3a 3227      		eor r19,r18
 2668 0c3c 3627      		eor r19,r22
 2669 0c3e 3927      		eor r19,r25
 2670 0c40 8327      		eor r24,r19
 2671               	.LVL211:
 2672               	.LBB131:
 2673               	.LBB132:
1437:main.c        ****     *destination_buffer++ = tmp >> 2;
 2674               		.loc 1 1437 0 discriminator 3
 2675 0c42 422F      		mov r20,r18
 2676 0c44 4295      		swap r20
 2677 0c46 4F70      		andi r20,lo8(15)
 2678 0c48 50E0      		ldi r21,0
 2679 0c4a 4050      		subi r20,lo8(-(GCR_TBL.3026))
 2680 0c4c 5040      		sbci r21,hi8(-(GCR_TBL.3026))
 2681 0c4e DA01      		movw r26,r20
 2682 0c50 4C91      		ld r20,X
 2683 0c52 B0E2      		ldi r27,lo8(32)
 2684               	.LVL212:
 2685 0c54 4B9F      		mul r20,r27
 2686 0c56 A001      		movw r20,r0
 2687 0c58 1124      		clr __zero_reg__
 2688 0c5a 2F70      		andi r18,lo8(15)
 2689               	.LVL213:
 2690 0c5c 30E0      		ldi r19,0
 2691 0c5e 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2692 0c60 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2693 0c62 D901      		movw r26,r18
 2694 0c64 2C91      		ld r18,X
 2695 0c66 422B      		or r20,r18
 2696               	.LVL214:
1438:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
 2697               		.loc 1 1438 0 discriminator 3
 2698 0c68 9A01      		movw r18,r20
 2699 0c6a 3695      		lsr r19
 2700 0c6c 2795      		ror r18
 2701 0c6e 3695      		lsr r19
 2702 0c70 2795      		ror r18
 2703 0c72 2083      		st Z,r18
 2704               	.LVL215:
1442:main.c        ****     *destination_buffer++ |= (tmp >> 4) & 0x3f;
 2705               		.loc 1 1442 0 discriminator 3
 2706 0c74 C55F      		subi r28,lo8(-267)
 2707 0c76 DE4F      		sbci r29,hi8(-267)
 2708 0c78 2881      		ld r18,Y
 2709 0c7a CB50      		subi r28,lo8(267)
 2710 0c7c D140      		sbci r29,hi8(267)
 2711 0c7e 2295      		swap r18
 2712 0c80 2F70      		andi r18,lo8(15)
 2713 0c82 30E0      		ldi r19,0
 2714 0c84 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2715 0c86 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2716 0c88 D901      		movw r26,r18
 2717 0c8a 2C91      		ld r18,X
 2718 0c8c B0E2      		ldi r27,lo8(32)
 2719 0c8e 2B9F      		mul r18,r27
 2720 0c90 9001      		movw r18,r0
 2721 0c92 1124      		clr __zero_reg__
 2722 0c94 C55F      		subi r28,lo8(-267)
 2723 0c96 DE4F      		sbci r29,hi8(-267)
 2724 0c98 A881      		ld r26,Y
 2725 0c9a CB50      		subi r28,lo8(267)
 2726 0c9c D140      		sbci r29,hi8(267)
 2727 0c9e AF70      		andi r26,lo8(15)
 2728 0ca0 B0E0      		ldi r27,0
 2729 0ca2 A050      		subi r26,lo8(-(GCR_TBL.3026))
 2730 0ca4 B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2731 0ca6 5C91      		ld r21,X
 2732 0ca8 252B      		or r18,r21
 2733               	.LVL216:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2734               		.loc 1 1443 0 discriminator 3
 2735 0caa D901      		movw r26,r18
 2736 0cac 34E0      		ldi r19,4
 2737               		1:
 2738 0cae B695      		lsr r27
 2739 0cb0 A795      		ror r26
 2740 0cb2 3A95      		dec r19
 2741 0cb4 01F4      		brne 1b
 2742 0cb6 AF73      		andi r26,lo8(63)
 2743 0cb8 4295      		swap r20
 2744 0cba 440F      		lsl r20
 2745 0cbc 440F      		lsl r20
 2746 0cbe 407C      		andi r20,lo8(-64)
 2747 0cc0 4A2B      		or r20,r26
 2748 0cc2 4183      		std Z+1,r20
 2749               	.LVL217:
1447:main.c        ****     *destination_buffer++ |= (tmp >> 6) & 0x0f;
 2750               		.loc 1 1447 0 discriminator 3
 2751 0cc4 A62F      		mov r26,r22
 2752 0cc6 A295      		swap r26
 2753 0cc8 AF70      		andi r26,lo8(15)
 2754 0cca B0E0      		ldi r27,0
 2755 0ccc A050      		subi r26,lo8(-(GCR_TBL.3026))
 2756 0cce B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2757 0cd0 4C91      		ld r20,X
 2758 0cd2 70E2      		ldi r23,lo8(32)
 2759 0cd4 479F      		mul r20,r23
 2760 0cd6 A001      		movw r20,r0
 2761 0cd8 1124      		clr __zero_reg__
 2762 0cda 6F70      		andi r22,lo8(15)
 2763               	.LVL218:
 2764 0cdc A62F      		mov r26,r22
 2765 0cde B0E0      		ldi r27,0
 2766 0ce0 A050      		subi r26,lo8(-(GCR_TBL.3026))
 2767 0ce2 B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2768 0ce4 3C91      		ld r19,X
 2769 0ce6 432B      		or r20,r19
 2770               	.LVL219:
1448:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
 2771               		.loc 1 1448 0 discriminator 3
 2772 0ce8 BA01      		movw r22,r20
 2773 0cea 56E0      		ldi r21,6
 2774               		1:
 2775 0cec 7695      		lsr r23
 2776 0cee 6795      		ror r22
 2777 0cf0 5A95      		dec r21
 2778 0cf2 01F4      		brne 1b
 2779 0cf4 6F70      		andi r22,lo8(15)
 2780 0cf6 2295      		swap r18
 2781 0cf8 207F      		andi r18,lo8(-16)
 2782 0cfa 262B      		or r18,r22
 2783 0cfc 2283      		std Z+2,r18
 2784               	.LVL220:
1452:main.c        ****     *destination_buffer++ |= (tmp >> 8) & 0x03;
 2785               		.loc 1 1452 0 discriminator 3
 2786 0cfe A92F      		mov r26,r25
 2787 0d00 A295      		swap r26
 2788 0d02 AF70      		andi r26,lo8(15)
 2789 0d04 B0E0      		ldi r27,0
 2790 0d06 A050      		subi r26,lo8(-(GCR_TBL.3026))
 2791 0d08 B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2792 0d0a 2C91      		ld r18,X
 2793 0d0c A0E2      		ldi r26,lo8(32)
 2794 0d0e 2A9F      		mul r18,r26
 2795 0d10 9001      		movw r18,r0
 2796 0d12 1124      		clr __zero_reg__
 2797 0d14 9F70      		andi r25,lo8(15)
 2798               	.LVL221:
 2799 0d16 A92F      		mov r26,r25
 2800 0d18 B0E0      		ldi r27,0
 2801 0d1a A050      		subi r26,lo8(-(GCR_TBL.3026))
 2802 0d1c B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2803 0d1e 9C91      		ld r25,X
 2804 0d20 292B      		or r18,r25
 2805               	.LVL222:
1453:main.c        ****     *destination_buffer = (uint8_t)tmp;
 2806               		.loc 1 1453 0 discriminator 3
 2807 0d22 932F      		mov r25,r19
 2808 0d24 9370      		andi r25,lo8(3)
 2809 0d26 440F      		lsl r20
 2810 0d28 440F      		lsl r20
 2811 0d2a 492B      		or r20,r25
 2812 0d2c 4383      		std Z+3,r20
 2813               		.loc 1 1454 0 discriminator 3
 2814 0d2e 2483      		std Z+4,r18
 2815               	.LVL223:
 2816               	.LBE132:
 2817               	.LBE131:
1335:main.c        ****             }
 2818               		.loc 1 1335 0 discriminator 3
 2819 0d30 3596      		adiw r30,5
 2820               	.LVL224:
 2821 0d32 B4E0      		ldi r27,4
 2822 0d34 8B0E      		add r8,r27
 2823 0d36 911C      		adc r9,__zero_reg__
1328:main.c        ****             {
 2824               		.loc 1 1328 0 discriminator 3
 2825 0d38 E615      		cp r30,r6
 2826 0d3a F705      		cpc r31,r7
 2827 0d3c 01F0      		breq .+2
 2828 0d3e 00C0      		rjmp .L129
 2829               	.LBE130:
1338:main.c        ****             buffer[1] = SUM;							// Checksum
 2830               		.loc 1 1338 0 discriminator 2
 2831 0d40 C050      		subi r28,lo8(-256)
 2832 0d42 DF4F      		sbci r29,hi8(-256)
 2833 0d44 4881      		ld r20,Y
 2834 0d46 C050      		subi r28,lo8(256)
 2835 0d48 D140      		sbci r29,hi8(256)
 2836               	.LVL225:
 2837 0d4a 8427      		eor r24,r20
 2838               	.LVL226:
 2839               	.LBB133:
 2840               	.LBB134:
1437:main.c        ****     *destination_buffer++ = tmp >> 2;
 2841               		.loc 1 1437 0 discriminator 2
 2842 0d4c 242F      		mov r18,r20
 2843 0d4e 2295      		swap r18
 2844 0d50 2F70      		andi r18,lo8(15)
 2845 0d52 30E0      		ldi r19,0
 2846 0d54 2050      		subi r18,lo8(-(GCR_TBL.3026))
 2847 0d56 3040      		sbci r19,hi8(-(GCR_TBL.3026))
 2848 0d58 D901      		movw r26,r18
 2849 0d5a 2C91      		ld r18,X
 2850 0d5c B0E2      		ldi r27,lo8(32)
 2851 0d5e 2B9F      		mul r18,r27
 2852 0d60 9001      		movw r18,r0
 2853 0d62 1124      		clr __zero_reg__
 2854 0d64 A42F      		mov r26,r20
 2855 0d66 AF70      		andi r26,lo8(15)
 2856 0d68 B0E0      		ldi r27,0
 2857 0d6a A050      		subi r26,lo8(-(GCR_TBL.3026))
 2858 0d6c B040      		sbci r27,hi8(-(GCR_TBL.3026))
 2859 0d6e 9C91      		ld r25,X
 2860 0d70 A901      		movw r20,r18
 2861               	.LVL227:
 2862 0d72 492B      		or r20,r25
 2863               	.LVL228:
1438:main.c        ****     *destination_buffer = (tmp << 6) & 0xc0;
 2864               		.loc 1 1438 0 discriminator 2
 2865 0d74 9A01      		movw r18,r20
 2866 0d76 3695      		lsr r19
 2867 0d78 2795      		ror r18
 2868 0d7a 3695      		lsr r19
 2869 0d7c 2795      		ror r18
 2870 0d7e 2083      		st Z,r18
 2871               	.LVL229:
1442:main.c        ****     *destination_buffer++ |= (tmp >> 4) & 0x3f;
 2872               		.loc 1 1442 0 discriminator 2
 2873 0d80 E82F      		mov r30,r24
 2874               	.LVL230:
 2875 0d82 E295      		swap r30
 2876 0d84 EF70      		andi r30,lo8(15)
 2877 0d86 F0E0      		ldi r31,0
 2878 0d88 E050      		subi r30,lo8(-(GCR_TBL.3026))
 2879 0d8a F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2880 0d8c 2081      		ld r18,Z
 2881 0d8e E0E2      		ldi r30,lo8(32)
 2882 0d90 2E9F      		mul r18,r30
 2883 0d92 9001      		movw r18,r0
 2884 0d94 1124      		clr __zero_reg__
 2885 0d96 8F70      		andi r24,lo8(15)
 2886               	.LVL231:
 2887 0d98 E82F      		mov r30,r24
 2888 0d9a F0E0      		ldi r31,0
 2889 0d9c E050      		subi r30,lo8(-(GCR_TBL.3026))
 2890 0d9e F040      		sbci r31,hi8(-(GCR_TBL.3026))
 2891 0da0 8081      		ld r24,Z
 2892 0da2 B901      		movw r22,r18
 2893 0da4 682B      		or r22,r24
 2894 0da6 CB01      		movw r24,r22
 2895               	.LVL232:
1443:main.c        ****     *destination_buffer = (tmp << 4) & 0xf0;
 2896               		.loc 1 1443 0 discriminator 2
 2897 0da8 F701      		movw r30,r14
 2898 0daa E25A      		subi r30,-94
 2899 0dac FE4F      		sbci r31,-2
 2900 0dae 9C01      		movw r18,r24
 2901 0db0 54E0      		ldi r21,4
 2902               		1:
 2903 0db2 3695      		lsr r19
 2904 0db4 2795      		ror r18
 2905 0db6 5A95      		dec r21
 2906 0db8 01F4      		brne 1b
 2907 0dba 922F      		mov r25,r18
 2908 0dbc 9F73      		andi r25,lo8(63)
 2909 0dbe 242F      		mov r18,r20
 2910 0dc0 2295      		swap r18
 2911 0dc2 220F      		lsl r18
 2912 0dc4 220F      		lsl r18
 2913 0dc6 207C      		andi r18,lo8(-64)
 2914 0dc8 292B      		or r18,r25
 2915 0dca 2083      		st Z,r18
 2916               	.LVL233:
1448:main.c        ****     *destination_buffer = (tmp << 2) & 0xfc;
 2917               		.loc 1 1448 0 discriminator 2
 2918 0dcc 3196      		adiw r30,1
 2919 0dce 282F      		mov r18,r24
 2920 0dd0 2295      		swap r18
 2921 0dd2 207F      		andi r18,lo8(-16)
 2922 0dd4 2560      		ori r18,lo8(5)
 2923 0dd6 2083      		st Z,r18
 2924               	.LVL234:
1453:main.c        ****     *destination_buffer = (uint8_t)tmp;
 2925               		.loc 1 1453 0 discriminator 2
 2926 0dd8 3196      		adiw r30,1
 2927 0dda 89E2      		ldi r24,lo8(41)
 2928 0ddc 8083      		st Z,r24
 2929               		.loc 1 1454 0 discriminator 2
 2930 0dde 3196      		adiw r30,1
 2931 0de0 8AE4      		ldi r24,lo8(74)
 2932 0de2 8083      		st Z,r24
 2933               	.LVL235:
 2934               	.LBE134:
 2935               	.LBE133:
1343:main.c        **** 
 2936               		.loc 1 1343 0 discriminator 2
 2937 0de4 7EE9      		ldi r23,-98
 2938 0de6 E71A      		sub r14,r23
 2939 0de8 7EEF      		ldi r23,-2
 2940 0dea F70A      		sbc r15,r23
 2941               	.LVL236:
1346:main.c        ****             memset(P, 0x55, gap_size);
 2942               		.loc 1 1346 0 discriminator 2
 2943 0dec C75F      		subi r28,lo8(-265)
 2944 0dee DE4F      		sbci r29,hi8(-265)
 2945 0df0 A881      		ld r26,Y
 2946 0df2 B981      		ldd r27,Y+1
 2947 0df4 C950      		subi r28,lo8(265)
 2948 0df6 D140      		sbci r29,hi8(265)
 2949 0df8 EC91      		ld r30,X
 2950 0dfa F0E0      		ldi r31,0
 2951 0dfc E050      		subi r30,lo8(-(d64_sector_gap))
 2952 0dfe F040      		sbci r31,hi8(-(d64_sector_gap))
1347:main.c        ****             P += gap_size;
 2953               		.loc 1 1347 0 discriminator 2
 2954 0e00 8080      		ld r8,Z
 2955 0e02 912C      		mov r9,__zero_reg__
 2956 0e04 A401      		movw r20,r8
 2957 0e06 65E5      		ldi r22,lo8(85)
 2958 0e08 70E0      		ldi r23,0
 2959 0e0a C701      		movw r24,r14
 2960 0e0c 0E94 0000 		call memset
 2961               	.LVL237:
1348:main.c        **** 
 2962               		.loc 1 1348 0 discriminator 2
 2963 0e10 E80C      		add r14,r8
 2964 0e12 F91C      		adc r15,r9
 2965               	.LVL238:
1351:main.c        **** 	    }
 2966               		.loc 1 1351 0 discriminator 2
 2967 0e14 C701      		movw r24,r14
 2968 0e16 8050      		subi r24,lo8(gcr_track)
 2969 0e18 9040      		sbci r25,hi8(gcr_track)
 2970 0e1a F201      		movw r30,r4
 2971 0e1c 9183      		std Z+1,r25
 2972 0e1e 8083      		st Z,r24
 2973               	.LBE136:
1288:main.c        **** 	    {
 2974               		.loc 1 1288 0 discriminator 2
 2975 0e20 0F5F      		subi r16,lo8(-(1))
 2976               	.LVL239:
 2977 0e22 00C0      		rjmp .L128
 2978               	.LVL240:
 2979               	.L142:
1250:main.c        ****     int32_t offset = 0;
 2980               		.loc 1 1250 0
 2981 0e24 80E0      		ldi r24,0
 2982               	.LVL241:
 2983               	.L123:
 2984               	/* epilogue start */
1357:main.c        **** 
 2985               		.loc 1 1357 0
 2986 0e26 C55F      		subi r28,-11
 2987 0e28 DE4F      		sbci r29,-2
 2988 0e2a 0FB6      		in __tmp_reg__,__SREG__
 2989 0e2c F894      		cli
 2990 0e2e DEBF      		out __SP_H__,r29
 2991 0e30 0FBE      		out __SREG__,__tmp_reg__
 2992 0e32 CDBF      		out __SP_L__,r28
 2993 0e34 DF91      		pop r29
 2994 0e36 CF91      		pop r28
 2995 0e38 1F91      		pop r17
 2996 0e3a 0F91      		pop r16
 2997 0e3c FF90      		pop r15
 2998 0e3e EF90      		pop r14
 2999 0e40 DF90      		pop r13
 3000               	.LVL242:
 3001 0e42 CF90      		pop r12
 3002 0e44 BF90      		pop r11
 3003 0e46 AF90      		pop r10
 3004               	.LVL243:
 3005 0e48 9F90      		pop r9
 3006 0e4a 8F90      		pop r8
 3007 0e4c 7F90      		pop r7
 3008 0e4e 6F90      		pop r6
 3009 0e50 5F90      		pop r5
 3010 0e52 4F90      		pop r4
 3011               	.LVL244:
 3012 0e54 3F90      		pop r3
 3013 0e56 2F90      		pop r2
 3014 0e58 0895      		ret
 3015               		.cfi_endproc
 3016               	.LFE46:
 3018               	.global	write_disk_track
 3020               	write_disk_track:
 3021               	.LFB47:
1362:main.c        ****     uint8_t* P;
 3022               		.loc 1 1362 0
 3023               		.cfi_startproc
 3024               	.LVL245:
 3025 0e5a 8F92      		push r8
 3026               	.LCFI59:
 3027               		.cfi_def_cfa_offset 3
 3028               		.cfi_offset 8, -2
 3029 0e5c 9F92      		push r9
 3030               	.LCFI60:
 3031               		.cfi_def_cfa_offset 4
 3032               		.cfi_offset 9, -3
 3033 0e5e AF92      		push r10
 3034               	.LCFI61:
 3035               		.cfi_def_cfa_offset 5
 3036               		.cfi_offset 10, -4
 3037 0e60 BF92      		push r11
 3038               	.LCFI62:
 3039               		.cfi_def_cfa_offset 6
 3040               		.cfi_offset 11, -5
 3041 0e62 CF92      		push r12
 3042               	.LCFI63:
 3043               		.cfi_def_cfa_offset 7
 3044               		.cfi_offset 12, -6
 3045 0e64 DF92      		push r13
 3046               	.LCFI64:
 3047               		.cfi_def_cfa_offset 8
 3048               		.cfi_offset 13, -7
 3049 0e66 EF92      		push r14
 3050               	.LCFI65:
 3051               		.cfi_def_cfa_offset 9
 3052               		.cfi_offset 14, -8
 3053 0e68 FF92      		push r15
 3054               	.LCFI66:
 3055               		.cfi_def_cfa_offset 10
 3056               		.cfi_offset 15, -9
 3057 0e6a 0F93      		push r16
 3058               	.LCFI67:
 3059               		.cfi_def_cfa_offset 11
 3060               		.cfi_offset 16, -10
 3061 0e6c 1F93      		push r17
 3062               	.LCFI68:
 3063               		.cfi_def_cfa_offset 12
 3064               		.cfi_offset 17, -11
 3065 0e6e CF93      		push r28
 3066               	.LCFI69:
 3067               		.cfi_def_cfa_offset 13
 3068               		.cfi_offset 28, -12
 3069 0e70 DF93      		push r29
 3070               	.LCFI70:
 3071               		.cfi_def_cfa_offset 14
 3072               		.cfi_offset 29, -13
 3073 0e72 CDB7      		in r28,__SP_L__
 3074 0e74 DEB7      		in r29,__SP_H__
 3075               	.LCFI71:
 3076               		.cfi_def_cfa_register 28
 3077 0e76 C950      		subi r28,9
 3078 0e78 D140      		sbci r29,1
 3079               	.LCFI72:
 3080               		.cfi_def_cfa_offset 279
 3081 0e7a 0FB6      		in __tmp_reg__,__SREG__
 3082 0e7c F894      		cli
 3083 0e7e DEBF      		out __SP_H__,r29
 3084 0e80 0FBE      		out __SREG__,__tmp_reg__
 3085 0e82 CDBF      		out __SP_L__,r28
 3086               	/* prologue: function */
 3087               	/* frame size = 265 */
 3088               	/* stack size = 277 */
 3089               	.L__stack_usage = 277
 3090 0e84 7C01      		movw r14,r24
 3091 0e86 5901      		movw r10,r18
1367:main.c        ****     {
 3092               		.loc 1 1367 0
 3093 0e88 6130      		cpi r22,lo8(1)
 3094 0e8a 01F0      		breq .L145
 3095 0e8c 6230      		cpi r22,lo8(2)
 3096 0e8e 01F4      		brne .+2
 3097 0e90 00C0      		rjmp .L146
 3098 0e92 00C0      		rjmp .L143
 3099               	.L145:
1374:main.c        **** 
 3100               		.loc 1 1374 0
 3101 0e94 50E0      		ldi r21,0
 3102 0e96 60E0      		ldi r22,0
 3103 0e98 70E0      		ldi r23,0
 3104               	.LVL246:
 3105 0e9a 93E0      		ldi r25,3
 3106               		1:
 3107 0e9c 440F      		lsl r20
 3108 0e9e 551F      		rol r21
 3109 0ea0 661F      		rol r22
 3110 0ea2 771F      		rol r23
 3111 0ea4 9A95      		dec r25
 3112 0ea6 01F4      		brne 1b
 3113               	.LVL247:
 3114 0ea8 4C5F      		subi r20,-4
 3115 0eaa 5F4F      		sbci r21,-1
 3116 0eac 6F4F      		sbci r22,-1
 3117 0eae 7F4F      		sbci r23,-1
 3118 0eb0 CA5F      		subi r28,lo8(-262)
 3119 0eb2 DE4F      		sbci r29,hi8(-262)
 3120 0eb4 4883      		st Y,r20
 3121 0eb6 5983      		std Y+1,r21
 3122 0eb8 6A83      		std Y+2,r22
 3123 0eba 7B83      		std Y+3,r23
 3124 0ebc C650      		subi r28,lo8(262)
 3125 0ebe D140      		sbci r29,hi8(262)
1376:main.c        ****         {
 3126               		.loc 1 1376 0
 3127 0ec0 40E0      		ldi r20,0
 3128 0ec2 BE01      		movw r22,r28
 3129 0ec4 6A5F      		subi r22,-6
 3130 0ec6 7E4F      		sbci r23,-2
 3131 0ec8 C701      		movw r24,r14
 3132               	.LVL248:
 3133 0eca 0E94 0000 		call fat_seek_file
 3134               	.LVL249:
 3135 0ece 8823      		tst r24
 3136 0ed0 01F4      		brne .+2
 3137 0ed2 00C0      		rjmp .L143
1378:main.c        ****             {
 3138               		.loc 1 1378 0
 3139 0ed4 44E0      		ldi r20,lo8(4)
 3140 0ed6 50E0      		ldi r21,0
 3141 0ed8 BE01      		movw r22,r28
 3142 0eda 6A5F      		subi r22,-6
 3143 0edc 7E4F      		sbci r23,-2
 3144 0ede C701      		movw r24,r14
 3145 0ee0 0E94 0000 		call fat_read_file
 3146               	.LVL250:
 3147 0ee4 892B      		or r24,r25
 3148 0ee6 01F4      		brne .+2
 3149 0ee8 00C0      		rjmp .L143
1380:main.c        ****                 if(fat_seek_file(fd,&offset,FAT_SEEK_SET))
 3150               		.loc 1 1380 0
 3151 0eea CA5F      		subi r28,lo8(-262)
 3152 0eec DE4F      		sbci r29,hi8(-262)
 3153 0eee 8881      		ld r24,Y
 3154 0ef0 9981      		ldd r25,Y+1
 3155 0ef2 AA81      		ldd r26,Y+2
 3156 0ef4 BB81      		ldd r27,Y+3
 3157 0ef6 C650      		subi r28,lo8(262)
 3158 0ef8 D140      		sbci r29,hi8(262)
 3159 0efa 0296      		adiw r24,2
 3160 0efc A11D      		adc r26,__zero_reg__
 3161 0efe B11D      		adc r27,__zero_reg__
 3162 0f00 CA5F      		subi r28,lo8(-262)
 3163 0f02 DE4F      		sbci r29,hi8(-262)
 3164 0f04 8883      		st Y,r24
 3165 0f06 9983      		std Y+1,r25
 3166 0f08 AA83      		std Y+2,r26
 3167 0f0a BB83      		std Y+3,r27
 3168 0f0c C650      		subi r28,lo8(262)
 3169 0f0e D140      		sbci r29,hi8(262)
1381:main.c        ****                 {
 3170               		.loc 1 1381 0
 3171 0f10 40E0      		ldi r20,0
 3172 0f12 BE01      		movw r22,r28
 3173 0f14 6A5F      		subi r22,-6
 3174 0f16 7E4F      		sbci r23,-2
 3175 0f18 C701      		movw r24,r14
 3176 0f1a 0E94 0000 		call fat_seek_file
 3177               	.LVL251:
 3178 0f1e 8823      		tst r24
 3179 0f20 01F4      		brne .+2
 3180 0f22 00C0      		rjmp .L143
1383:main.c        ****                 }
 3181               		.loc 1 1383 0
 3182 0f24 D801      		movw r26,r16
 3183 0f26 4D91      		ld r20,X+
 3184 0f28 5C91      		ld r21,X
 3185 0f2a B501      		movw r22,r10
 3186 0f2c C701      		movw r24,r14
 3187 0f2e 0E94 0000 		call fat_write_file
 3188               	.LVL252:
 3189 0f32 00C0      		rjmp .L143
 3190               	.LVL253:
 3191               	.L146:
1392:main.c        ****             P = track_buffer;
 3192               		.loc 1 1392 0
 3193 0f34 C42E      		mov r12,r20
 3194 0f36 D12C      		mov r13,__zero_reg__
 3195 0f38 F601      		movw r30,r12
 3196 0f3a EE0F      		lsl r30
 3197 0f3c FF1F      		rol r31
 3198 0f3e EE0F      		lsl r30
 3199 0f40 FF1F      		rol r31
 3200 0f42 E050      		subi r30,lo8(-(d64_track_offset))
 3201 0f44 F040      		sbci r31,hi8(-(d64_track_offset))
 3202 0f46 8081      		ld r24,Z
 3203 0f48 9181      		ldd r25,Z+1
 3204 0f4a A281      		ldd r26,Z+2
 3205 0f4c B381      		ldd r27,Z+3
 3206 0f4e CA5F      		subi r28,lo8(-262)
 3207 0f50 DE4F      		sbci r29,hi8(-262)
 3208 0f52 8883      		st Y,r24
 3209 0f54 9983      		std Y+1,r25
 3210 0f56 AA83      		std Y+2,r26
 3211 0f58 BB83      		std Y+3,r27
 3212 0f5a C650      		subi r28,lo8(262)
 3213 0f5c D140      		sbci r29,hi8(262)
 3214               	.LVL254:
1395:main.c        ****             {
 3215               		.loc 1 1395 0
 3216 0f5e 40E0      		ldi r20,0
 3217               	.LVL255:
 3218 0f60 BE01      		movw r22,r28
 3219               	.LVL256:
 3220 0f62 6A5F      		subi r22,-6
 3221 0f64 7E4F      		sbci r23,-2
 3222 0f66 C701      		movw r24,r14
 3223 0f68 0E94 0000 		call fat_seek_file
 3224               	.LVL257:
 3225 0f6c 8823      		tst r24
 3226 0f6e 01F4      		brne .+2
 3227 0f70 00C0      		rjmp .L143
 3228 0f72 00E0      		ldi r16,0
 3229 0f74 10E0      		ldi r17,0
 3230               	.LVL258:
 3231               	.LBB137:
1397:main.c        ****                 {
 3232               		.loc 1 1397 0 discriminator 1
 3233 0f76 F601      		movw r30,r12
 3234 0f78 E050      		subi r30,lo8(-(d64_sector_count))
 3235 0f7a F040      		sbci r31,hi8(-(d64_sector_count))
 3236 0f7c C080      		ld r12,Z
 3237               	.LVL259:
 3238 0f7e D12C      		mov r13,__zero_reg__
 3239               	.LVL260:
 3240               	.L149:
 3241 0f80 0C15      		cp r16,r12
 3242 0f82 1D05      		cpc r17,r13
 3243 0f84 04F0      		brlt .+2
 3244 0f86 00C0      		rjmp .L143
 3245 0f88 D501      		movw r26,r10
 3246               	.LVL261:
 3247               	.L154:
 3248 0f8a FD01      		movw r30,r26
 3249               	.LVL262:
 3250 0f8c 1196      		adiw r26,1
 3251               	.LVL263:
1400:main.c        ****                     P+=2;
 3252               		.loc 1 1400 0 discriminator 1
 3253 0f8e 8081      		ld r24,Z
 3254 0f90 8F3F      		cpi r24,lo8(-1)
 3255 0f92 01F4      		brne .L154
1400:main.c        ****                     P+=2;
 3256               		.loc 1 1400 0 is_stmt 0 discriminator 3
 3257 0f94 8C91      		ld r24,X
 3258 0f96 8F3F      		cpi r24,lo8(-1)
 3259 0f98 01F4      		brne .L154
1400:main.c        ****                     P+=2;
 3260               		.loc 1 1400 0 discriminator 5
 3261 0f9a 1196      		adiw r26,1
 3262 0f9c 8C91      		ld r24,X
 3263 0f9e 1197      		sbiw r26,1
 3264 0fa0 8235      		cpi r24,lo8(82)
 3265 0fa2 01F4      		brne .L154
 3266               	.LVL264:
 3267 0fa4 3296      		adiw r30,2
 3268               	.LVL265:
 3269               	.L151:
 3270 0fa6 9F01      		movw r18,r30
 3271               	.LVL266:
 3272 0fa8 AF01      		movw r20,r30
 3273 0faa 4F5F      		subi r20,-1
 3274 0fac 5F4F      		sbci r21,-1
1403:main.c        ****                     ++P;
 3275               		.loc 1 1403 0 is_stmt 1 discriminator 1
 3276 0fae 8081      		ld r24,Z
 3277 0fb0 8F3F      		cpi r24,lo8(-1)
 3278 0fb2 01F0      		breq .L165
 3279               	.L152:
 3280               	.LBE137:
 3281 0fb4 FA01      		movw r30,r20
 3282 0fb6 00C0      		rjmp .L151
 3283               	.L165:
 3284               	.LBB141:
1403:main.c        ****                     ++P;
 3285               		.loc 1 1403 0 is_stmt 0 discriminator 3
 3286 0fb8 8181      		ldd r24,Z+1
 3287 0fba 8535      		cpi r24,lo8(85)
 3288 0fbc 01F4      		brne .L152
 3289               	.LVL267:
 3290 0fbe CE01      		movw r24,r28
 3291 0fc0 0196      		adiw r24,1
 3292 0fc2 4C5B      		subi r20,-68
 3293 0fc4 5E4F      		sbci r21,-2
 3294               	.LVL268:
 3295               	.L153:
 3296               	.LBB138:
 3297               	.LBB139:
 3298               	.LBB140:
1455:main.c        **** }
1456:main.c        **** 
1457:main.c        **** /////////////////////////////////////////////////////////////////////
1458:main.c        **** 
1459:main.c        **** inline void ConvertFromGCR(uint8_t *source_buffer, uint8_t *destination_buffer)
1460:main.c        **** {
1461:main.c        ****     // 5 GCR in ... 4 Bytes (8 Nibbles A-H) out
1462:main.c        **** 
1463:main.c        ****     /*
1464:main.c        ****         AAAAABBB BBCCCCCD DDDDEEEE EFFFFFGG GGGHHHHH
1465:main.c        **** 
1466:main.c        ****         new approach similar to LFT GCR decoding..
1467:main.c        ****         usage of a big table 4 unshifted keys. combined upper and lower
1468:main.c        ****         fook42.
1469:main.c        ****     */
1470:main.c        **** 
1471:main.c        ****     const static uint8_t GCR_DEC_TBL[] = {
1472:main.c        ****         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x28,0x00,0x61,0x00,0xAC,0x04,0xE5,
1473:main.c        ****         0x00,0x00,0x82,0x03,0x00,0x0F,0x16,0x07,0x00,0x09,0xCA,0x0B,0x40,0x0D,0x5E,0x00,
1474:main.c        ****         0x00,0x82,0x00,0x90,0x28,0x00,0x30,0x00,0x00,0x00,0xF0,0x00,0x61,0x00,0x70,0x00,
1475:main.c        ****         0x00,0x03,0x90,0x00,0xAC,0x00,0xB0,0x00,0x04,0x00,0xD0,0x00,0xE5,0x00,0x00,0x00,
1476:main.c        ****         0x00,0x00,0x28,0xAC,0x00,0x0F,0x09,0x0D,0x82,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
1477:main.c        ****         0x00,0x0F,0x00,0x00,0x0F,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
1478:main.c        ****         0x00,0x16,0x30,0xB0,0x09,0x00,0x00,0x00,0xCA,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,
1479:main.c        ****         0x40,0x07,0x00,0x00,0x0D,0x00,0x00,0x00,0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1480:main.c        ****         0x00,0x00,0x00,0x04,0x82,0x16,0xCA,0x5E,0x00,0x30,0xF0,0x70,0x90,0xB0,0xD0,0x00,
1481:main.c        ****         0x28,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1482:main.c        ****         0x00,0xCA,0xF0,0xD0,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1483:main.c        ****         0x61,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1484:main.c        ****         0x00,0x40,0x61,0xE5,0x03,0x07,0x0B,0x00,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1485:main.c        ****         0xAC,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1486:main.c        ****         0x04,0x5E,0x70,0x00,0x00,0x00,0x00,0x00,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1487:main.c        ****         0xE5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
1488:main.c        **** 
1489:main.c        ****     uint8_t v;
1490:main.c        **** 
1491:main.c        ****     uint8_t* pneu = source_buffer;
1492:main.c        **** 
1493:main.c        ****     // AAAAA--- -----BBB_BB------
1494:main.c        ****     v = (*pneu++)&0x07;
 3299               		.loc 1 1494 0 is_stmt 1 discriminator 3
 3300 0fc6 6181      		ldd r22,Z+1
 3301               	.LVL269:
1495:main.c        ****     v |= (*pneu)&0xC0;
 3302               		.loc 1 1495 0 discriminator 3
 3303 0fc8 A280      		ldd r10,Z+2
 3304 0fca BA2D      		mov r27,r10
 3305 0fcc B07C      		andi r27,lo8(-64)
 3306 0fce 762F      		mov r23,r22
 3307 0fd0 7770      		andi r23,lo8(7)
 3308               	.LVL270:
 3309 0fd2 9B2E      		mov r9,r27
 3310 0fd4 972A      		or r9,r23
 3311               	.LVL271:
1496:main.c        ****     *destination_buffer++ = (uint8_t) ( (GCR_DEC_TBL[*source_buffer & 0xF8] & 0xF0) | (GCR_DEC_TBL[
 3312               		.loc 1 1496 0 discriminator 3
 3313 0fd6 687F      		andi r22,lo8(-8)
 3314 0fd8 70E0      		ldi r23,0
 3315 0fda 6050      		subi r22,lo8(-(GCR_DEC_TBL.3032))
 3316 0fdc 7040      		sbci r23,hi8(-(GCR_DEC_TBL.3032))
 3317 0fde DB01      		movw r26,r22
 3318 0fe0 6C91      		ld r22,X
 3319 0fe2 607F      		andi r22,lo8(-16)
 3320 0fe4 B62E      		mov r11,r22
 3321 0fe6 692D      		mov r22,r9
 3322 0fe8 70E0      		ldi r23,0
 3323 0fea 6050      		subi r22,lo8(-(GCR_DEC_TBL.3032))
 3324 0fec 7040      		sbci r23,hi8(-(GCR_DEC_TBL.3032))
 3325 0fee DB01      		movw r26,r22
 3326 0ff0 6C91      		ld r22,X
 3327 0ff2 6F70      		andi r22,lo8(15)
 3328 0ff4 6B29      		or r22,r11
 3329 0ff6 DC01      		movw r26,r24
 3330 0ff8 6C93      		st X,r22
 3331               	.LVL272:
1497:main.c        **** 
1498:main.c        ****     // --CCCCC- -------D_DDDD----
1499:main.c        ****     source_buffer = pneu;
1500:main.c        ****     v = (*pneu++)&0x01;
1501:main.c        ****     v |= (*pneu)&0xF0;
 3332               		.loc 1 1501 0 discriminator 3
 3333 0ffa 6381      		ldd r22,Z+3
 3334 0ffc B62F      		mov r27,r22
 3335 0ffe B07F      		andi r27,lo8(-16)
 3336 1000 7A2D      		mov r23,r10
 3337 1002 7170      		andi r23,lo8(1)
 3338               	.LVL273:
 3339 1004 7B2B      		or r23,r27
 3340               	.LVL274:
1502:main.c        **** 
1503:main.c        ****     *destination_buffer++ = (uint8_t) ( (GCR_DEC_TBL[*source_buffer & 0x3E] & 0xF0) | ( GCR_DEC_TBL
 3341               		.loc 1 1503 0 discriminator 3
 3342 1006 AA2D      		mov r26,r10
 3343 1008 AE73      		andi r26,lo8(62)
 3344 100a B0E0      		ldi r27,0
 3345 100c A050      		subi r26,lo8(-(GCR_DEC_TBL.3032))
 3346 100e B040      		sbci r27,hi8(-(GCR_DEC_TBL.3032))
 3347 1010 AC91      		ld r26,X
 3348 1012 A07F      		andi r26,lo8(-16)
 3349 1014 BA2E      		mov r11,r26
 3350 1016 A72F      		mov r26,r23
 3351 1018 B0E0      		ldi r27,0
 3352 101a A050      		subi r26,lo8(-(GCR_DEC_TBL.3032))
 3353 101c B040      		sbci r27,hi8(-(GCR_DEC_TBL.3032))
 3354 101e 7C91      		ld r23,X
 3355               	.LVL275:
 3356 1020 7F70      		andi r23,lo8(15)
 3357 1022 7B29      		or r23,r11
 3358 1024 DC01      		movw r26,r24
 3359 1026 1196      		adiw r26,1
 3360 1028 7C93      		st X,r23
 3361               	.LVL276:
1504:main.c        **** 
1505:main.c        ****     // ----EEEE_E------- -FFFFF--
1506:main.c        ****     v = (*pneu++)&0x0F;
1507:main.c        ****     v |= (*pneu)&0x80;
 3362               		.loc 1 1507 0 discriminator 3
 3363 102a 9480      		ldd r9,Z+4
 3364 102c 792D      		mov r23,r9
 3365 102e 7078      		andi r23,lo8(-128)
 3366 1030 6F70      		andi r22,lo8(15)
 3367               	.LVL277:
 3368 1032 862E      		mov r8,r22
 3369 1034 872A      		or r8,r23
 3370               	.LVL278:
1508:main.c        **** 
1509:main.c        ****     *destination_buffer++ = (uint8_t) ( (GCR_DEC_TBL[v] & 0xF0) | (GCR_DEC_TBL[(*pneu) & 0x7C] & 0x
 3371               		.loc 1 1509 0 discriminator 3
 3372 1036 792D      		mov r23,r9
 3373 1038 7C77      		andi r23,lo8(124)
 3374 103a A72E      		mov r10,r23
 3375 103c B12C      		mov r11,__zero_reg__
 3376 103e B501      		movw r22,r10
 3377 1040 6050      		subi r22,lo8(-(GCR_DEC_TBL.3032))
 3378 1042 7040      		sbci r23,hi8(-(GCR_DEC_TBL.3032))
 3379 1044 DB01      		movw r26,r22
 3380 1046 6C91      		ld r22,X
 3381 1048 6F70      		andi r22,lo8(15)
 3382 104a B62E      		mov r11,r22
 3383 104c 682D      		mov r22,r8
 3384 104e 70E0      		ldi r23,0
 3385 1050 6050      		subi r22,lo8(-(GCR_DEC_TBL.3032))
 3386 1052 7040      		sbci r23,hi8(-(GCR_DEC_TBL.3032))
 3387 1054 DB01      		movw r26,r22
 3388 1056 6C91      		ld r22,X
 3389 1058 607F      		andi r22,lo8(-16)
 3390 105a 6B29      		or r22,r11
 3391 105c DC01      		movw r26,r24
 3392 105e 1296      		adiw r26,2
 3393 1060 6C93      		st X,r22
 3394               	.LVL279:
1510:main.c        **** 
1511:main.c        ****     // ------GG_GGG----- ---HHHHH
1512:main.c        ****     v = (*pneu++)&0x03;
1513:main.c        ****     v |= (*pneu)&0xE0;
 3395               		.loc 1 1513 0 discriminator 3
 3396 1062 6581      		ldd r22,Z+5
 3397 1064 762F      		mov r23,r22
 3398 1066 707E      		andi r23,lo8(-32)
 3399 1068 A92D      		mov r26,r9
 3400 106a A370      		andi r26,lo8(3)
 3401               	.LVL280:
 3402 106c BA2E      		mov r11,r26
 3403 106e B72A      		or r11,r23
 3404               	.LVL281:
1514:main.c        **** 
1515:main.c        ****     *destination_buffer   = (uint8_t) ( (GCR_DEC_TBL[v] & 0xF0) | (GCR_DEC_TBL[(*pneu) & 0x1F] & 0x
 3405               		.loc 1 1515 0 discriminator 3
 3406 1070 6F71      		andi r22,lo8(31)
 3407 1072 70E0      		ldi r23,0
 3408 1074 6050      		subi r22,lo8(-(GCR_DEC_TBL.3032))
 3409 1076 7040      		sbci r23,hi8(-(GCR_DEC_TBL.3032))
 3410 1078 DB01      		movw r26,r22
 3411 107a 6C91      		ld r22,X
 3412 107c 762F      		mov r23,r22
 3413 107e 7F70      		andi r23,lo8(15)
 3414 1080 AB2D      		mov r26,r11
 3415 1082 B0E0      		ldi r27,0
 3416 1084 A050      		subi r26,lo8(-(GCR_DEC_TBL.3032))
 3417 1086 B040      		sbci r27,hi8(-(GCR_DEC_TBL.3032))
 3418 1088 6C91      		ld r22,X
 3419 108a 607F      		andi r22,lo8(-16)
 3420 108c 672B      		or r22,r23
 3421 108e DC01      		movw r26,r24
 3422 1090 1396      		adiw r26,3
 3423 1092 6C93      		st X,r22
 3424               	.LVL282:
 3425 1094 3596      		adiw r30,5
 3426               	.LVL283:
 3427 1096 0496      		adiw r24,4
 3428               	.LBE140:
 3429               	.LBE139:
1406:main.c        ****                     {
 3430               		.loc 1 1406 0 discriminator 3
 3431 1098 4E17      		cp r20,r30
 3432 109a 5F07      		cpc r21,r31
 3433 109c 01F0      		breq .+2
 3434 109e 00C0      		rjmp .L153
 3435 10a0 5901      		movw r10,r18
 3436 10a2 BAEB      		ldi r27,-70
 3437 10a4 AB1A      		sub r10,r27
 3438 10a6 BEEF      		ldi r27,-2
 3439 10a8 BB0A      		sbc r11,r27
 3440               	.LBE138:
1411:main.c        ****                 }
 3441               		.loc 1 1411 0 discriminator 2
 3442 10aa 40E0      		ldi r20,0
 3443 10ac 51E0      		ldi r21,lo8(1)
 3444 10ae BE01      		movw r22,r28
 3445 10b0 6E5F      		subi r22,-2
 3446 10b2 7F4F      		sbci r23,-1
 3447 10b4 C701      		movw r24,r14
 3448 10b6 0E94 0000 		call fat_write_file
 3449               	.LVL284:
1397:main.c        ****                 {
 3450               		.loc 1 1397 0 discriminator 2
 3451 10ba 0F5F      		subi r16,-1
 3452 10bc 1F4F      		sbci r17,-1
 3453               	.LVL285:
 3454 10be 00C0      		rjmp .L149
 3455               	.LVL286:
 3456               	.L143:
 3457               	/* epilogue start */
 3458               	.LBE141:
1417:main.c        **** 
 3459               		.loc 1 1417 0
 3460 10c0 C75F      		subi r28,-9
 3461 10c2 DE4F      		sbci r29,-2
 3462 10c4 0FB6      		in __tmp_reg__,__SREG__
 3463 10c6 F894      		cli
 3464 10c8 DEBF      		out __SP_H__,r29
 3465 10ca 0FBE      		out __SREG__,__tmp_reg__
 3466 10cc CDBF      		out __SP_L__,r28
 3467 10ce DF91      		pop r29
 3468 10d0 CF91      		pop r28
 3469 10d2 1F91      		pop r17
 3470 10d4 0F91      		pop r16
 3471 10d6 FF90      		pop r15
 3472 10d8 EF90      		pop r14
 3473               	.LVL287:
 3474 10da DF90      		pop r13
 3475 10dc CF90      		pop r12
 3476 10de BF90      		pop r11
 3477 10e0 AF90      		pop r10
 3478 10e2 9F90      		pop r9
 3479 10e4 8F90      		pop r8
 3480 10e6 0895      		ret
 3481               		.cfi_endproc
 3482               	.LFE47:
 3484               	.global	check_stepper_signals
 3486               	check_stepper_signals:
 3487               	.LFB10:
 211:main.c        ****     // Auf Steppermotor aktivität prüfen
 3488               		.loc 1 211 0
 3489               		.cfi_startproc
 3490 10e8 0F93      		push r16
 3491               	.LCFI73:
 3492               		.cfi_def_cfa_offset 3
 3493               		.cfi_offset 16, -2
 3494 10ea 1F93      		push r17
 3495               	.LCFI74:
 3496               		.cfi_def_cfa_offset 4
 3497               		.cfi_offset 17, -3
 3498               	/* prologue: function */
 3499               	/* frame size = 0 */
 3500               	/* stack size = 2 */
 3501               	.L__stack_usage = 2
 214:main.c        ****     {
 3502               		.loc 1 214 0
 3503 10ec 9091 0000 		lds r25,stepper_signal_r_pos
 3504 10f0 8091 0000 		lds r24,stepper_signal_w_pos
 3505 10f4 9817      		cp r25,r24
 3506 10f6 01F0      		breq .L167
 3507               	.LBB142:
 216:main.c        ****             stepper_signal_r_pos++;
 3508               		.loc 1 216 0
 3509 10f8 A091 0000 		lds r26,stepper_signal_r_pos
 3510 10fc E091 0000 		lds r30,stepper_signal_r_pos
 3511 1100 B0E0      		ldi r27,0
 3512 1102 A050      		subi r26,lo8(-(stepper_signal_puffer))
 3513 1104 B040      		sbci r27,hi8(-(stepper_signal_puffer))
 3514 1106 8C91      		ld r24,X
 3515 1108 8695      		lsr r24
 3516 110a 8695      		lsr r24
 3517 110c F0E0      		ldi r31,0
 3518 110e E050      		subi r30,lo8(-(stepper_signal_puffer-1))
 3519 1110 F040      		sbci r31,hi8(-(stepper_signal_puffer-1))
 3520 1112 9081      		ld r25,Z
 3521 1114 892B      		or r24,r25
 3522               	.LVL288:
 217:main.c        **** 
 3523               		.loc 1 217 0
 3524 1116 9091 0000 		lds r25,stepper_signal_r_pos
 3525 111a 9F5F      		subi r25,lo8(-(1))
 3526 111c 9093 0000 		sts stepper_signal_r_pos,r25
 219:main.c        ****         {
 3527               		.loc 1 219 0
 3528 1120 8036      		cpi r24,lo8(96)
 3529 1122 01F0      		breq .L169
 3530 1124 00F4      		brsh .L170
 3531 1126 8033      		cpi r24,lo8(48)
 3532 1128 01F0      		breq .L171
 3533 112a 8034      		cpi r24,lo8(64)
 3534 112c 01F0      		breq .L171
 3535 112e 8031      		cpi r24,lo8(16)
 3536 1130 01F0      		breq .+2
 3537 1132 00C0      		rjmp .L166
 3538 1134 00C0      		rjmp .L169
 3539               	.L170:
 3540 1136 803B      		cpi r24,lo8(-80)
 3541 1138 01F0      		breq .L169
 3542 113a 00F4      		brsh .L172
 3543 113c 8039      		cpi r24,lo8(-112)
 3544 113e 01F0      		breq .L171
 3545 1140 00C0      		rjmp .L166
 3546               	.L172:
 3547 1142 803C      		cpi r24,lo8(-64)
 3548 1144 01F0      		breq .L169
 3549 1146 803E      		cpi r24,lo8(-32)
 3550 1148 01F0      		breq .+2
 3551 114a 00C0      		rjmp .L166
 3552               	.L171:
 223:main.c        ****             stepper_signal_time = 0;
 3553               		.loc 1 223 0
 3554 114c 0E94 0000 		call stepper_dec
 3555               	.LVL289:
 3556 1150 00C0      		rjmp .L201
 3557               	.LVL290:
 3558               	.L169:
 230:main.c        ****             stepper_signal_time = 0;
 3559               		.loc 1 230 0
 3560 1152 0E94 0000 		call stepper_inc
 3561               	.LVL291:
 3562               	.L201:
 231:main.c        ****             stepper_signal = 1;
 3563               		.loc 1 231 0
 3564 1156 1092 0000 		sts stepper_signal_time,__zero_reg__
 232:main.c        ****         break;
 3565               		.loc 1 232 0
 3566 115a 81E0      		ldi r24,lo8(1)
 3567 115c 8093 0000 		sts stepper_signal,r24
 233:main.c        ****         }
 3568               		.loc 1 233 0
 3569 1160 00C0      		rjmp .L166
 3570               	.L167:
 3571               	.LBE142:
 236:main.c        ****     {
 3572               		.loc 1 236 0
 3573 1162 8091 0000 		lds r24,stepper_signal
 3574 1166 8823      		tst r24
 3575 1168 01F4      		brne .+2
 3576 116a 00C0      		rjmp .L166
 236:main.c        ****     {
 3577               		.loc 1 236 0 is_stmt 0 discriminator 1
 3578 116c 8091 0000 		lds r24,stepper_signal_time
 3579 1170 813C      		cpi r24,lo8(-63)
 3580 1172 00F4      		brsh .+2
 3581 1174 00C0      		rjmp .L166
 238:main.c        **** 
 3582               		.loc 1 238 0 is_stmt 1
 3583 1176 1092 0000 		sts stepper_signal,__zero_reg__
 240:main.c        ****         {
 3584               		.loc 1 240 0
 3585 117a 8091 0000 		lds r24,akt_half_track
 3586 117e 80FD      		sbrc r24,0
 3587 1180 00C0      		rjmp .L166
 242:main.c        **** 
 3588               		.loc 1 242 0
 3589 1182 0E94 0000 		call stop_timer0
 3590               	.LVL292:
 245:main.c        ****             akt_track_pos = 0;
 3591               		.loc 1 245 0
 3592 1186 E091 0000 		lds r30,akt_half_track
 3593 118a E695      		lsr r30
 3594 118c F0E0      		ldi r31,0
 3595 118e E050      		subi r30,lo8(-(d64_track_zone))
 3596 1190 F040      		sbci r31,hi8(-(d64_track_zone))
 3597 1192 E081      		ld r30,Z
 3598 1194 F0E0      		ldi r31,0
 3599 1196 E050      		subi r30,lo8(-(timer0_orca0))
 3600 1198 F040      		sbci r31,hi8(-(timer0_orca0))
 3601 119a 8081      		ld r24,Z
 3602 119c 87BD      		out 0x27,r24
 246:main.c        **** 
 3603               		.loc 1 246 0
 3604 119e 1092 0000 		sts akt_track_pos+1,__zero_reg__
 3605 11a2 1092 0000 		sts akt_track_pos,__zero_reg__
 248:main.c        ****             {
 3606               		.loc 1 248 0
 3607 11a6 2091 0000 		lds r18,track_is_written
 3608 11aa 8091 0000 		lds r24,fd
 3609 11ae 9091 0000 		lds r25,fd+1
 3610 11b2 2130      		cpi r18,lo8(1)
 3611 11b4 01F4      		brne .L175
 250:main.c        **** 
 3612               		.loc 1 250 0
 3613 11b6 2093 0000 		sts no_byte_ready_send,r18
 252:main.c        ****                 write_disk_track(fd,akt_image_type,old_half_track>>1,gcr_track, &gcr_track_length);
 3614               		.loc 1 252 0
 3615 11ba 1092 0000 		sts track_is_written,__zero_reg__
 253:main.c        **** 
 3616               		.loc 1 253 0
 3617 11be 4091 0000 		lds r20,old_half_track
 3618 11c2 4695      		lsr r20
 3619 11c4 00E0      		ldi r16,lo8(gcr_track_length)
 3620 11c6 10E0      		ldi r17,hi8(gcr_track_length)
 3621 11c8 20E0      		ldi r18,lo8(gcr_track)
 3622 11ca 30E0      		ldi r19,hi8(gcr_track)
 3623 11cc 6091 0000 		lds r22,akt_image_type
 3624 11d0 0E94 0000 		call write_disk_track
 3625               	.LVL293:
 255:main.c        ****                 old_half_track = akt_half_track;    // Merken um evtl. dort zurück zu schreiben
 3626               		.loc 1 255 0
 3627 11d4 4091 0000 		lds r20,akt_half_track
 3628 11d8 4695      		lsr r20
 3629 11da 20E0      		ldi r18,lo8(gcr_track)
 3630 11dc 30E0      		ldi r19,hi8(gcr_track)
 3631 11de 6091 0000 		lds r22,akt_image_type
 3632 11e2 8091 0000 		lds r24,fd
 3633 11e6 9091 0000 		lds r25,fd+1
 3634 11ea 0E94 0000 		call read_disk_track
 3635               	.LVL294:
 256:main.c        **** 
 3636               		.loc 1 256 0
 3637 11ee 8091 0000 		lds r24,akt_half_track
 3638 11f2 8093 0000 		sts old_half_track,r24
 258:main.c        ****             }
 3639               		.loc 1 258 0
 3640 11f6 1092 0000 		sts no_byte_ready_send,__zero_reg__
 3641 11fa 00C0      		rjmp .L176
 3642               	.L175:
 262:main.c        ****                 old_half_track = akt_half_track;    // Merken um evtl. dort zurück zu schreiben
 3643               		.loc 1 262 0
 3644 11fc 4091 0000 		lds r20,akt_half_track
 3645 1200 4695      		lsr r20
 3646 1202 00E0      		ldi r16,lo8(gcr_track_length)
 3647 1204 10E0      		ldi r17,hi8(gcr_track_length)
 3648 1206 20E0      		ldi r18,lo8(gcr_track)
 3649 1208 30E0      		ldi r19,hi8(gcr_track)
 3650 120a 6091 0000 		lds r22,akt_image_type
 3651 120e 0E94 0000 		call read_disk_track
 3652               	.LVL295:
 263:main.c        ****             }
 3653               		.loc 1 263 0
 3654 1212 8091 0000 		lds r24,akt_half_track
 3655 1216 8093 0000 		sts old_half_track,r24
 3656               	.L176:
 3657               	/* epilogue start */
 268:main.c        **** 
 3658               		.loc 1 268 0
 3659 121a 1F91      		pop r17
 3660 121c 0F91      		pop r16
 265:main.c        ****         }
 3661               		.loc 1 265 0
 3662 121e 0C94 0000 		jmp start_timer0
 3663               	.LVL296:
 3664               	.L166:
 3665               	/* epilogue start */
 268:main.c        **** 
 3666               		.loc 1 268 0
 3667 1222 1F91      		pop r17
 3668 1224 0F91      		pop r16
 3669 1226 0895      		ret
 3670               		.cfi_endproc
 3671               	.LFE10:
 3673               	.global	check_motor_signal
 3675               	check_motor_signal:
 3676               	.LFB11:
 273:main.c        ****     if(!get_motor_status())
 3677               		.loc 1 273 0
 3678               		.cfi_startproc
 3679 1228 0F93      		push r16
 3680               	.LCFI75:
 3681               		.cfi_def_cfa_offset 3
 3682               		.cfi_offset 16, -2
 3683 122a 1F93      		push r17
 3684               	.LCFI76:
 3685               		.cfi_def_cfa_offset 4
 3686               		.cfi_offset 17, -3
 3687 122c CF93      		push r28
 3688               	.LCFI77:
 3689               		.cfi_def_cfa_offset 5
 3690               		.cfi_offset 28, -4
 3691               	/* prologue: function */
 3692               	/* frame size = 0 */
 3693               	/* stack size = 3 */
 3694               	.L__stack_usage = 3
 274:main.c        ****     {
 3695               		.loc 1 274 0
 3696 122e 3299      		sbic 0x6,2
 3697 1230 00C0      		rjmp .L202
 277:main.c        ****         {
 3698               		.loc 1 277 0
 3699 1232 C091 0000 		lds r28,track_is_written
 3700 1236 C130      		cpi r28,lo8(1)
 3701 1238 01F4      		brne .L202
 3702               	.LBB145:
 3703               	.LBB146:
 279:main.c        ****             no_byte_ready_send = 1;
 3704               		.loc 1 279 0
 3705 123a 0E94 0000 		call stop_timer0
 3706               	.LVL297:
 280:main.c        ****             track_is_written = 0;
 3707               		.loc 1 280 0
 3708 123e C093 0000 		sts no_byte_ready_send,r28
 281:main.c        ****             write_disk_track(fd,akt_image_type,old_half_track>>1,gcr_track, &gcr_track_length);
 3709               		.loc 1 281 0
 3710 1242 1092 0000 		sts track_is_written,__zero_reg__
 282:main.c        ****             no_byte_ready_send = 0;
 3711               		.loc 1 282 0
 3712 1246 4091 0000 		lds r20,old_half_track
 3713 124a 4695      		lsr r20
 3714 124c 00E0      		ldi r16,lo8(gcr_track_length)
 3715 124e 10E0      		ldi r17,hi8(gcr_track_length)
 3716 1250 20E0      		ldi r18,lo8(gcr_track)
 3717 1252 30E0      		ldi r19,hi8(gcr_track)
 3718 1254 6091 0000 		lds r22,akt_image_type
 3719 1258 8091 0000 		lds r24,fd
 3720 125c 9091 0000 		lds r25,fd+1
 3721 1260 0E94 0000 		call write_disk_track
 3722               	.LVL298:
 283:main.c        ****             start_timer0();
 3723               		.loc 1 283 0
 3724 1264 1092 0000 		sts no_byte_ready_send,__zero_reg__
 3725               	/* epilogue start */
 3726               	.LBE146:
 3727               	.LBE145:
 287:main.c        **** 
 3728               		.loc 1 287 0
 3729 1268 CF91      		pop r28
 3730 126a 1F91      		pop r17
 3731 126c 0F91      		pop r16
 3732               	.LBB148:
 3733               	.LBB147:
 284:main.c        ****         }
 3734               		.loc 1 284 0
 3735 126e 0C94 0000 		jmp start_timer0
 3736               	.LVL299:
 3737               	.L202:
 3738               	/* epilogue start */
 3739               	.LBE147:
 3740               	.LBE148:
 287:main.c        **** 
 3741               		.loc 1 287 0
 3742 1272 CF91      		pop r28
 3743 1274 1F91      		pop r17
 3744 1276 0F91      		pop r16
 3745 1278 0895      		ret
 3746               		.cfi_endproc
 3747               	.LFE11:
 3749               	.global	set_write_protection
 3751               	set_write_protection:
 3752               	.LFB52:
1516:main.c        **** }
1517:main.c        **** 
1518:main.c        **** /////////////////////////////////////////////////////////////////////
1519:main.c        **** 
1520:main.c        **** ///
1521:main.c        **** /// \brief endable_wps_port
1522:main.c        **** /// \param enable 0 == disable (WPS PIN wird auf Eingang HiZ gestellt)
1523:main.c        **** ///               0 != enable  (WPS PIN wird auf Ausgang gestellt, WP wird aktiviert)
1524:main.c        **** ///
1525:main.c        **** void endable_wps_port(uint8_t enable)
1526:main.c        **** {
1527:main.c        ****     if(enable == 0)
1528:main.c        ****     {
1529:main.c        ****         // Pin auf HiZ
1530:main.c        ****         is_wps_pin_enable = 0;
1531:main.c        ****         WPS_DDR &= ~(1<<WPS);
1532:main.c        ****         WPS_PORT &= ~(1<<WPS);
1533:main.c        ****     }
1534:main.c        ****     else
1535:main.c        ****     {
1536:main.c        ****         is_wps_pin_enable = 1;
1537:main.c        ****         WPS_DDR |= 1<<WPS;
1538:main.c        ****         set_write_protection(1);
1539:main.c        ****     }
1540:main.c        **** }
1541:main.c        **** 
1542:main.c        **** /////////////////////////////////////////////////////////////////////
1543:main.c        **** 
1544:main.c        **** /////////////////////////////////////////////////////////////////////
1545:main.c        **** 
1546:main.c        **** void set_write_protection(int8_t wp)
1547:main.c        **** {
 3753               		.loc 1 1547 0
 3754               		.cfi_startproc
 3755               	.LVL300:
 3756               	/* prologue: function */
 3757               	/* frame size = 0 */
 3758               	/* stack size = 0 */
 3759               	.L__stack_usage = 0
1548:main.c        ****     if(is_wps_pin_enable == 0) return;
 3760               		.loc 1 1548 0
 3761 127a 9091 0000 		lds r25,is_wps_pin_enable
 3762 127e 9923      		tst r25
 3763 1280 01F0      		breq .L204
1549:main.c        **** 
1550:main.c        ****     floppy_wp = wp;
 3764               		.loc 1 1550 0
 3765 1282 8093 0000 		sts floppy_wp,r24
1551:main.c        **** 
1552:main.c        ****     if(wp == 0)
 3766               		.loc 1 1552 0
 3767 1286 8111      		cpse r24,__zero_reg__
 3768 1288 00C0      		rjmp .L206
 3769               	.LVL301:
 3770               	.LBB151:
 3771               	.LBB152:
1553:main.c        ****     {
1554:main.c        ****         set_wps();
 3772               		.loc 1 1554 0
 3773 128a 449A      		sbi 0x8,4
 3774 128c 0895      		ret
 3775               	.LVL302:
 3776               	.L206:
 3777               	.LBE152:
 3778               	.LBE151:
1555:main.c        ****     }
1556:main.c        ****     else
1557:main.c        ****     {
1558:main.c        ****         clear_wps();
 3779               		.loc 1 1558 0
 3780 128e 4498      		cbi 0x8,4
 3781               	.L204:
 3782 1290 0895      		ret
 3783               		.cfi_endproc
 3784               	.LFE52:
 3786               		.section	.rodata.str1.1
 3787               	.LC47:
 3788 01aa 2E67 3634 		.string	".g64"
 3788      00
 3789               	.LC48:
 3790 01af 2E64 3634 		.string	".d64"
 3790      00
 3791               		.text
 3792               	.global	open_disk_image
 3794               	open_disk_image:
 3795               	.LFB42:
1169:main.c        ****     if(strlen(file_entry->long_name) < 4) return NULL;
 3796               		.loc 1 1169 0
 3797               		.cfi_startproc
 3798               	.LVL303:
 3799 1292 AF92      		push r10
 3800               	.LCFI78:
 3801               		.cfi_def_cfa_offset 3
 3802               		.cfi_offset 10, -2
 3803 1294 BF92      		push r11
 3804               	.LCFI79:
 3805               		.cfi_def_cfa_offset 4
 3806               		.cfi_offset 11, -3
 3807 1296 CF92      		push r12
 3808               	.LCFI80:
 3809               		.cfi_def_cfa_offset 5
 3810               		.cfi_offset 12, -4
 3811 1298 DF92      		push r13
 3812               	.LCFI81:
 3813               		.cfi_def_cfa_offset 6
 3814               		.cfi_offset 13, -5
 3815 129a EF92      		push r14
 3816               	.LCFI82:
 3817               		.cfi_def_cfa_offset 7
 3818               		.cfi_offset 14, -6
 3819 129c FF92      		push r15
 3820               	.LCFI83:
 3821               		.cfi_def_cfa_offset 8
 3822               		.cfi_offset 15, -7
 3823 129e 0F93      		push r16
 3824               	.LCFI84:
 3825               		.cfi_def_cfa_offset 9
 3826               		.cfi_offset 16, -8
 3827 12a0 1F93      		push r17
 3828               	.LCFI85:
 3829               		.cfi_def_cfa_offset 10
 3830               		.cfi_offset 17, -9
 3831 12a2 CF93      		push r28
 3832               	.LCFI86:
 3833               		.cfi_def_cfa_offset 11
 3834               		.cfi_offset 28, -10
 3835 12a4 DF93      		push r29
 3836               	.LCFI87:
 3837               		.cfi_def_cfa_offset 12
 3838               		.cfi_offset 29, -11
 3839 12a6 00D0      		rcall .
 3840 12a8 00D0      		rcall .
 3841 12aa 1F92      		push __zero_reg__
 3842               	.LCFI88:
 3843               		.cfi_def_cfa_offset 17
 3844 12ac CDB7      		in r28,__SP_L__
 3845 12ae DEB7      		in r29,__SP_H__
 3846               	.LCFI89:
 3847               		.cfi_def_cfa_register 28
 3848               	/* prologue: function */
 3849               	/* frame size = 5 */
 3850               	/* stack size = 15 */
 3851               	.L__stack_usage = 15
1170:main.c        **** 
 3852               		.loc 1 1170 0
 3853 12b0 FB01      		movw r30,r22
 3854               		0:
 3855 12b2 0190      		ld __tmp_reg__,Z+
 3856 12b4 0020      		tst __tmp_reg__
 3857 12b6 01F4      		brne 0b
 3858 12b8 3197      		sbiw r30,1
 3859 12ba E61B      		sub r30,r22
 3860 12bc F70B      		sbc r31,r23
 3861 12be E430      		cpi r30,4
 3862 12c0 F105      		cpc r31,__zero_reg__
 3863 12c2 00F4      		brsh .+2
 3864 12c4 00C0      		rjmp .L217
 3865 12c6 8A01      		movw r16,r20
 3866 12c8 7B01      		movw r14,r22
 3867 12ca 6C01      		movw r12,r24
 3868               	.LVL304:
1177:main.c        **** 
 3869               		.loc 1 1177 0
 3870 12cc 3497      		sbiw r30,4
 3871 12ce 6E0F      		add r22,r30
 3872 12d0 7F1F      		adc r23,r31
 3873               	.LVL305:
 3874 12d2 CE01      		movw r24,r28
 3875               	.LVL306:
 3876 12d4 0196      		adiw r24,1
 3877 12d6 0E94 0000 		call strcpy
 3878               	.LVL307:
 3879 12da CE01      		movw r24,r28
 3880 12dc 0196      		adiw r24,1
 3881 12de 5C01      		movw r10,r24
 3882               	.LVL308:
 3883               	.L212:
1180:main.c        ****     {
 3884               		.loc 1 1180 0
 3885 12e0 F501      		movw r30,r10
 3886 12e2 8081      		ld r24,Z
 3887 12e4 8823      		tst r24
 3888 12e6 01F0      		breq .L220
1182:main.c        ****         i++;
 3889               		.loc 1 1182 0
 3890 12e8 90E0      		ldi r25,0
 3891 12ea 0E94 0000 		call tolower
 3892               	.LVL309:
 3893 12ee F501      		movw r30,r10
 3894 12f0 8193      		st Z+,r24
 3895 12f2 5F01      		movw r10,r30
 3896 12f4 00C0      		rjmp .L212
 3897               	.L220:
1186:main.c        ****     if(!fd)
 3898               		.loc 1 1186 0
 3899 12f6 B701      		movw r22,r14
 3900 12f8 C601      		movw r24,r12
 3901 12fa 0E94 0000 		call fat_open_file
 3902               	.LVL310:
 3903 12fe 7C01      		movw r14,r24
 3904               	.LVL311:
1187:main.c        ****     {
 3905               		.loc 1 1187 0
 3906 1300 892B      		or r24,r25
 3907 1302 01F0      		breq .L219
1193:main.c        ****     {
 3908               		.loc 1 1193 0
 3909 1304 60E0      		ldi r22,lo8(.LC47)
 3910 1306 70E0      		ldi r23,hi8(.LC47)
 3911 1308 CE01      		movw r24,r28
 3912 130a 0196      		adiw r24,1
 3913 130c 0E94 0000 		call strcmp
 3914               	.LVL312:
 3915 1310 892B      		or r24,r25
 3916 1312 01F4      		brne .L215
1196:main.c        ****         open_g64_image(fd);
 3917               		.loc 1 1196 0
 3918 1314 81E0      		ldi r24,lo8(1)
 3919 1316 F801      		movw r30,r16
 3920 1318 8083      		st Z,r24
 3921 131a 00C0      		rjmp .L218
 3922               	.L215:
1200:main.c        ****     {
 3923               		.loc 1 1200 0
 3924 131c 60E0      		ldi r22,lo8(.LC48)
 3925 131e 70E0      		ldi r23,hi8(.LC48)
 3926 1320 CE01      		movw r24,r28
 3927 1322 0196      		adiw r24,1
 3928 1324 0E94 0000 		call strcmp
 3929               	.LVL313:
 3930 1328 892B      		or r24,r25
 3931 132a 01F4      		brne .L216
1203:main.c        ****         open_d64_image(fd);
 3932               		.loc 1 1203 0
 3933 132c 82E0      		ldi r24,lo8(2)
 3934 132e F801      		movw r30,r16
 3935 1330 8083      		st Z,r24
1205:main.c        ****     }
 3936               		.loc 1 1205 0
 3937 1332 81E0      		ldi r24,lo8(1)
 3938               	.L218:
 3939 1334 0E94 0000 		call set_write_protection
 3940               	.LVL314:
 3941 1338 C701      		movw r24,r14
 3942 133a 00C0      		rjmp .L211
 3943               	.L216:
1210:main.c        ****         fd = NULL;
 3944               		.loc 1 1210 0
 3945 133c C701      		movw r24,r14
 3946 133e 0E94 0000 		call fat_close_file
 3947               	.LVL315:
 3948               	.L219:
1212:main.c        ****     }
 3949               		.loc 1 1212 0
 3950 1342 F801      		movw r30,r16
 3951 1344 1082      		st Z,__zero_reg__
 3952               	.LVL316:
 3953               	.L217:
1170:main.c        **** 
 3954               		.loc 1 1170 0
 3955 1346 80E0      		ldi r24,0
 3956 1348 90E0      		ldi r25,0
 3957               	.L211:
 3958               	/* epilogue start */
1216:main.c        **** 
 3959               		.loc 1 1216 0
 3960 134a 0F90      		pop __tmp_reg__
 3961 134c 0F90      		pop __tmp_reg__
 3962 134e 0F90      		pop __tmp_reg__
 3963 1350 0F90      		pop __tmp_reg__
 3964 1352 0F90      		pop __tmp_reg__
 3965 1354 DF91      		pop r29
 3966 1356 CF91      		pop r28
 3967 1358 1F91      		pop r17
 3968 135a 0F91      		pop r16
 3969 135c FF90      		pop r15
 3970 135e EF90      		pop r14
 3971 1360 DF90      		pop r13
 3972 1362 CF90      		pop r12
 3973 1364 BF90      		pop r11
 3974 1366 AF90      		pop r10
 3975 1368 0895      		ret
 3976               		.cfi_endproc
 3977               	.LFE42:
 3980               	endable_wps_port.part.6:
 3981               	.LFB63:
1525:main.c        **** {
 3982               		.loc 1 1525 0
 3983               		.cfi_startproc
 3984               	/* prologue: function */
 3985               	/* frame size = 0 */
 3986               	/* stack size = 0 */
 3987               	.L__stack_usage = 0
 3988               	.LVL317:
1536:main.c        ****         WPS_DDR |= 1<<WPS;
 3989               		.loc 1 1536 0
 3990 136a 81E0      		ldi r24,lo8(1)
 3991 136c 8093 0000 		sts is_wps_pin_enable,r24
1537:main.c        ****         set_write_protection(1);
 3992               		.loc 1 1537 0
 3993 1370 3C9A      		sbi 0x7,4
1538:main.c        ****     }
 3994               		.loc 1 1538 0
 3995 1372 0C94 0000 		jmp set_write_protection
 3996               	.LVL318:
 3997               		.cfi_endproc
 3998               	.LFE63:
 4000               	.global	endable_wps_port
 4002               	endable_wps_port:
 4003               	.LFB51:
1526:main.c        ****     if(enable == 0)
 4004               		.loc 1 1526 0
 4005               		.cfi_startproc
 4006               	.LVL319:
 4007               	/* prologue: function */
 4008               	/* frame size = 0 */
 4009               	/* stack size = 0 */
 4010               	.L__stack_usage = 0
1527:main.c        ****     {
 4011               		.loc 1 1527 0
 4012 1376 8111      		cpse r24,__zero_reg__
 4013 1378 00C0      		rjmp .L223
1530:main.c        ****         WPS_DDR &= ~(1<<WPS);
 4014               		.loc 1 1530 0
 4015 137a 1092 0000 		sts is_wps_pin_enable,__zero_reg__
1531:main.c        ****         WPS_PORT &= ~(1<<WPS);
 4016               		.loc 1 1531 0
 4017 137e 3C98      		cbi 0x7,4
1532:main.c        ****     }
 4018               		.loc 1 1532 0
 4019 1380 4498      		cbi 0x8,4
 4020 1382 0895      		ret
 4021               	.L223:
 4022 1384 0C94 0000 		jmp endable_wps_port.part.6
 4023               	.LVL320:
 4024               		.cfi_endproc
 4025               	.LFE51:
 4027               	.global	send_disk_change
 4029               	send_disk_change:
 4030               	.LFB53:
1559:main.c        ****     }
1560:main.c        **** }
1561:main.c        **** 
1562:main.c        **** /////////////////////////////////////////////////////////////////////
1563:main.c        **** 
1564:main.c        **** void send_disk_change(void)
1565:main.c        **** {
 4031               		.loc 1 1565 0
 4032               		.cfi_startproc
 4033               	/* prologue: function */
 4034               	/* frame size = 0 */
 4035               	/* stack size = 0 */
 4036               	.L__stack_usage = 0
1566:main.c        ****     if(floppy_wp == 0)
 4037               		.loc 1 1566 0
 4038 1388 8091 0000 		lds r24,floppy_wp
 4039 138c 8111      		cpse r24,__zero_reg__
 4040 138e 00C0      		rjmp .L227
 4041               	.LBB179:
1567:main.c        ****     {
1568:main.c        ****         clear_wps();
 4042               		.loc 1 1568 0
 4043 1390 4498      		cbi 0x8,4
 4044               	.LVL321:
 4045               	.LBB180:
 4046               	.LBB181:
 4047               		.loc 2 187 0
 4048 1392 8FE6      		ldi r24,lo8(5999)
 4049 1394 97E1      		ldi r25,hi8(5999)
 4050 1396 0197      	1:	sbiw r24,1
 4051 1398 01F4      		brne 1b
 4052 139a 00C0      		rjmp .
 4053 139c 0000      		nop
 4054               	.LVL322:
 4055               	.LBE181:
 4056               	.LBE180:
1569:main.c        ****         _delay_ms(1);
1570:main.c        ****         set_wps();
 4057               		.loc 1 1570 0
 4058 139e 449A      		sbi 0x8,4
 4059               	.LVL323:
 4060               	.LBB182:
 4061               	.LBB183:
 4062               		.loc 2 187 0
 4063 13a0 8FE6      		ldi r24,lo8(5999)
 4064 13a2 97E1      		ldi r25,hi8(5999)
 4065 13a4 0197      	1:	sbiw r24,1
 4066 13a6 01F4      		brne 1b
 4067 13a8 00C0      		rjmp .
 4068 13aa 0000      		nop
 4069               	.LVL324:
 4070               	.LBE183:
 4071               	.LBE182:
1571:main.c        ****         _delay_ms(1);
1572:main.c        ****         clear_wps();
 4072               		.loc 1 1572 0
 4073 13ac 4498      		cbi 0x8,4
 4074               	.LVL325:
 4075               	.LBB184:
 4076               	.LBB185:
 4077               		.loc 2 187 0
 4078 13ae 8FE6      		ldi r24,lo8(5999)
 4079 13b0 97E1      		ldi r25,hi8(5999)
 4080 13b2 0197      	1:	sbiw r24,1
 4081 13b4 01F4      		brne 1b
 4082 13b6 00C0      		rjmp .
 4083 13b8 0000      		nop
 4084               	.LVL326:
 4085               	.LBE185:
 4086               	.LBE184:
1573:main.c        ****         _delay_ms(1);
1574:main.c        ****         set_wps();
 4087               		.loc 1 1574 0
 4088 13ba 449A      		sbi 0x8,4
 4089 13bc 0895      		ret
 4090               	.L227:
 4091               	.LBE179:
1575:main.c        ****     }
1576:main.c        ****     else
1577:main.c        ****     {
1578:main.c        ****         set_wps();
 4092               		.loc 1 1578 0
 4093 13be 449A      		sbi 0x8,4
 4094               	.LVL327:
 4095               	.LBB186:
 4096               	.LBB187:
 4097               		.loc 2 187 0
 4098 13c0 8FE6      		ldi r24,lo8(5999)
 4099 13c2 97E1      		ldi r25,hi8(5999)
 4100 13c4 0197      	1:	sbiw r24,1
 4101 13c6 01F4      		brne 1b
 4102 13c8 00C0      		rjmp .
 4103 13ca 0000      		nop
 4104               	.LVL328:
 4105               	.LBE187:
 4106               	.LBE186:
1579:main.c        ****         _delay_ms(1);
1580:main.c        ****         clear_wps();
 4107               		.loc 1 1580 0
 4108 13cc 4498      		cbi 0x8,4
 4109               	.LVL329:
 4110               	.LBB188:
 4111               	.LBB189:
 4112               		.loc 2 187 0
 4113 13ce 8FE6      		ldi r24,lo8(5999)
 4114 13d0 97E1      		ldi r25,hi8(5999)
 4115 13d2 0197      	1:	sbiw r24,1
 4116 13d4 01F4      		brne 1b
 4117 13d6 00C0      		rjmp .
 4118 13d8 0000      		nop
 4119               	.LVL330:
 4120               	.LBE189:
 4121               	.LBE188:
1581:main.c        ****         _delay_ms(1);
1582:main.c        ****         set_wps();
 4122               		.loc 1 1582 0
 4123 13da 449A      		sbi 0x8,4
 4124               	.LVL331:
 4125               	.LBB190:
 4126               	.LBB191:
 4127               		.loc 2 187 0
 4128 13dc 8FE6      		ldi r24,lo8(5999)
 4129 13de 97E1      		ldi r25,hi8(5999)
 4130 13e0 0197      	1:	sbiw r24,1
 4131 13e2 01F4      		brne 1b
 4132 13e4 00C0      		rjmp .
 4133 13e6 0000      		nop
 4134               	.LVL332:
 4135               	.LBE191:
 4136               	.LBE190:
1583:main.c        ****         _delay_ms(1);
1584:main.c        ****         clear_wps();
 4137               		.loc 1 1584 0
 4138 13e8 4498      		cbi 0x8,4
 4139 13ea 0895      		ret
 4140               		.cfi_endproc
 4141               	.LFE53:
 4143               		.section	.rodata.str1.1
 4144               	.LC49:
 4145 01b4 4E6F 7420 		.string	"Not Supported Image!"
 4145      5375 7070 
 4145      6F72 7465 
 4145      6420 496D 
 4145      6167 6521 
 4146               		.text
 4147               	.global	filebrowser_update
 4149               	filebrowser_update:
 4150               	.LFB16:
 551:main.c        ****     uint16_t ret;
 4151               		.loc 1 551 0
 4152               		.cfi_startproc
 4153               	.LVL333:
 4154 13ec 0F93      		push r16
 4155               	.LCFI90:
 4156               		.cfi_def_cfa_offset 3
 4157               		.cfi_offset 16, -2
 4158 13ee 1F93      		push r17
 4159               	.LCFI91:
 4160               		.cfi_def_cfa_offset 4
 4161               		.cfi_offset 17, -3
 4162               	/* prologue: function */
 4163               	/* frame size = 0 */
 4164               	/* stack size = 2 */
 4165               	.L__stack_usage = 2
 555:main.c        ****     {
 4166               		.loc 1 555 0
 4167 13f0 8230      		cpi r24,lo8(2)
 4168 13f2 01F0      		breq .L231
 4169 13f4 00F4      		brsh .L232
 4170 13f6 8823      		tst r24
 4171 13f8 01F0      		breq .L233
 4172 13fa 00C0      		rjmp .L230
 4173               	.L232:
 4174 13fc 8530      		cpi r24,lo8(5)
 4175 13fe 01F0      		breq .L234
 4176 1400 8630      		cpi r24,lo8(6)
 4177 1402 01F0      		breq .+2
 4178 1404 00C0      		rjmp .L230
 4179               	.LVL334:
 4180               	.LBB192:
 4181               	.LBB193:
 487:main.c        ****     switch(gui_mode)
 4182               		.loc 1 487 0
 4183 1406 81E0      		ldi r24,lo8(1)
 4184               	.LVL335:
 4185 1408 8093 0000 		sts current_gui_mode,r24
 538:main.c        ****         break;
 4186               		.loc 1 538 0
 4187 140c 0E94 0000 		call menu_refresh
 4188               	.LVL336:
 4189 1410 00C0      		rjmp .L230
 4190               	.LVL337:
 4191               	.L233:
 4192               	.LBE193:
 4193               	.LBE192:
 558:main.c        ****         {
 4194               		.loc 1 558 0
 4195 1412 8091 0000 		lds r24,fb_lcd_cursor_pos
 4196               	.LVL338:
 4197 1416 8823      		tst r24
 4198 1418 01F0      		breq .L236
 560:main.c        ****             filebrowser_refresh();
 4199               		.loc 1 560 0
 4200 141a 8150      		subi r24,lo8(-(-1))
 4201 141c 00C0      		rjmp .L258
 4202               	.L236:
 565:main.c        ****             {
 4203               		.loc 1 565 0
 4204 141e 8091 0000 		lds r24,fb_lcd_window_pos
 4205 1422 8823      		tst r24
 4206 1424 01F4      		brne .+2
 4207 1426 00C0      		rjmp .L230
 567:main.c        ****                 filebrowser_refresh();
 4208               		.loc 1 567 0
 4209 1428 8150      		subi r24,lo8(-(-1))
 4210 142a 00C0      		rjmp .L257
 4211               	.LVL339:
 4212               	.L231:
 573:main.c        ****         {
 4213               		.loc 1 573 0
 4214 142c 8091 0000 		lds r24,fb_lcd_cursor_pos
 4215               	.LVL340:
 4216 1430 2091 0000 		lds r18,fb_dir_entry_count
 4217 1434 3091 0000 		lds r19,fb_dir_entry_count+1
 4218 1438 8330      		cpi r24,lo8(3)
 4219 143a 00F4      		brsh .L237
 573:main.c        ****         {
 4220               		.loc 1 573 0 is_stmt 0 discriminator 1
 4221 143c 482F      		mov r20,r24
 4222 143e 50E0      		ldi r21,0
 4223 1440 B901      		movw r22,r18
 4224 1442 6150      		subi r22,1
 4225 1444 7109      		sbc r23,__zero_reg__
 4226 1446 4617      		cp r20,r22
 4227 1448 5707      		cpc r21,r23
 4228 144a 00F4      		brsh .L237
 575:main.c        ****             filebrowser_refresh();
 4229               		.loc 1 575 0 is_stmt 1
 4230 144c 8F5F      		subi r24,lo8(-(1))
 4231               	.L258:
 4232 144e 8093 0000 		sts fb_lcd_cursor_pos,r24
 4233 1452 00C0      		rjmp .L256
 4234               	.L237:
 580:main.c        ****             {
 4235               		.loc 1 580 0
 4236 1454 8091 0000 		lds r24,fb_lcd_window_pos
 4237 1458 482F      		mov r20,r24
 4238 145a 50E0      		ldi r21,0
 4239 145c 2450      		subi r18,4
 4240 145e 3109      		sbc r19,__zero_reg__
 4241 1460 4217      		cp r20,r18
 4242 1462 5307      		cpc r21,r19
 4243 1464 00F0      		brlo .+2
 4244 1466 00C0      		rjmp .L230
 582:main.c        ****                 filebrowser_refresh();
 4245               		.loc 1 582 0
 4246 1468 8F5F      		subi r24,lo8(-(1))
 4247               	.L257:
 4248 146a 8093 0000 		sts fb_lcd_window_pos,r24
 4249               	.L256:
 583:main.c        ****             }
 4250               		.loc 1 583 0
 4251 146e 0E94 0000 		call filebrowser_refresh
 4252               	.LVL341:
 4253 1472 00C0      		rjmp .L230
 4254               	.LVL342:
 4255               	.L234:
 588:main.c        ****         no_byte_ready_send = 1;
 4256               		.loc 1 588 0
 4257 1474 0E94 0000 		call stop_timer0
 4258               	.LVL343:
 589:main.c        **** 
 4259               		.loc 1 589 0
 4260 1478 81E0      		ldi r24,lo8(1)
 4261 147a 8093 0000 		sts no_byte_ready_send,r24
 4262               	.LVL344:
 4263               	.LBB194:
 4264               	.LBB195:
1222:main.c        ****     fd = NULL;
 4265               		.loc 1 1222 0
 4266 147e 8091 0000 		lds r24,fd
 4267 1482 9091 0000 		lds r25,fd+1
 4268 1486 0E94 0000 		call fat_close_file
 4269               	.LVL345:
 4270               	.LBE195:
 4271               	.LBE194:
 593:main.c        ****         {
 4272               		.loc 1 593 0
 4273 148a 8091 0000 		lds r24,fb_lcd_cursor_pos
 4274 148e 21E3      		ldi r18,lo8(49)
 4275 1490 829F      		mul r24,r18
 4276 1492 C001      		movw r24,r0
 4277 1494 1124      		clr __zero_reg__
 4278 1496 8050      		subi r24,lo8(-(fb_dir_entry))
 4279 1498 9040      		sbci r25,hi8(-(fb_dir_entry))
 4280 149a FC01      		movw r30,r24
 4281 149c 20A1      		ldd r18,Z+32
 4282 149e 24FF      		sbrs r18,4
 4283 14a0 00C0      		rjmp .L238
 596:main.c        ****             fb_lcd_cursor_pos = 0;
 4284               		.loc 1 596 0
 4285 14a2 0E94 0000 		call change_dir
 4286               	.LVL346:
 597:main.c        ****             fb_lcd_window_pos = 0;
 4287               		.loc 1 597 0
 4288 14a6 1092 0000 		sts fb_lcd_cursor_pos,__zero_reg__
 598:main.c        ****             filebrowser_refresh();
 4289               		.loc 1 598 0
 4290 14aa 1092 0000 		sts fb_lcd_window_pos,__zero_reg__
 4291               	/* epilogue start */
 681:main.c        **** 
 4292               		.loc 1 681 0
 4293 14ae 1F91      		pop r17
 4294 14b0 0F91      		pop r16
 599:main.c        ****             return;
 4295               		.loc 1 599 0
 4296 14b2 0C94 0000 		jmp filebrowser_refresh
 4297               	.LVL347:
 4298               	.L238:
 603:main.c        **** 
 4299               		.loc 1 603 0
 4300 14b6 40E0      		ldi r20,lo8(akt_image_type)
 4301 14b8 50E0      		ldi r21,hi8(akt_image_type)
 4302 14ba BC01      		movw r22,r24
 4303 14bc 8091 0000 		lds r24,fs
 4304 14c0 9091 0000 		lds r25,fs+1
 4305 14c4 0E94 0000 		call open_disk_image
 4306               	.LVL348:
 4307 14c8 9093 0000 		sts fd+1,r25
 4308 14cc 8093 0000 		sts fd,r24
 605:main.c        ****         {
 4309               		.loc 1 605 0
 4310 14d0 8091 0000 		lds r24,akt_image_type
 4311 14d4 8111      		cpse r24,__zero_reg__
 4312 14d6 00C0      		rjmp .L239
 607:main.c        ****             lcd_setcursor(0,2);
 4313               		.loc 1 607 0
 4314 14d8 0E94 0000 		call lcd_clear
 4315               	.LVL349:
 608:main.c        ****             lcd_string("Not Supported Image!");
 4316               		.loc 1 608 0
 4317 14dc 62E0      		ldi r22,lo8(2)
 4318 14de 80E0      		ldi r24,0
 4319 14e0 0E94 0000 		call lcd_setcursor
 4320               	.LVL350:
 609:main.c        ****             _delay_ms(1000);
 4321               		.loc 1 609 0
 4322 14e4 80E0      		ldi r24,lo8(.LC49)
 4323 14e6 90E0      		ldi r25,hi8(.LC49)
 4324 14e8 0E94 0000 		call lcd_string
 4325               	.LVL351:
 4326               	.LBB196:
 4327               	.LBB197:
 4328               		.loc 2 187 0
 4329 14ec FFEF      		ldi r31,lo8(4799999)
 4330 14ee 2DE3      		ldi r18,hi8(4799999)
 4331 14f0 39E4      		ldi r19,hlo8(4799999)
 4332 14f2 F150      	1:	subi r31,1
 4333 14f4 2040      		sbci r18,0
 4334 14f6 3040      		sbci r19,0
 4335 14f8 01F4      		brne 1b
 4336 14fa 00C0      		rjmp .
 4337 14fc 0000      		nop
 4338               	.LVL352:
 4339               	.L239:
 4340               	.LBE197:
 4341               	.LBE196:
 613:main.c        **** 
 4342               		.loc 1 613 0
 4343 14fe 0E94 0000 		call filebrowser_refresh
 4344               	.LVL353:
 615:main.c        **** 
 4345               		.loc 1 615 0
 4346 1502 6091 0000 		lds r22,fb_lcd_cursor_pos
 4347 1506 81E3      		ldi r24,lo8(49)
 4348 1508 689F      		mul r22,r24
 4349 150a B001      		movw r22,r0
 4350 150c 1124      		clr __zero_reg__
 4351 150e 6050      		subi r22,lo8(-(fb_dir_entry))
 4352 1510 7040      		sbci r23,hi8(-(fb_dir_entry))
 4353 1512 80E0      		ldi r24,lo8(image_filename)
 4354 1514 90E0      		ldi r25,hi8(image_filename)
 4355 1516 0E94 0000 		call strcpy
 4356               	.LVL354:
 617:main.c        ****         {
 4357               		.loc 1 617 0
 4358 151a 8091 0000 		lds r24,fd
 4359 151e 9091 0000 		lds r25,fd+1
 4360 1522 0097      		sbiw r24,0
 4361 1524 01F4      		brne .L240
 619:main.c        ****             return ;
 4362               		.loc 1 619 0
 4363 1526 1092 0000 		sts is_image_mount,__zero_reg__
 620:main.c        ****         }
 4364               		.loc 1 620 0
 4365 152a 00C0      		rjmp .L229
 4366               	.L240:
 623:main.c        ****         akt_track_pos = 0;
 4367               		.loc 1 623 0
 4368 152c 4091 0000 		lds r20,akt_half_track
 4369 1530 4695      		lsr r20
 4370 1532 00E0      		ldi r16,lo8(gcr_track_length)
 4371 1534 10E0      		ldi r17,hi8(gcr_track_length)
 4372 1536 20E0      		ldi r18,lo8(gcr_track)
 4373 1538 30E0      		ldi r19,hi8(gcr_track)
 4374 153a 6091 0000 		lds r22,akt_image_type
 4375 153e 0E94 0000 		call read_disk_track
 4376               	.LVL355:
 624:main.c        **** 
 4377               		.loc 1 624 0
 4378 1542 1092 0000 		sts akt_track_pos+1,__zero_reg__
 4379 1546 1092 0000 		sts akt_track_pos,__zero_reg__
 626:main.c        ****         start_timer0();
 4380               		.loc 1 626 0
 4381 154a 1092 0000 		sts no_byte_ready_send,__zero_reg__
 627:main.c        **** 
 4382               		.loc 1 627 0
 4383 154e 0E94 0000 		call start_timer0
 4384               	.LVL356:
 629:main.c        ****         send_disk_change();
 4385               		.loc 1 629 0
 4386 1552 81E0      		ldi r24,lo8(1)
 4387 1554 8093 0000 		sts is_image_mount,r24
 630:main.c        **** 
 4388               		.loc 1 630 0
 4389 1558 0E94 0000 		call send_disk_change
 4390               	.LVL357:
 632:main.c        ****             menu_set_entry_var1(&image_menu, M_WP_IMAGE, 1);
 4391               		.loc 1 632 0
 4392 155c 8091 0000 		lds r24,floppy_wp
 4393 1560 8823      		tst r24
 4394 1562 01F0      		breq .L242
 633:main.c        ****         else
 4395               		.loc 1 633 0
 4396 1564 41E0      		ldi r20,lo8(1)
 4397 1566 00C0      		rjmp .L255
 4398               	.L242:
 635:main.c        **** 
 4399               		.loc 1 635 0
 4400 1568 40E0      		ldi r20,0
 4401               	.L255:
 4402 156a 67E0      		ldi r22,lo8(7)
 4403 156c 80E0      		ldi r24,lo8(image_menu)
 4404 156e 90E0      		ldi r25,hi8(image_menu)
 4405 1570 0E94 0000 		call menu_set_entry_var1
 4406               	.LVL358:
 4407               	.LBB198:
 4408               	.LBB199:
 487:main.c        ****     switch(gui_mode)
 4409               		.loc 1 487 0
 4410 1574 1092 0000 		sts current_gui_mode,__zero_reg__
 4411 1578 0E94 0000 		call set_gui_mode.part.3
 4412               	.LVL359:
 4413               	.L230:
 4414               	.LBE199:
 4415               	.LBE198:
 646:main.c        **** 
 4416               		.loc 1 646 0
 4417 157c 8091 0000 		lds r24,wait_counter0.2838
 4418 1580 9091 0000 		lds r25,wait_counter0.2838+1
 4419 1584 0196      		adiw r24,1
 4420 1586 9093 0000 		sts wait_counter0.2838+1,r25
 4421 158a 8093 0000 		sts wait_counter0.2838,r24
 648:main.c        ****     {
 4422               		.loc 1 648 0
 4423 158e 2091 0000 		lds r18,fb_current_line_offset
 4424 1592 2223      		tst r18
 4425 1594 01F4      		brne .+2
 4426 1596 00C0      		rjmp .L229
 648:main.c        ****     {
 4427               		.loc 1 648 0 is_stmt 0 discriminator 1
 4428 1598 8033      		cpi r24,48
 4429 159a 9547      		sbci r25,117
 4430 159c 01F4      		brne .L229
 650:main.c        **** 
 4431               		.loc 1 650 0 is_stmt 1
 4432 159e 1092 0000 		sts wait_counter0.2838+1,__zero_reg__
 4433 15a2 1092 0000 		sts wait_counter0.2838,__zero_reg__
 652:main.c        ****         {
 4434               		.loc 1 652 0
 4435 15a6 8091 0000 		lds r24,fb_line_scroll_end_begin_wait
 4436 15aa 8111      		cpse r24,__zero_reg__
 4437 15ac 00C0      		rjmp .L244
 657:main.c        ****             {
 4438               		.loc 1 657 0
 4439 15ae 9091 0000 		lds r25,fb_line_scroll_direction
 4440 15b2 8091 0000 		lds r24,fb_line_scroll_pos
 4441 15b6 9111      		cpse r25,__zero_reg__
 4442 15b8 00C0      		rjmp .L245
 659:main.c        ****                 if(fb_line_scroll_pos >= fb_current_line_offset)
 4443               		.loc 1 659 0
 4444 15ba 8F5F      		subi r24,lo8(-(1))
 4445 15bc 8093 0000 		sts fb_line_scroll_pos,r24
 660:main.c        ****                 {
 4446               		.loc 1 660 0
 4447 15c0 8217      		cp r24,r18
 4448 15c2 00F0      		brlo .L247
 662:main.c        ****                     fb_line_scroll_direction = 1;
 4449               		.loc 1 662 0
 4450 15c4 86E0      		ldi r24,lo8(6)
 4451 15c6 8093 0000 		sts fb_line_scroll_end_begin_wait,r24
 663:main.c        ****                 }
 4452               		.loc 1 663 0
 4453 15ca 81E0      		ldi r24,lo8(1)
 4454 15cc 8093 0000 		sts fb_line_scroll_direction,r24
 4455 15d0 00C0      		rjmp .L247
 4456               	.L245:
 668:main.c        ****                 if(fb_line_scroll_pos == 0)
 4457               		.loc 1 668 0
 4458 15d2 8150      		subi r24,lo8(-(-1))
 4459 15d4 8093 0000 		sts fb_line_scroll_pos,r24
 669:main.c        ****                 {
 4460               		.loc 1 669 0
 4461 15d8 8111      		cpse r24,__zero_reg__
 4462 15da 00C0      		rjmp .L247
 671:main.c        ****                     fb_line_scroll_direction = 0;
 4463               		.loc 1 671 0
 4464 15dc 86E0      		ldi r24,lo8(6)
 4465 15de 8093 0000 		sts fb_line_scroll_end_begin_wait,r24
 672:main.c        ****                 }
 4466               		.loc 1 672 0
 4467 15e2 1092 0000 		sts fb_line_scroll_direction,__zero_reg__
 4468               	.L247:
 676:main.c        ****             lcd_print(fb_dir_entry[fb_lcd_cursor_pos].long_name,fb_line_scroll_pos,17);
 4469               		.loc 1 676 0
 4470 15e6 6091 0000 		lds r22,fb_lcd_cursor_pos
 4471 15ea 6F5F      		subi r22,lo8(-(1))
 4472 15ec 82E0      		ldi r24,lo8(2)
 4473 15ee 0E94 0000 		call lcd_setcursor
 4474               	.LVL360:
 677:main.c        ****         }
 4475               		.loc 1 677 0
 4476 15f2 8091 0000 		lds r24,fb_lcd_cursor_pos
 4477 15f6 F1E3      		ldi r31,lo8(49)
 4478 15f8 8F9F      		mul r24,r31
 4479 15fa C001      		movw r24,r0
 4480 15fc 1124      		clr __zero_reg__
 4481 15fe 41E1      		ldi r20,lo8(17)
 4482 1600 6091 0000 		lds r22,fb_line_scroll_pos
 4483 1604 8050      		subi r24,lo8(-(fb_dir_entry))
 4484 1606 9040      		sbci r25,hi8(-(fb_dir_entry))
 4485               	/* epilogue start */
 681:main.c        **** 
 4486               		.loc 1 681 0
 4487 1608 1F91      		pop r17
 4488 160a 0F91      		pop r16
 677:main.c        ****         }
 4489               		.loc 1 677 0
 4490 160c 0C94 0000 		jmp lcd_print
 4491               	.LVL361:
 4492               	.L244:
 679:main.c        ****     }
 4493               		.loc 1 679 0
 4494 1610 8150      		subi r24,lo8(-(-1))
 4495 1612 8093 0000 		sts fb_line_scroll_end_begin_wait,r24
 4496               	.L229:
 4497               	/* epilogue start */
 681:main.c        **** 
 4498               		.loc 1 681 0
 4499 1616 1F91      		pop r17
 4500 1618 0F91      		pop r16
 4501 161a 0895      		ret
 4502               		.cfi_endproc
 4503               	.LFE16:
 4505               	.global	remove_image
 4507               	remove_image:
 4508               	.LFB48:
1422:main.c        ****     is_image_mount = 0;
 4509               		.loc 1 1422 0
 4510               		.cfi_startproc
 4511               	/* prologue: function */
 4512               	/* frame size = 0 */
 4513               	/* stack size = 0 */
 4514               	.L__stack_usage = 0
1423:main.c        ****     akt_image_type = UNDEF_IMAGE;
 4515               		.loc 1 1423 0
 4516 161c 1092 0000 		sts is_image_mount,__zero_reg__
1424:main.c        ****     set_write_protection(1);
 4517               		.loc 1 1424 0
 4518 1620 1092 0000 		sts akt_image_type,__zero_reg__
1425:main.c        ****     menu_set_entry_var1(&image_menu, M_WP_IMAGE, 1);
 4519               		.loc 1 1425 0
 4520 1624 81E0      		ldi r24,lo8(1)
 4521 1626 0E94 0000 		call set_write_protection
 4522               	.LVL362:
1426:main.c        ****     send_disk_change();
 4523               		.loc 1 1426 0
 4524 162a 41E0      		ldi r20,lo8(1)
 4525 162c 67E0      		ldi r22,lo8(7)
 4526 162e 80E0      		ldi r24,lo8(image_menu)
 4527 1630 90E0      		ldi r25,hi8(image_menu)
 4528 1632 0E94 0000 		call menu_set_entry_var1
 4529               	.LVL363:
1427:main.c        **** }
 4530               		.loc 1 1427 0
 4531 1636 0C94 0000 		jmp send_disk_change
 4532               	.LVL364:
 4533               		.cfi_endproc
 4534               	.LFE48:
 4536               		.section	.rodata.str1.1
 4537               	.LC50:
 4538 01c9 4368 616E 		.string	"Changed Input Mode"
 4538      6765 6420 
 4538      496E 7075 
 4538      7420 4D6F 
 4538      6465 00
 4539               	.LC51:
 4540 01dc 456E 636F 		.string	"Encoder Mode"
 4540      6465 7220 
 4540      4D6F 6465 
 4540      00
 4541               	.LC52:
 4542 01e9 4275 7474 		.string	"Button Mode"
 4542      6F6E 204D 
 4542      6F64 6500 
 4543               	.LC53:
 4544 01f5 5761 6974 		.string	"Wait for SD-Karte..."
 4544      2066 6F72 
 4544      2053 442D 
 4544      4B61 7274 
 4544      652E 2E2E 
 4545               		.text
 4546               	.global	reset
 4548               	reset:
 4549               	.LFB9:
 110:main.c        ****     // PB23 initialisieren
 4550               		.loc 1 110 0
 4551               		.cfi_startproc
 4552               	/* prologue: function */
 4553               	/* frame size = 0 */
 4554               	/* stack size = 0 */
 4555               	.L__stack_usage = 0
 112:main.c        **** 
 4556               		.loc 1 112 0
 4557 163a 0E94 0000 		call init_pb2_pb3
 4558               	.LVL365:
 115:main.c        ****     soe_gatearry_lo();      // Damit die GateArray das Signal Byte_Ready auf Hi setzt
 4559               		.loc 1 115 0
 4560 163e 0E94 0000 		call soe_gatearry_init
 4561               	.LVL366:
 116:main.c        ****                             // Somit stört mich das Signal nicht mehr und ich muss Byte_Ready
 4562               		.loc 1 116 0
 4563 1642 0E94 0000 		call soe_gatearry_lo
 4564               	.LVL367:
 121:main.c        ****     {
 4565               		.loc 1 121 0
 4566 1646 80E0      		ldi r24,0
 4567 1648 90E0      		ldi r25,0
 4568 164a 0E94 0000 		call eeprom_read_dword
 4569               	.LVL368:
 4570 164e 6134      		cpi r22,65
 4571 1650 7541      		sbci r23,21
 4572 1652 8144      		sbci r24,65
 4573 1654 9541      		sbci r25,21
 4574 1656 01F0      		breq .L261
 123:main.c        ****         reset();
 4575               		.loc 1 123 0
 4576 1658 0E94 0000 		call settings_set_default_values
 4577               	.LVL369:
 124:main.c        ****     }
 4578               		.loc 1 124 0
 4579 165c 0E94 0000 		call reset
 4580               	.LVL370:
 4581               	.L261:
 128:main.c        **** 
 4582               		.loc 1 128 0
 4583 1660 0E94 0000 		call init_keys
 4584               	.LVL371:
 131:main.c        **** 
 4585               		.loc 1 131 0
 4586 1664 0E94 0000 		call lcd_init
 4587               	.LVL372:
 134:main.c        ****     {
 4588               		.loc 1 134 0
 4589 1668 3399      		sbic 0x6,3
 4590 166a 00C0      		rjmp .L262
 136:main.c        ****         lcd_setcursor(1,2);
 4591               		.loc 1 136 0
 4592 166c 0E94 0000 		call lcd_clear
 4593               	.LVL373:
 137:main.c        ****         lcd_string("Changed Input Mode");
 4594               		.loc 1 137 0
 4595 1670 62E0      		ldi r22,lo8(2)
 4596 1672 81E0      		ldi r24,lo8(1)
 4597 1674 0E94 0000 		call lcd_setcursor
 4598               	.LVL374:
 138:main.c        **** 
 4599               		.loc 1 138 0
 4600 1678 80E0      		ldi r24,lo8(.LC50)
 4601 167a 90E0      		ldi r25,hi8(.LC50)
 4602 167c 0E94 0000 		call lcd_string
 4603               	.LVL375:
 140:main.c        ****         {
 4604               		.loc 1 140 0
 4605 1680 88E0      		ldi r24,lo8(8)
 4606 1682 90E0      		ldi r25,0
 4607 1684 0E94 0000 		call eeprom_read_byte
 4608               	.LVL376:
 4609 1688 8111      		cpse r24,__zero_reg__
 4610 168a 00C0      		rjmp .L263
 142:main.c        ****             lcd_setcursor(4,3);
 4611               		.loc 1 142 0
 4612 168c 61E0      		ldi r22,lo8(1)
 4613 168e 88E0      		ldi r24,lo8(8)
 4614 1690 90E0      		ldi r25,0
 4615 1692 0E94 0000 		call eeprom_update_byte
 4616               	.LVL377:
 143:main.c        ****             lcd_string("Encoder Mode");
 4617               		.loc 1 143 0
 4618 1696 63E0      		ldi r22,lo8(3)
 4619 1698 84E0      		ldi r24,lo8(4)
 4620 169a 0E94 0000 		call lcd_setcursor
 4621               	.LVL378:
 144:main.c        ****         }
 4622               		.loc 1 144 0
 4623 169e 80E0      		ldi r24,lo8(.LC51)
 4624 16a0 90E0      		ldi r25,hi8(.LC51)
 4625 16a2 00C0      		rjmp .L270
 4626               	.L263:
 148:main.c        ****             lcd_setcursor(4,3);
 4627               		.loc 1 148 0
 4628 16a4 60E0      		ldi r22,0
 4629 16a6 88E0      		ldi r24,lo8(8)
 4630 16a8 90E0      		ldi r25,0
 4631 16aa 0E94 0000 		call eeprom_update_byte
 4632               	.LVL379:
 149:main.c        ****             lcd_string("Button Mode");
 4633               		.loc 1 149 0
 4634 16ae 63E0      		ldi r22,lo8(3)
 4635 16b0 84E0      		ldi r24,lo8(4)
 4636 16b2 0E94 0000 		call lcd_setcursor
 4637               	.LVL380:
 150:main.c        ****         }
 4638               		.loc 1 150 0
 4639 16b6 80E0      		ldi r24,lo8(.LC52)
 4640 16b8 90E0      		ldi r25,hi8(.LC52)
 4641               	.L270:
 4642 16ba 0E94 0000 		call lcd_string
 4643               	.LVL381:
 4644               	.LBB200:
 4645               	.LBB201:
 4646               		.loc 2 187 0
 4647 16be 8FEF      		ldi r24,lo8(14399999)
 4648 16c0 99EB      		ldi r25,hi8(14399999)
 4649 16c2 2BED      		ldi r18,hlo8(14399999)
 4650 16c4 8150      	1:	subi r24,1
 4651 16c6 9040      		sbci r25,0
 4652 16c8 2040      		sbci r18,0
 4653 16ca 01F4      		brne 1b
 4654 16cc 00C0      		rjmp .
 4655 16ce 0000      		nop
 4656               	.LVL382:
 4657               	.L262:
 4658               	.LBE201:
 4659               	.LBE200:
 156:main.c        **** 
 4660               		.loc 1 156 0
 4661 16d0 88E0      		ldi r24,lo8(8)
 4662 16d2 90E0      		ldi r25,0
 4663 16d4 0E94 0000 		call eeprom_read_byte
 4664               	.LVL383:
 4665 16d8 8093 0000 		sts input_mode,r24
 4666               	.LVL384:
 4667               	.LBB202:
 4668               	.LBB203:
 4669 16dc 0E94 0000 		call endable_wps_port.part.6
 4670               	.LVL385:
 4671               	.LBE203:
 4672               	.LBE202:
 162:main.c        **** 
 4673               		.loc 1 162 0
 4674 16e0 0E94 0000 		call show_start_message
 4675               	.LVL386:
 165:main.c        **** 
 4676               		.loc 1 165 0
 4677 16e4 0E94 0000 		call init_stepper
 4678               	.LVL387:
 168:main.c        **** 
 4679               		.loc 1 168 0
 4680 16e8 0E94 0000 		call init_motor
 4681               	.LVL388:
 171:main.c        **** 
 4682               		.loc 1 171 0
 4683 16ec 0E94 0000 		call init_controll_signals
 4684               	.LVL389:
 174:main.c        **** 
 4685               		.loc 1 174 0
 4686 16f0 0E94 0000 		call remove_image
 4687               	.LVL390:
 177:main.c        **** 
 4688               		.loc 1 177 0
 4689 16f4 0E94 0000 		call init_timer0
 4690               	.LVL391:
 181:main.c        **** 
 4691               		.loc 1 181 0
 4692 16f8 0E94 0000 		call init_timer2
 4693               	.LVL392:
 184:main.c        ****     lcd_string("Wait for SD-Karte...");
 4694               		.loc 1 184 0
 4695 16fc 62E0      		ldi r22,lo8(2)
 4696 16fe 80E0      		ldi r24,0
 4697 1700 0E94 0000 		call lcd_setcursor
 4698               	.LVL393:
 185:main.c        **** 
 4699               		.loc 1 185 0
 4700 1704 80E0      		ldi r24,lo8(.LC53)
 4701 1706 90E0      		ldi r25,hi8(.LC53)
 4702 1708 0E94 0000 		call lcd_string
 4703               	.LVL394:
 4704               	.L265:
 190:main.c        ****     {
 4705               		.loc 1 190 0
 4706 170c 0E94 0000 		call init_sd_card
 4707               	.LVL395:
 4708 1710 8823      		tst r24
 4709 1712 01F0      		breq .L271
 4710               	.LVL396:
 4711               	.LBB204:
 4712               	.LBB205:
 4713               		.loc 2 187 0
 4714 1714 8FEF      		ldi r24,lo8(4799999)
 4715 1716 9DE3      		ldi r25,hi8(4799999)
 4716 1718 29E4      		ldi r18,hlo8(4799999)
 4717 171a 8150      	1:	subi r24,1
 4718 171c 9040      		sbci r25,0
 4719 171e 2040      		sbci r18,0
 4720 1720 01F4      		brne 1b
 4721 1722 00C0      		rjmp .
 4722 1724 0000      		nop
 4723 1726 00C0      		rjmp .L265
 4724               	.LVL397:
 4725               	.L271:
 4726               	.LBE205:
 4727               	.LBE204:
 195:main.c        **** 
 4728               		.loc 1 195 0
 4729 1728 0E94 0000 		call get_dir_entry_count
 4730               	.LVL398:
 4731 172c 9093 0000 		sts fb_dir_entry_count+1,r25
 4732 1730 8093 0000 		sts fb_dir_entry_count,r24
 198:main.c        ****     key_buffer_w_pos = 0;
 4733               		.loc 1 198 0
 4734 1734 1092 0000 		sts key_buffer_r_pos,__zero_reg__
 199:main.c        **** 
 4735               		.loc 1 199 0
 4736 1738 1092 0000 		sts key_buffer_w_pos,__zero_reg__
 4737               	.LVL399:
 4738               	.LBB206:
 4739               	.LBB207:
 487:main.c        ****     switch(gui_mode)
 4740               		.loc 1 487 0
 4741 173c 1092 0000 		sts current_gui_mode,__zero_reg__
 4742 1740 0E94 0000 		call set_gui_mode.part.3
 4743               	.LVL400:
 4744               	.LBE207:
 4745               	.LBE206:
 205:main.c        **** }
 4746               		.loc 1 205 0
 4747               	/* #APP */
 4748               	 ;  205 "main.c" 1
 4749 1744 7894      		sei
 4750               	 ;  0 "" 2
 4751               	/* #NOAPP */
 4752 1746 0895      		ret
 4753               		.cfi_endproc
 4754               	.LFE9:
 4756               	.global	check_menu_events
 4758               	check_menu_events:
 4759               	.LFB14:
 401:main.c        ****     uint8_t command = menu_event >> 8;
 4760               		.loc 1 401 0
 4761               		.cfi_startproc
 4762               	.LVL401:
 4763               	/* prologue: function */
 4764               	/* frame size = 0 */
 4765               	/* stack size = 0 */
 4766               	.L__stack_usage = 0
 405:main.c        ****     {
 4767               		.loc 1 405 0
 4768 1748 292F      		mov r18,r25
 4769 174a 3327      		clr r19
 4770 174c 2130      		cpi r18,1
 4771 174e 3105      		cpc r19,__zero_reg__
 4772 1750 01F0      		breq .L290
 4773 1752 2230      		cpi r18,2
 4774 1754 3105      		cpc r19,__zero_reg__
 4775 1756 01F0      		breq .L275
 4776 1758 0895      		ret
 4777               	.L275:
 4778               	.LVL402:
 4779               	.LBB218:
 4780               	.LBB219:
 412:main.c        ****         {
 4781               		.loc 1 412 0
 4782 175a FC01      		movw r30,r24
 4783 175c FF27      		clr r31
 4784 175e 3597      		sbiw r30,5
 4785 1760 ED30      		cpi r30,13
 4786 1762 F105      		cpc r31,__zero_reg__
 4787 1764 00F4      		brsh .L272
 4788 1766 E050      		subi r30,lo8(-(gs(.L277)))
 4789 1768 F040      		sbci r31,hi8(-(gs(.L277)))
 4790 176a 0C94 0000 		jmp __tablejump2__
 4791               		.section	.progmem.gcc_sw_table,"a",@progbits
 4792               		.p2align	1
 4793               	.L277:
 4794 001e 0000      		.word gs(.L276)
 4795 0020 0000      		.word gs(.L278)
 4796 0022 0000      		.word gs(.L279)
 4797 0024 0000      		.word gs(.L272)
 4798 0026 0000      		.word gs(.L272)
 4799 0028 0000      		.word gs(.L272)
 4800 002a 0000      		.word gs(.L280)
 4801 002c 0000      		.word gs(.L281)
 4802 002e 0000      		.word gs(.L272)
 4803 0030 0000      		.word gs(.L282)
 4804 0032 0000      		.word gs(.L272)
 4805 0034 0000      		.word gs(.L283)
 4806 0036 0000      		.word gs(.L284)
 4807               		.text
 4808               	.L276:
 4809               	.LVL403:
 4810               	.LBB220:
 4811               	.LBB221:
 487:main.c        ****     switch(gui_mode)
 4812               		.loc 1 487 0
 4813 176e 82E0      		ldi r24,lo8(2)
 4814               	.LVL404:
 4815 1770 8093 0000 		sts current_gui_mode,r24
 541:main.c        ****         break;
 4816               		.loc 1 541 0
 4817 1774 0C94 0000 		jmp filebrowser_refresh
 4818               	.LVL405:
 4819               	.L278:
 4820               	.LBE221:
 4821               	.LBE220:
 421:main.c        ****             set_gui_mode(GUI_INFO_MODE);
 4822               		.loc 1 421 0
 4823 1778 0E94 0000 		call remove_image
 4824               	.LVL406:
 4825               	.L290:
 4826               	.LBB222:
 4827               	.LBB223:
 487:main.c        ****     switch(gui_mode)
 4828               		.loc 1 487 0
 4829 177c 1092 0000 		sts current_gui_mode,__zero_reg__
 4830 1780 0C94 0000 		jmp set_gui_mode.part.3
 4831               	.LVL407:
 4832               	.L279:
 4833               	.LBE223:
 4834               	.LBE222:
 425:main.c        ****             {
 4835               		.loc 1 425 0
 4836 1784 67E0      		ldi r22,lo8(7)
 4837 1786 80E0      		ldi r24,lo8(image_menu)
 4838 1788 90E0      		ldi r25,hi8(image_menu)
 4839               	.LVL408:
 4840 178a 0E94 0000 		call menu_get_entry_var1
 4841               	.LVL409:
 4842 178e 8823      		tst r24
 4843 1790 01F0      		breq .L285
 427:main.c        ****             }
 4844               		.loc 1 427 0
 4845 1792 81E0      		ldi r24,lo8(1)
 4846 1794 00C0      		rjmp .L289
 4847               	.L285:
 431:main.c        ****             }
 4848               		.loc 1 431 0
 4849 1796 80E0      		ldi r24,0
 4850               	.L289:
 4851 1798 0E94 0000 		call set_write_protection
 4852               	.LVL410:
 4853 179c 00C0      		rjmp .L291
 4854               	.LVL411:
 4855               	.L280:
 438:main.c        ****             {
 4856               		.loc 1 438 0
 4857 179e 6BE0      		ldi r22,lo8(11)
 4858 17a0 80E0      		ldi r24,lo8(settings_menu)
 4859 17a2 90E0      		ldi r25,hi8(settings_menu)
 4860               	.LVL412:
 4861 17a4 0E94 0000 		call menu_get_entry_var1
 4862               	.LVL413:
 4863 17a8 8823      		tst r24
 4864 17aa 01F0      		breq .L287
 440:main.c        ****             }
 4865               		.loc 1 440 0
 4866 17ac 229A      		sbi 0x4,2
 4867 17ae 00C0      		rjmp .L291
 4868               	.L287:
 444:main.c        ****             }
 4869               		.loc 1 444 0
 4870 17b0 2298      		cbi 0x4,2
 4871 17b2 00C0      		rjmp .L291
 4872               	.LVL414:
 4873               	.L281:
 450:main.c        ****             {
 4874               		.loc 1 450 0
 4875 17b4 6CE0      		ldi r22,lo8(12)
 4876 17b6 80E0      		ldi r24,lo8(settings_menu)
 4877 17b8 90E0      		ldi r25,hi8(settings_menu)
 4878               	.LVL415:
 4879 17ba 0E94 0000 		call menu_get_entry_var1
 4880               	.LVL416:
 4881 17be 8823      		tst r24
 4882 17c0 01F0      		breq .L288
 452:main.c        ****             }
 4883               		.loc 1 452 0
 4884 17c2 239A      		sbi 0x4,3
 4885 17c4 00C0      		rjmp .L291
 4886               	.L288:
 456:main.c        ****             }
 4887               		.loc 1 456 0
 4888 17c6 2398      		cbi 0x4,3
 4889 17c8 00C0      		rjmp .L291
 4890               	.LVL417:
 4891               	.L282:
 465:main.c        ****             break;
 4892               		.loc 1 465 0
 4893 17ca 1092 0000 		sts exit_main,__zero_reg__
 4894 17ce 0895      		ret
 4895               	.L283:
 470:main.c        ****             menu_refresh();
 4896               		.loc 1 470 0
 4897 17d0 0E94 0000 		call show_start_message
 4898               	.LVL418:
 4899 17d4 00C0      		rjmp .L291
 4900               	.LVL419:
 4901               	.L284:
 475:main.c        ****             menu_refresh();
 4902               		.loc 1 475 0
 4903 17d6 0E94 0000 		call show_sdcard_info_message
 4904               	.LVL420:
 4905               	.L291:
 476:main.c        ****             break;
 4906               		.loc 1 476 0
 4907 17da 0C94 0000 		jmp menu_refresh
 4908               	.LVL421:
 4909               	.L272:
 4910 17de 0895      		ret
 4911               	.LBE219:
 4912               	.LBE218:
 4913               		.cfi_endproc
 4914               	.LFE14:
 4916               		.section	.rodata.str1.1
 4917               	.LC54:
 4918 020a 2020 2000 		.string	"   "
 4919               	.LC55:
 4920 020e 4F6E 2000 		.string	"On "
 4921               	.LC56:
 4922 0212 4F66 6600 		.string	"Off"
 4923               		.text
 4924               	.global	update_gui
 4926               	update_gui:
 4927               	.LFB13:
 306:main.c        ****     static uint8_t old_half_track = 0;
 4928               		.loc 1 306 0
 4929               		.cfi_startproc
 4930               	/* prologue: function */
 4931               	/* frame size = 0 */
 4932               	/* stack size = 0 */
 4933               	.L__stack_usage = 0
 311:main.c        **** 
 4934               		.loc 1 311 0
 4935 17e0 0E94 0000 		call get_key_from_buffer
 4936               	.LVL422:
 313:main.c        ****     {
 4937               		.loc 1 313 0
 4938 17e4 9091 0000 		lds r25,current_gui_mode
 4939 17e8 9130      		cpi r25,lo8(1)
 4940 17ea 01F4      		brne .+2
 4941 17ec 00C0      		rjmp .L294
 4942 17ee 00F0      		brlo .L295
 4943 17f0 9230      		cpi r25,lo8(2)
 4944 17f2 01F4      		brne .+2
 4945 17f4 00C0      		rjmp .L296
 4946 17f6 0895      		ret
 4947               	.L295:
 317:main.c        ****             set_gui_mode(GUI_MENU_MODE);
 4948               		.loc 1 317 0
 4949 17f8 8530      		cpi r24,lo8(5)
 4950 17fa 01F4      		brne .L297
 4951               	.LVL423:
 4952               	.LBB230:
 4953               	.LBB231:
 487:main.c        ****     switch(gui_mode)
 4954               		.loc 1 487 0
 4955 17fc 81E0      		ldi r24,lo8(1)
 4956               	.LVL424:
 4957 17fe 8093 0000 		sts current_gui_mode,r24
 538:main.c        ****         break;
 4958               		.loc 1 538 0
 4959 1802 0E94 0000 		call menu_refresh
 4960               	.LVL425:
 4961 1806 00C0      		rjmp .L298
 4962               	.LVL426:
 4963               	.L297:
 4964               	.LBE231:
 4965               	.LBE230:
 320:main.c        ****             exit_main = 0;
 4966               		.loc 1 320 0
 4967 1808 8730      		cpi r24,lo8(7)
 4968 180a 01F4      		brne .L298
 321:main.c        **** 
 4969               		.loc 1 321 0
 4970 180c 1092 0000 		sts exit_main,__zero_reg__
 4971               	.LVL427:
 4972               	.L298:
 4973               	.LBB232:
 4974               	.LBB233:
 323:main.c        ****         {
 4975               		.loc 1 323 0
 4976 1810 9091 0000 		lds r25,old_half_track.2792
 4977 1814 8091 0000 		lds r24,akt_half_track
 4978 1818 9817      		cp r25,r24
 4979 181a 01F0      		breq .L299
 325:main.c        ****             lcd_string("   ");
 4980               		.loc 1 325 0
 4981 181c 61E0      		ldi r22,lo8(1)
 4982 181e 87E0      		ldi r24,lo8(7)
 4983 1820 0E94 0000 		call lcd_setcursor
 4984               	.LVL428:
 326:main.c        ****             lcd_setcursor(7,1);
 4985               		.loc 1 326 0
 4986 1824 80E0      		ldi r24,lo8(.LC54)
 4987 1826 90E0      		ldi r25,hi8(.LC54)
 4988 1828 0E94 0000 		call lcd_string
 4989               	.LVL429:
 327:main.c        ****             sprintf (byte_str,"%d",akt_half_track >> 1);
 4990               		.loc 1 327 0
 4991 182c 61E0      		ldi r22,lo8(1)
 4992 182e 87E0      		ldi r24,lo8(7)
 4993 1830 0E94 0000 		call lcd_setcursor
 4994               	.LVL430:
 328:main.c        ****             lcd_string(byte_str);
 4995               		.loc 1 328 0
 4996 1834 8091 0000 		lds r24,akt_half_track
 4997 1838 8695      		lsr r24
 4998 183a 1F92      		push __zero_reg__
 4999               	.LCFI92:
 5000               		.cfi_def_cfa_offset 3
 5001 183c 8F93      		push r24
 5002               	.LCFI93:
 5003               		.cfi_def_cfa_offset 4
 5004 183e 80E0      		ldi r24,lo8(.LC10)
 5005 1840 90E0      		ldi r25,hi8(.LC10)
 5006 1842 9F93      		push r25
 5007               	.LCFI94:
 5008               		.cfi_def_cfa_offset 5
 5009 1844 8F93      		push r24
 5010               	.LCFI95:
 5011               		.cfi_def_cfa_offset 6
 5012 1846 80E0      		ldi r24,lo8(byte_str)
 5013 1848 90E0      		ldi r25,hi8(byte_str)
 5014 184a 9F93      		push r25
 5015               	.LCFI96:
 5016               		.cfi_def_cfa_offset 7
 5017 184c 8F93      		push r24
 5018               	.LCFI97:
 5019               		.cfi_def_cfa_offset 8
 5020 184e 0E94 0000 		call sprintf
 5021               	.LVL431:
 329:main.c        ****         }
 5022               		.loc 1 329 0
 5023 1852 80E0      		ldi r24,lo8(byte_str)
 5024 1854 90E0      		ldi r25,hi8(byte_str)
 5025 1856 0E94 0000 		call lcd_string
 5026               	.LVL432:
 5027 185a 0F90      		pop __tmp_reg__
 5028 185c 0F90      		pop __tmp_reg__
 5029 185e 0F90      		pop __tmp_reg__
 5030 1860 0F90      		pop __tmp_reg__
 5031 1862 0F90      		pop __tmp_reg__
 5032 1864 0F90      		pop __tmp_reg__
 5033               	.LCFI98:
 5034               		.cfi_def_cfa_offset 2
 5035               	.L299:
 331:main.c        **** 
 5036               		.loc 1 331 0
 5037 1866 8091 0000 		lds r24,akt_half_track
 5038 186a 8093 0000 		sts old_half_track.2792,r24
 333:main.c        ****         {
 5039               		.loc 1 333 0
 5040 186e 86B1      		in r24,0x6
 5041 1870 8470      		andi r24,lo8(4)
 5042 1872 9091 0000 		lds r25,old_motor_status.2793
 5043 1876 9817      		cp r25,r24
 5044 1878 01F0      		breq .L300
 335:main.c        ****             if(get_motor_status())
 5045               		.loc 1 335 0
 5046 187a 62E0      		ldi r22,lo8(2)
 5047 187c 87E0      		ldi r24,lo8(7)
 5048 187e 0E94 0000 		call lcd_setcursor
 5049               	.LVL433:
 336:main.c        ****                 lcd_string("On ");
 5050               		.loc 1 336 0
 5051 1882 329B      		sbis 0x6,2
 5052 1884 00C0      		rjmp .L301
 337:main.c        ****             else
 5053               		.loc 1 337 0
 5054 1886 80E0      		ldi r24,lo8(.LC55)
 5055 1888 90E0      		ldi r25,hi8(.LC55)
 5056 188a 00C0      		rjmp .L312
 5057               	.L301:
 339:main.c        ****         }
 5058               		.loc 1 339 0
 5059 188c 80E0      		ldi r24,lo8(.LC56)
 5060 188e 90E0      		ldi r25,hi8(.LC56)
 5061               	.L312:
 5062 1890 0E94 0000 		call lcd_string
 5063               	.LVL434:
 5064               	.L300:
 341:main.c        **** 
 5065               		.loc 1 341 0
 5066 1894 86B1      		in r24,0x6
 5067 1896 8470      		andi r24,lo8(4)
 5068 1898 8093 0000 		sts old_motor_status.2793,r24
 343:main.c        ****         {
 5069               		.loc 1 343 0
 5070 189c 8091 0000 		lds r24,is_image_mount
 5071 18a0 8823      		tst r24
 5072 18a2 01F4      		brne .+2
 5073 18a4 00C0      		rjmp .L292
 347:main.c        **** 
 5074               		.loc 1 347 0
 5075 18a6 8091 0000 		lds r24,wait_counter0.2794
 5076 18aa 9091 0000 		lds r25,wait_counter0.2794+1
 5077 18ae 0196      		adiw r24,1
 5078 18b0 9093 0000 		sts wait_counter0.2794+1,r25
 5079 18b4 8093 0000 		sts wait_counter0.2794,r24
 349:main.c        ****             {
 5080               		.loc 1 349 0
 5081 18b8 2091 0000 		lds r18,gui_current_line_offset
 5082 18bc 2223      		tst r18
 5083 18be 01F0      		breq .L292
 5084 18c0 8033      		cpi r24,48
 5085 18c2 9547      		sbci r25,117
 5086 18c4 01F4      		brne .L292
 351:main.c        **** 
 5087               		.loc 1 351 0
 5088 18c6 1092 0000 		sts wait_counter0.2794+1,__zero_reg__
 5089 18ca 1092 0000 		sts wait_counter0.2794,__zero_reg__
 353:main.c        ****                 {
 5090               		.loc 1 353 0
 5091 18ce 8091 0000 		lds r24,gui_line_scroll_end_begin_wait
 5092 18d2 8111      		cpse r24,__zero_reg__
 5093 18d4 00C0      		rjmp .L304
 358:main.c        ****                     {
 5094               		.loc 1 358 0
 5095 18d6 9091 0000 		lds r25,gui_line_scroll_direction
 5096 18da 8091 0000 		lds r24,gui_line_scroll_pos
 5097 18de 9111      		cpse r25,__zero_reg__
 5098 18e0 00C0      		rjmp .L305
 360:main.c        ****                         if(gui_line_scroll_pos >= gui_current_line_offset)
 5099               		.loc 1 360 0
 5100 18e2 8F5F      		subi r24,lo8(-(1))
 5101 18e4 8093 0000 		sts gui_line_scroll_pos,r24
 361:main.c        ****                         {
 5102               		.loc 1 361 0
 5103 18e8 8217      		cp r24,r18
 5104 18ea 00F0      		brlo .L307
 363:main.c        ****                             gui_line_scroll_direction = 1;
 5105               		.loc 1 363 0
 5106 18ec 86E0      		ldi r24,lo8(6)
 5107 18ee 8093 0000 		sts gui_line_scroll_end_begin_wait,r24
 364:main.c        ****                         }
 5108               		.loc 1 364 0
 5109 18f2 81E0      		ldi r24,lo8(1)
 5110 18f4 8093 0000 		sts gui_line_scroll_direction,r24
 5111 18f8 00C0      		rjmp .L307
 5112               	.L305:
 369:main.c        ****                         if(gui_line_scroll_pos == 0)
 5113               		.loc 1 369 0
 5114 18fa 8150      		subi r24,lo8(-(-1))
 5115 18fc 8093 0000 		sts gui_line_scroll_pos,r24
 370:main.c        ****                         {
 5116               		.loc 1 370 0
 5117 1900 8111      		cpse r24,__zero_reg__
 5118 1902 00C0      		rjmp .L307
 372:main.c        ****                             gui_line_scroll_direction = 0;
 5119               		.loc 1 372 0
 5120 1904 86E0      		ldi r24,lo8(6)
 5121 1906 8093 0000 		sts gui_line_scroll_end_begin_wait,r24
 373:main.c        ****                         }
 5122               		.loc 1 373 0
 5123 190a 1092 0000 		sts gui_line_scroll_direction,__zero_reg__
 5124               	.L307:
 377:main.c        ****                     lcd_print(image_filename,gui_line_scroll_pos,20);
 5125               		.loc 1 377 0
 5126 190e 64E0      		ldi r22,lo8(4)
 5127 1910 80E0      		ldi r24,0
 5128 1912 0E94 0000 		call lcd_setcursor
 5129               	.LVL435:
 378:main.c        ****                 }
 5130               		.loc 1 378 0
 5131 1916 44E1      		ldi r20,lo8(20)
 5132 1918 6091 0000 		lds r22,gui_line_scroll_pos
 5133 191c 80E0      		ldi r24,lo8(image_filename)
 5134 191e 90E0      		ldi r25,hi8(image_filename)
 5135 1920 0C94 0000 		jmp lcd_print
 5136               	.LVL436:
 5137               	.L304:
 380:main.c        ****             }
 5138               		.loc 1 380 0
 5139 1924 8150      		subi r24,lo8(-(-1))
 5140 1926 8093 0000 		sts gui_line_scroll_end_begin_wait,r24
 5141 192a 0895      		ret
 5142               	.LVL437:
 5143               	.L294:
 5144               	.LBE233:
 5145               	.LBE232:
 386:main.c        ****         break;
 5146               		.loc 1 386 0
 5147 192c 0E94 0000 		call menu_update
 5148               	.LVL438:
 5149 1930 0C94 0000 		jmp check_menu_events
 5150               	.LVL439:
 5151               	.L296:
 390:main.c        ****         break;
 5152               		.loc 1 390 0
 5153 1934 0C94 0000 		jmp filebrowser_update
 5154               	.LVL440:
 5155               	.L292:
 5156 1938 0895      		ret
 5157               		.cfi_endproc
 5158               	.LFE13:
 5160               		.section	.rodata.str1.1
 5161               	.LC58:
 5162 0216 496E 7365 		.string	"Insert Image"
 5162      7274 2049 
 5162      6D61 6765 
 5162      00
 5163               	.LC59:
 5164 0223 5265 6D6F 		.string	"Remove Image"
 5164      7665 2049 
 5164      6D61 6765 
 5164      00
 5165               	.LC60:
 5166 0230 5772 6974 		.string	"Write Protect"
 5166      6520 5072 
 5166      6F74 6563 
 5166      7400 
 5167               	.LC61:
 5168 023e 4E65 7720 		.string	"New Image"
 5168      496D 6167 
 5168      6500 
 5169               	.LC62:
 5170 0248 5361 7665 		.string	"Save Image"
 5170      2049 6D61 
 5170      6765 00
 5171               	.LC63:
 5172 0253 5069 6E20 		.string	"Pin PB2"
 5172      5042 3200 
 5173               	.LC64:
 5174 025b 5069 6E20 		.string	"Pin PB3"
 5174      5042 3300 
 5175               	.LC65:
 5176 0263 5265 7374 		.string	"Restart"
 5176      6172 7400 
 5177               	.LC66:
 5178 026b 5665 7273 		.string	"Version"
 5178      696F 6E00 
 5179               	.LC67:
 5180 0273 5344 2043 		.string	"SD Card Info"
 5180      6172 6420 
 5180      496E 666F 
 5180      00
 5181               	.LC0:
 5182 0280 4469 736B 		.string	"Disk Image"
 5182      2049 6D61 
 5182      6765 00
 5183               	.LC1:
 5184 028b 5365 7474 		.string	"Settings"
 5184      696E 6773 
 5184      00
 5185               	.LC2:
 5186 0294 496E 666F 		.string	"Info"
 5186      00
 5187               		.section	.rodata
 5188               	.LC57:
 5189 0000 0000      		.word	.LC0
 5190 0002 01        		.byte	1
 5191 0003 01        		.byte	1
 5192 0004 00        		.byte	0
 5193 0005 0000      		.word	image_menu
 5194 0007 0000      		.word	.LC1
 5195 0009 02        		.byte	2
 5196 000a 01        		.byte	1
 5197 000b 00        		.byte	0
 5198 000c 0000      		.word	settings_menu
 5199 000e 0000      		.word	.LC2
 5200 0010 03        		.byte	3
 5201 0011 01        		.byte	1
 5202 0012 00        		.byte	0
 5203 0013 0000      		.word	info_menu
 5204               	.LC4:
 5205 0015 04        		.byte	4
 5206 0016 0E        		.byte	14
 5207 0017 1F        		.byte	31
 5208 0018 00        		.byte	0
 5209 0019 00        		.byte	0
 5210 001a 00        		.byte	0
 5211 001b 00        		.byte	0
 5212 001c 00        		.byte	0
 5213               	.LC5:
 5214 001d 00        		.byte	0
 5215 001e 00        		.byte	0
 5216 001f 00        		.byte	0
 5217 0020 00        		.byte	0
 5218 0021 1F        		.byte	31
 5219 0022 0E        		.byte	14
 5220 0023 04        		.byte	4
 5221 0024 00        		.byte	0
 5222               	.LC6:
 5223 0025 00        		.byte	0
 5224 0026 04        		.byte	4
 5225 0027 06        		.byte	6
 5226 0028 1F        		.byte	31
 5227 0029 06        		.byte	6
 5228 002a 04        		.byte	4
 5229 002b 00        		.byte	0
 5230 002c 00        		.byte	0
 5231               	.LC7:
 5232 002d 00        		.byte	0
 5233 002e 1C        		.byte	28
 5234 002f 1F        		.byte	31
 5235 0030 11        		.byte	17
 5236 0031 11        		.byte	17
 5237 0032 1F        		.byte	31
 5238 0033 00        		.byte	0
 5239 0034 00        		.byte	0
 5240               	.LC8:
 5241 0035 0F        		.byte	15
 5242 0036 1B        		.byte	27
 5243 0037 11        		.byte	17
 5244 0038 1B        		.byte	27
 5245 0039 1F        		.byte	31
 5246 003a 1B        		.byte	27
 5247 003b 1B        		.byte	27
 5248 003c 1F        		.byte	31
 5249               		.section	.text.startup,"ax",@progbits
 5250               	.global	main
 5252               	main:
 5253               	.LFB8:
  39:main.c        ****     while(1)
 5254               		.loc 1 39 0
 5255               		.cfi_startproc
 5256 0000 CF93      		push r28
 5257               	.LCFI99:
 5258               		.cfi_def_cfa_offset 3
 5259               		.cfi_offset 28, -2
 5260 0002 DF93      		push r29
 5261               	.LCFI100:
 5262               		.cfi_def_cfa_offset 4
 5263               		.cfi_offset 29, -3
 5264 0004 CDB7      		in r28,__SP_L__
 5265 0006 DEB7      		in r29,__SP_H__
 5266               	.LCFI101:
 5267               		.cfi_def_cfa_register 28
 5268 0008 C358      		subi r28,-125
 5269 000a D109      		sbc r29,__zero_reg__
 5270               	.LCFI102:
 5271               		.cfi_def_cfa_offset 135
 5272 000c 0FB6      		in __tmp_reg__,__SREG__
 5273 000e F894      		cli
 5274 0010 DEBF      		out __SP_H__,r29
 5275 0012 0FBE      		out __SREG__,__tmp_reg__
 5276 0014 CDBF      		out __SP_L__,r28
 5277               	/* prologue: function */
 5278               	/* frame size = 131 */
 5279               	/* stack size = 133 */
 5280               	.L__stack_usage = 133
 5281               	.LBB234:
  42:main.c        ****         reset();                // Alles initialisieren
 5282               		.loc 1 42 0
 5283 0016 6624      		clr r6
 5284 0018 6394      		inc r6
  49:main.c        ****         /// Setting Menü
 5285               		.loc 1 49 0
 5286 001a CE01      		movw r24,r28
 5287 001c 0196      		adiw r24,1
 5288 001e 6C01      		movw r12,r24
 5289 0020 80E0      		ldi r24,lo8(.LC58)
 5290 0022 882E      		mov r8,r24
 5291 0024 80E0      		ldi r24,hi8(.LC58)
 5292 0026 982E      		mov r9,r24
 5293 0028 93E0      		ldi r25,lo8(3)
 5294 002a 792E      		mov r7,r25
  51:main.c        ****         /// Info Menü
 5295               		.loc 1 51 0
 5296 002c 5E01      		movw r10,r28
 5297 002e 94E2      		ldi r25,36
 5298 0030 A90E      		add r10,r25
 5299 0032 B11C      		adc r11,__zero_reg__
  53:main.c        **** 
 5300               		.loc 1 53 0
 5301 0034 7E01      		movw r14,r28
 5302 0036 EEE4      		ldi r30,78
 5303 0038 EE0E      		add r14,r30
 5304 003a F11C      		adc r15,__zero_reg__
  55:main.c        ****         menu_init(&main_menu, main_menu_entrys, 3,LCD_LINE_COUNT);
 5305               		.loc 1 55 0
 5306 003c 02E0      		ldi r16,lo8(2)
 5307               	.L316:
  42:main.c        ****         reset();                // Alles initialisieren
 5308               		.loc 1 42 0
 5309 003e 6092 0000 		sts exit_main,r6
  43:main.c        **** 
 5310               		.loc 1 43 0
 5311 0042 0E94 0000 		call reset
 5312               	.LVL441:
  47:main.c        ****         /// Image Menü
 5313               		.loc 1 47 0
 5314 0046 85E1      		ldi r24,lo8(21)
 5315 0048 E0E0      		ldi r30,lo8(.LC57)
 5316 004a F0E0      		ldi r31,hi8(.LC57)
 5317 004c DE01      		movw r26,r28
 5318 004e D996      		adiw r26,57
 5319               		0:
 5320 0050 0190      		ld r0,Z+
 5321 0052 0D92      		st X+,r0
 5322 0054 8A95      		dec r24
 5323 0056 01F4      		brne 0b
  49:main.c        ****         /// Setting Menü
 5324               		.loc 1 49 0
 5325 0058 83E2      		ldi r24,lo8(35)
 5326 005a F601      		movw r30,r12
 5327               		0:
 5328 005c 1192      		st Z+,__zero_reg__
 5329 005e 8A95      		dec r24
 5330 0060 01F4      		brne 0b
 5331 0062 9A82      		std Y+2,r9
 5332 0064 8982      		std Y+1,r8
 5333 0066 85E0      		ldi r24,lo8(5)
 5334 0068 8B83      		std Y+3,r24
 5335 006a 80E0      		ldi r24,lo8(.LC59)
 5336 006c 90E0      		ldi r25,hi8(.LC59)
 5337 006e 9987      		std Y+9,r25
 5338 0070 8887      		std Y+8,r24
 5339 0072 86E0      		ldi r24,lo8(6)
 5340 0074 8A87      		std Y+10,r24
 5341 0076 80E0      		ldi r24,lo8(.LC60)
 5342 0078 90E0      		ldi r25,hi8(.LC60)
 5343 007a 988B      		std Y+16,r25
 5344 007c 8F87      		std Y+15,r24
 5345 007e 87E0      		ldi r24,lo8(7)
 5346 0080 898B      		std Y+17,r24
 5347 0082 7A8A      		std Y+18,r7
 5348 0084 6B8A      		std Y+19,r6
 5349 0086 80E0      		ldi r24,lo8(.LC61)
 5350 0088 90E0      		ldi r25,hi8(.LC61)
 5351 008a 9F8B      		std Y+23,r25
 5352 008c 8E8B      		std Y+22,r24
 5353 008e 18E0      		ldi r17,lo8(8)
 5354 0090 188F      		std Y+24,r17
 5355 0092 80E0      		ldi r24,lo8(.LC62)
 5356 0094 90E0      		ldi r25,hi8(.LC62)
 5357 0096 9E8F      		std Y+30,r25
 5358 0098 8D8F      		std Y+29,r24
 5359 009a 89E0      		ldi r24,lo8(9)
 5360 009c 8F8F      		std Y+31,r24
  51:main.c        ****         /// Info Menü
 5361               		.loc 1 51 0
 5362 009e 85E1      		ldi r24,lo8(21)
 5363 00a0 F501      		movw r30,r10
 5364               		0:
 5365 00a2 1192      		st Z+,__zero_reg__
 5366 00a4 8A95      		dec r24
 5367 00a6 01F4      		brne 0b
 5368 00a8 80E0      		ldi r24,lo8(.LC63)
 5369 00aa 90E0      		ldi r25,hi8(.LC63)
 5370 00ac 9DA3      		std Y+37,r25
 5371 00ae 8CA3      		std Y+36,r24
 5372 00b0 8BE0      		ldi r24,lo8(11)
 5373 00b2 8EA3      		std Y+38,r24
 5374 00b4 7FA2      		std Y+39,r7
 5375 00b6 80E0      		ldi r24,lo8(.LC64)
 5376 00b8 90E0      		ldi r25,hi8(.LC64)
 5377 00ba 9CA7      		std Y+44,r25
 5378 00bc 8BA7      		std Y+43,r24
 5379 00be 8CE0      		ldi r24,lo8(12)
 5380 00c0 8DA7      		std Y+45,r24
 5381 00c2 7EA6      		std Y+46,r7
 5382 00c4 80E0      		ldi r24,lo8(.LC65)
 5383 00c6 90E0      		ldi r25,hi8(.LC65)
 5384 00c8 9BAB      		std Y+51,r25
 5385 00ca 8AAB      		std Y+50,r24
 5386 00cc 8EE0      		ldi r24,lo8(14)
 5387 00ce 8CAB      		std Y+52,r24
  53:main.c        **** 
 5388               		.loc 1 53 0
 5389 00d0 F701      		movw r30,r14
 5390               		0:
 5391 00d2 1192      		st Z+,__zero_reg__
 5392 00d4 8A95      		dec r24
 5393 00d6 01F4      		brne 0b
 5394 00d8 80E0      		ldi r24,lo8(.LC66)
 5395 00da 90E0      		ldi r25,hi8(.LC66)
 5396 00dc F701      		movw r30,r14
 5397 00de 9183      		std Z+1,r25
 5398 00e0 8083      		st Z,r24
 5399 00e2 80E1      		ldi r24,lo8(16)
 5400 00e4 8283      		std Z+2,r24
 5401 00e6 80E0      		ldi r24,lo8(.LC67)
 5402 00e8 90E0      		ldi r25,hi8(.LC67)
 5403 00ea 9087      		std Z+8,r25
 5404 00ec 8783      		std Z+7,r24
 5405 00ee 81E1      		ldi r24,lo8(17)
 5406 00f0 8187      		std Z+9,r24
  55:main.c        ****         menu_init(&main_menu, main_menu_entrys, 3,LCD_LINE_COUNT);
 5407               		.loc 1 55 0
 5408 00f2 0093 0000 		sts main_menu+5,r16
  56:main.c        **** 
 5409               		.loc 1 56 0
 5410 00f6 24E0      		ldi r18,lo8(4)
 5411 00f8 43E0      		ldi r20,lo8(3)
 5412 00fa BE01      		movw r22,r28
 5413 00fc 675C      		subi r22,-57
 5414 00fe 7F4F      		sbci r23,-1
 5415 0100 80E0      		ldi r24,lo8(main_menu)
 5416 0102 90E0      		ldi r25,hi8(main_menu)
 5417 0104 0E94 0000 		call menu_init
 5418               	.LVL442:
  58:main.c        ****         menu_init(&image_menu, image_menu_entrys, 5,LCD_LINE_COUNT);
 5419               		.loc 1 58 0
 5420 0108 0093 0000 		sts image_menu+5,r16
  59:main.c        **** 
 5421               		.loc 1 59 0
 5422 010c 24E0      		ldi r18,lo8(4)
 5423 010e 45E0      		ldi r20,lo8(5)
 5424 0110 B601      		movw r22,r12
 5425 0112 80E0      		ldi r24,lo8(image_menu)
 5426 0114 90E0      		ldi r25,hi8(image_menu)
 5427 0116 0E94 0000 		call menu_init
 5428               	.LVL443:
  61:main.c        ****         menu_init(&settings_menu, settings_menu_entrys, 3,LCD_LINE_COUNT);
 5429               		.loc 1 61 0
 5430 011a 0093 0000 		sts settings_menu+5,r16
  62:main.c        **** 
 5431               		.loc 1 62 0
 5432 011e 24E0      		ldi r18,lo8(4)
 5433 0120 43E0      		ldi r20,lo8(3)
 5434 0122 B501      		movw r22,r10
 5435 0124 80E0      		ldi r24,lo8(settings_menu)
 5436 0126 90E0      		ldi r25,hi8(settings_menu)
 5437 0128 0E94 0000 		call menu_init
 5438               	.LVL444:
  64:main.c        ****         menu_init(&info_menu, info_menu_entrys, 2,LCD_LINE_COUNT);
 5439               		.loc 1 64 0
 5440 012c 0093 0000 		sts info_menu+5,r16
  65:main.c        **** 
 5441               		.loc 1 65 0
 5442 0130 24E0      		ldi r18,lo8(4)
 5443 0132 42E0      		ldi r20,lo8(2)
 5444 0134 B701      		movw r22,r14
 5445 0136 80E0      		ldi r24,lo8(info_menu)
 5446 0138 90E0      		ldi r25,hi8(info_menu)
 5447 013a 0E94 0000 		call menu_init
 5448               	.LVL445:
  67:main.c        **** 
 5449               		.loc 1 67 0
 5450 013e 80E0      		ldi r24,lo8(main_menu)
 5451 0140 90E0      		ldi r25,hi8(main_menu)
 5452 0142 0E94 0000 		call menu_set_root
 5453               	.LVL446:
  70:main.c        ****         lcd_generatechar(0, char00);
 5454               		.loc 1 70 0
 5455 0146 E0E0      		ldi r30,lo8(.LC4)
 5456 0148 F0E0      		ldi r31,hi8(.LC4)
 5457 014a DE01      		movw r26,r28
 5458 014c A458      		subi r26,-124
 5459 014e BF4F      		sbci r27,-1
 5460 0150 812F      		mov r24,r17
 5461               		0:
 5462 0152 0190      		ld r0,Z+
 5463 0154 0D92      		st X+,r0
 5464 0156 8A95      		dec r24
 5465 0158 01F4      		brne 0b
  71:main.c        ****         fb_lcd_more_top_char = 0;
 5466               		.loc 1 71 0
 5467 015a BE01      		movw r22,r28
 5468 015c 6458      		subi r22,-124
 5469 015e 7F4F      		sbci r23,-1
 5470 0160 80E0      		ldi r24,0
 5471 0162 0E94 0000 		call lcd_generatechar
 5472               	.LVL447:
  72:main.c        **** 
 5473               		.loc 1 72 0
 5474 0166 1092 0000 		sts fb_lcd_more_top_char,__zero_reg__
  76:main.c        ****         lcd_generatechar(1, char01);
 5475               		.loc 1 76 0
 5476 016a E0E0      		ldi r30,lo8(.LC5)
 5477 016c F0E0      		ldi r31,hi8(.LC5)
 5478 016e DE01      		movw r26,r28
 5479 0170 AC58      		subi r26,-116
 5480 0172 BF4F      		sbci r27,-1
 5481 0174 812F      		mov r24,r17
 5482               		0:
 5483 0176 0190      		ld r0,Z+
 5484 0178 0D92      		st X+,r0
 5485 017a 8A95      		dec r24
 5486 017c 01F4      		brne 0b
  77:main.c        ****         fb_lcd_more_down_char = 1;
 5487               		.loc 1 77 0
 5488 017e BE01      		movw r22,r28
 5489 0180 6C58      		subi r22,-116
 5490 0182 7F4F      		sbci r23,-1
 5491 0184 81E0      		ldi r24,lo8(1)
 5492 0186 0E94 0000 		call lcd_generatechar
 5493               	.LVL448:
  78:main.c        **** 
 5494               		.loc 1 78 0
 5495 018a 6092 0000 		sts fb_lcd_more_down_char,r6
  81:main.c        ****         lcd_generatechar(2, arrow_char);
 5496               		.loc 1 81 0
 5497 018e E0E0      		ldi r30,lo8(.LC6)
 5498 0190 F0E0      		ldi r31,hi8(.LC6)
 5499 0192 DE01      		movw r26,r28
 5500 0194 A459      		subi r26,-108
 5501 0196 BF4F      		sbci r27,-1
 5502 0198 812F      		mov r24,r17
 5503               		0:
 5504 019a 0190      		ld r0,Z+
 5505 019c 0D92      		st X+,r0
 5506 019e 8A95      		dec r24
 5507 01a0 01F4      		brne 0b
  82:main.c        ****         fb_lcd_cursor_char = 2;
 5508               		.loc 1 82 0
 5509 01a2 BE01      		movw r22,r28
 5510 01a4 6459      		subi r22,-108
 5511 01a6 7F4F      		sbci r23,-1
 5512 01a8 82E0      		ldi r24,lo8(2)
 5513 01aa 0E94 0000 		call lcd_generatechar
 5514               	.LVL449:
  83:main.c        **** 
 5515               		.loc 1 83 0
 5516 01ae 0093 0000 		sts fb_lcd_cursor_char,r16
  86:main.c        ****         lcd_generatechar(3, dir_char);
 5517               		.loc 1 86 0
 5518 01b2 E0E0      		ldi r30,lo8(.LC7)
 5519 01b4 F0E0      		ldi r31,hi8(.LC7)
 5520 01b6 DE01      		movw r26,r28
 5521 01b8 AC59      		subi r26,-100
 5522 01ba BF4F      		sbci r27,-1
 5523 01bc 812F      		mov r24,r17
 5524               		0:
 5525 01be 0190      		ld r0,Z+
 5526 01c0 0D92      		st X+,r0
 5527 01c2 8A95      		dec r24
 5528 01c4 01F4      		brne 0b
  87:main.c        ****         fb_lcd_dir_char = 3;
 5529               		.loc 1 87 0
 5530 01c6 BE01      		movw r22,r28
 5531 01c8 6C59      		subi r22,-100
 5532 01ca 7F4F      		sbci r23,-1
 5533 01cc 83E0      		ldi r24,lo8(3)
 5534 01ce 0E94 0000 		call lcd_generatechar
 5535               	.LVL450:
  88:main.c        **** 
 5536               		.loc 1 88 0
 5537 01d2 7092 0000 		sts fb_lcd_dir_char,r7
  91:main.c        ****         lcd_generatechar(4, diskimage_char);
 5538               		.loc 1 91 0
 5539 01d6 E0E0      		ldi r30,lo8(.LC8)
 5540 01d8 F0E0      		ldi r31,hi8(.LC8)
 5541 01da DE01      		movw r26,r28
 5542 01dc A45A      		subi r26,-92
 5543 01de BF4F      		sbci r27,-1
 5544               		0:
 5545 01e0 0190      		ld r0,Z+
 5546 01e2 0D92      		st X+,r0
 5547 01e4 1A95      		dec r17
 5548 01e6 01F4      		brne 0b
  92:main.c        ****         fb_lcd_disk_char = 4;
 5549               		.loc 1 92 0
 5550 01e8 BE01      		movw r22,r28
 5551 01ea 645A      		subi r22,-92
 5552 01ec 7F4F      		sbci r23,-1
 5553 01ee 84E0      		ldi r24,lo8(4)
 5554 01f0 0E94 0000 		call lcd_generatechar
 5555               	.LVL451:
  93:main.c        **** 
 5556               		.loc 1 93 0
 5557 01f4 84E0      		ldi r24,lo8(4)
 5558 01f6 8093 0000 		sts fb_lcd_disk_char,r24
 5559               	.L314:
  96:main.c        ****         {
 5560               		.loc 1 96 0
 5561 01fa 8091 0000 		lds r24,exit_main
 5562 01fe 8823      		tst r24
 5563 0200 01F0      		breq .L317
  98:main.c        ****             check_motor_signal();
 5564               		.loc 1 98 0
 5565 0202 0E94 0000 		call check_stepper_signals
 5566               	.LVL452:
  99:main.c        ****             update_gui();
 5567               		.loc 1 99 0
 5568 0206 0E94 0000 		call check_motor_signal
 5569               	.LVL453:
 100:main.c        ****         }
 5570               		.loc 1 100 0
 5571 020a 0E94 0000 		call update_gui
 5572               	.LVL454:
 5573 020e 00C0      		rjmp .L314
 5574               	.L317:
 103:main.c        ****     }
 5575               		.loc 1 103 0
 5576 0210 0E94 0000 		call release_sd_card
 5577               	.LVL455:
 5578               	.LBE234:
 104:main.c        **** }
 5579               		.loc 1 104 0
 5580 0214 00C0      		rjmp .L316
 5581               		.cfi_endproc
 5582               	.LFE8:
 5584               		.text
 5585               	.global	__vector_4
 5587               	__vector_4:
 5588               	.LFB54:
1585:main.c        ****     }
1586:main.c        **** }
1587:main.c        **** 
1588:main.c        **** /////////////////////////////////////////////////////////////////////
1589:main.c        **** 
1590:main.c        **** // Interrupt Service Routinen
1591:main.c        **** 
1592:main.c        **** ISR (PCINT0_vect)
1593:main.c        **** {
 5589               		.loc 1 1593 0
 5590               		.cfi_startproc
 5591 193a 1F92      		push r1
 5592               	.LCFI103:
 5593               		.cfi_def_cfa_offset 3
 5594               		.cfi_offset 1, -2
 5595 193c 0F92      		push r0
 5596               	.LCFI104:
 5597               		.cfi_def_cfa_offset 4
 5598               		.cfi_offset 0, -3
 5599 193e 0FB6      		in r0,__SREG__
 5600 1940 0F92      		push r0
 5601 1942 1124      		clr __zero_reg__
 5602 1944 0BB6      		in r0,__RAMPZ__
 5603 1946 0F92      		push r0
 5604 1948 8F93      		push r24
 5605               	.LCFI105:
 5606               		.cfi_def_cfa_offset 5
 5607               		.cfi_offset 24, -4
 5608 194a EF93      		push r30
 5609               	.LCFI106:
 5610               		.cfi_def_cfa_offset 6
 5611               		.cfi_offset 30, -5
 5612 194c FF93      		push r31
 5613               	.LCFI107:
 5614               		.cfi_def_cfa_offset 7
 5615               		.cfi_offset 31, -6
 5616               	/* prologue: Signal */
 5617               	/* frame size = 0 */
 5618               	/* stack size = 7 */
 5619               	.L__stack_usage = 7
1594:main.c        ****     // Stepper Signale an PA6 und PA7
1595:main.c        ****     stepper_signal_puffer[stepper_signal_w_pos] = STP_PIN & 0xc0;
 5620               		.loc 1 1595 0
 5621 194e E091 0000 		lds r30,stepper_signal_w_pos
 5622 1952 80B1      		in r24,0
 5623 1954 F0E0      		ldi r31,0
 5624 1956 E050      		subi r30,lo8(-(stepper_signal_puffer))
 5625 1958 F040      		sbci r31,hi8(-(stepper_signal_puffer))
 5626 195a 807C      		andi r24,lo8(-64)
 5627 195c 8083      		st Z,r24
1596:main.c        ****     stepper_signal_w_pos++;
 5628               		.loc 1 1596 0
 5629 195e 8091 0000 		lds r24,stepper_signal_w_pos
 5630 1962 8F5F      		subi r24,lo8(-(1))
 5631 1964 8093 0000 		sts stepper_signal_w_pos,r24
 5632               	/* epilogue start */
1597:main.c        **** }
 5633               		.loc 1 1597 0
 5634 1968 FF91      		pop r31
 5635 196a EF91      		pop r30
 5636 196c 8F91      		pop r24
 5637 196e 0F90      		pop r0
 5638 1970 0BBE      		out __RAMPZ__,r0
 5639 1972 0F90      		pop r0
 5640 1974 0FBE      		out __SREG__,r0
 5641 1976 0F90      		pop r0
 5642 1978 1F90      		pop r1
 5643 197a 1895      		reti
 5644               		.cfi_endproc
 5645               	.LFE54:
 5647               	.global	__vector_16
 5649               	__vector_16:
 5650               	.LFB55:
1598:main.c        **** 
1599:main.c        **** ISR (TIMER0_COMPA_vect)
1600:main.c        **** {
 5651               		.loc 1 1600 0
 5652               		.cfi_startproc
 5653 197c 1F92      		push r1
 5654               	.LCFI108:
 5655               		.cfi_def_cfa_offset 3
 5656               		.cfi_offset 1, -2
 5657 197e 0F92      		push r0
 5658               	.LCFI109:
 5659               		.cfi_def_cfa_offset 4
 5660               		.cfi_offset 0, -3
 5661 1980 0FB6      		in r0,__SREG__
 5662 1982 0F92      		push r0
 5663 1984 1124      		clr __zero_reg__
 5664 1986 0BB6      		in r0,__RAMPZ__
 5665 1988 0F92      		push r0
 5666 198a 2F93      		push r18
 5667               	.LCFI110:
 5668               		.cfi_def_cfa_offset 5
 5669               		.cfi_offset 18, -4
 5670 198c 3F93      		push r19
 5671               	.LCFI111:
 5672               		.cfi_def_cfa_offset 6
 5673               		.cfi_offset 19, -5
 5674 198e 8F93      		push r24
 5675               	.LCFI112:
 5676               		.cfi_def_cfa_offset 7
 5677               		.cfi_offset 24, -6
 5678 1990 9F93      		push r25
 5679               	.LCFI113:
 5680               		.cfi_def_cfa_offset 8
 5681               		.cfi_offset 25, -7
 5682 1992 EF93      		push r30
 5683               	.LCFI114:
 5684               		.cfi_def_cfa_offset 9
 5685               		.cfi_offset 30, -8
 5686 1994 FF93      		push r31
 5687               	.LCFI115:
 5688               		.cfi_def_cfa_offset 10
 5689               		.cfi_offset 31, -9
 5690               	/* prologue: Signal */
 5691               	/* frame size = 0 */
 5692               	/* stack size = 10 */
 5693               	.L__stack_usage = 10
1601:main.c        ****     // ISR wird alle 26,28,30 oder 32µs ausfgrufen
1602:main.c        ****     // Je nach dem welche Spur gerade aktiv ist
1603:main.c        **** 
1604:main.c        ****     stepper_signal_time++;
 5694               		.loc 1 1604 0
 5695 1996 8091 0000 		lds r24,stepper_signal_time
 5696 199a 8F5F      		subi r24,lo8(-(1))
 5697 199c 8093 0000 		sts stepper_signal_time,r24
1605:main.c        **** 
1606:main.c        ****     static uint8_t old_gcr_byte = 0;
1607:main.c        ****     uint8_t is_sync;
1608:main.c        **** 
1609:main.c        ****     if(get_so_status())     // Wenn OE HI dann von Prot lesen
 5698               		.loc 1 1609 0
 5699 19a0 359B      		sbis 0x6,5
 5700 19a2 00C0      		rjmp .L320
1610:main.c        ****     {
1611:main.c        ****         // LESE MODUS
1612:main.c        ****         // Daten aus Ringpuffer senden wenn Motor an und ein Image gemountet ist
1613:main.c        ****         if(get_motor_status() && is_image_mount)
 5701               		.loc 1 1613 0
 5702 19a4 329B      		sbis 0x6,2
 5703 19a6 00C0      		rjmp .L321
 5704               		.loc 1 1613 0 is_stmt 0 discriminator 1
 5705 19a8 8091 0000 		lds r24,is_image_mount
 5706 19ac 8823      		tst r24
 5707 19ae 01F0      		breq .L321
1614:main.c        ****         {                                                               // Wenn Motor läuft
1615:main.c        ****             akt_gcr_byte = gcr_track[akt_track_pos++];                  // Nächstes GCR Byte holen
 5708               		.loc 1 1615 0 is_stmt 1
 5709 19b0 8091 0000 		lds r24,akt_track_pos
 5710 19b4 9091 0000 		lds r25,akt_track_pos+1
 5711 19b8 9C01      		movw r18,r24
 5712 19ba 2F5F      		subi r18,-1
 5713 19bc 3F4F      		sbci r19,-1
 5714 19be 3093 0000 		sts akt_track_pos+1,r19
 5715 19c2 2093 0000 		sts akt_track_pos,r18
 5716 19c6 FC01      		movw r30,r24
 5717 19c8 E050      		subi r30,lo8(-(gcr_track))
 5718 19ca F040      		sbci r31,hi8(-(gcr_track))
 5719 19cc 8081      		ld r24,Z
 5720 19ce 8093 0000 		sts akt_gcr_byte,r24
1616:main.c        ****             if(akt_track_pos == gcr_track_length) akt_track_pos = 0;    // Ist Spurende erreicht? Z
 5721               		.loc 1 1616 0
 5722 19d2 2091 0000 		lds r18,akt_track_pos
 5723 19d6 3091 0000 		lds r19,akt_track_pos+1
 5724 19da 8091 0000 		lds r24,gcr_track_length
 5725 19de 9091 0000 		lds r25,gcr_track_length+1
 5726 19e2 2817      		cp r18,r24
 5727 19e4 3907      		cpc r19,r25
 5728 19e6 01F4      		brne .L322
 5729               		.loc 1 1616 0 is_stmt 0 discriminator 1
 5730 19e8 1092 0000 		sts akt_track_pos+1,__zero_reg__
 5731 19ec 1092 0000 		sts akt_track_pos,__zero_reg__
 5732               	.L322:
1617:main.c        **** 
1618:main.c        **** 
1619:main.c        ****             if((akt_gcr_byte == 0xff) && (old_gcr_byte == 0xff))        // Prüfen auf SYNC (mindes
 5733               		.loc 1 1619 0 is_stmt 1
 5734 19f0 8091 0000 		lds r24,akt_gcr_byte
 5735 19f4 8F3F      		cpi r24,lo8(-1)
 5736 19f6 01F4      		brne .L323
 5737               		.loc 1 1619 0 is_stmt 0 discriminator 1
 5738 19f8 8091 0000 		lds r24,old_gcr_byte.3054
 5739 19fc 8F3F      		cpi r24,lo8(-1)
 5740 19fe 01F4      		brne .L323
1620:main.c        ****             {                                                           // Wenn SYNC
1621:main.c        ****                 clear_sync();                                           // SYNC Leitung auf Low set
 5741               		.loc 1 1621 0 is_stmt 1
 5742 1a00 4198      		cbi 0x8,1
 5743               	.LVL456:
1622:main.c        ****                 is_sync = 1;                                            // SYNC Merker auf 1
 5744               		.loc 1 1622 0
 5745 1a02 81E0      		ldi r24,lo8(1)
 5746 1a04 00C0      		rjmp .L324
 5747               	.LVL457:
 5748               	.L323:
1623:main.c        ****             }
1624:main.c        ****                 else
1625:main.c        ****             {                                                           // Wenn kein SYNC
1626:main.c        ****                 set_sync();                                             // SYNC Leitung auf High se
 5749               		.loc 1 1626 0
 5750 1a06 419A      		sbi 0x8,1
 5751               	.LVL458:
 5752 1a08 00C0      		rjmp .L340
 5753               	.LVL459:
 5754               	.L321:
1627:main.c        ****                 is_sync = 0;                                            // SYNC Merker auf 0
1628:main.c        ****             }
1629:main.c        ****         }
1630:main.c        ****         else
1631:main.c        ****         {                                                               // Wenn Motor nicht läuft
1632:main.c        ****             akt_gcr_byte = 0x00;                                        // 0 senden wenn Motor aus
 5755               		.loc 1 1632 0
 5756 1a0a 1092 0000 		sts akt_gcr_byte,__zero_reg__
 5757               	.L340:
 5758               	.LVL460:
1633:main.c        ****             is_sync = 0;                                                // SYNC Merker auf 0
 5759               		.loc 1 1633 0
 5760 1a0e 80E0      		ldi r24,0
 5761               	.LVL461:
 5762               	.L324:
1634:main.c        ****         }
1635:main.c        **** 
1636:main.c        ****         // SOE
1637:main.c        ****         // Unabhängig ob der Motor läuft oder nicht
1638:main.c        ****         if(get_soe_status())
 5763               		.loc 1 1638 0
 5764 1a10 369B      		sbis 0x6,6
 5765 1a12 00C0      		rjmp .L326
1639:main.c        ****         {
1640:main.c        ****         if(!is_sync)
 5766               		.loc 1 1640 0
 5767 1a14 8111      		cpse r24,__zero_reg__
 5768 1a16 00C0      		rjmp .L326
1641:main.c        ****             {
1642:main.c        ****                 DATA_DDR = 0xff;
 5769               		.loc 1 1642 0
 5770 1a18 8FEF      		ldi r24,lo8(-1)
 5771               	.LVL462:
 5772 1a1a 8AB9      		out 0xa,r24
1643:main.c        ****                 out_gcr_byte(akt_gcr_byte);
 5773               		.loc 1 1643 0
 5774 1a1c 8091 0000 		lds r24,akt_gcr_byte
 5775 1a20 8BB9      		out 0xb,r24
1644:main.c        **** 
1645:main.c        ****                 if(no_byte_ready_send == 0)
 5776               		.loc 1 1645 0
 5777 1a22 8091 0000 		lds r24,no_byte_ready_send
 5778 1a26 8111      		cpse r24,__zero_reg__
 5779 1a28 00C0      		rjmp .L326
1646:main.c        ****                 {
1647:main.c        ****                     // BYTE_READY für 3µs löschen
1648:main.c        ****                     clear_byte_ready();
 5780               		.loc 1 1648 0
 5781 1a2a 389A      		sbi 0x7,0
 5782               	.LVL463:
 5783               	.LBB235:
 5784               	.LBB236:
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 5785               		.loc 2 276 0
 5786 1a2c 88E1      		ldi r24,lo8(24)
 5787 1a2e 8A95      	1:	dec r24
 5788 1a30 01F4      		brne 1b
 5789               	.LVL464:
 5790               	.LBE236:
 5791               	.LBE235:
1649:main.c        ****                     _delay_us(3);
1650:main.c        ****                     set_byte_ready();
 5792               		.loc 1 1650 0
 5793 1a32 3898      		cbi 0x7,0
 5794               	.L326:
1651:main.c        ****                 }
1652:main.c        ****             }
1653:main.c        ****         // else --> kein Byte senden !!
1654:main.c        ****         }
1655:main.c        ****         old_gcr_byte = akt_gcr_byte;
 5795               		.loc 1 1655 0
 5796 1a34 8091 0000 		lds r24,akt_gcr_byte
 5797 1a38 8093 0000 		sts old_gcr_byte.3054,r24
 5798 1a3c 00C0      		rjmp .L319
 5799               	.L320:
1656:main.c        ****     }
1657:main.c        ****     else
1658:main.c        ****     {
1659:main.c        ****         // SCHREIB MODUS
1660:main.c        **** 
1661:main.c        ****         // SOE
1662:main.c        ****         // Unabhängig ob der Motor läuft oder nicht
1663:main.c        ****         if(get_soe_status())
 5800               		.loc 1 1663 0
 5801 1a3e 369B      		sbis 0x6,6
 5802 1a40 00C0      		rjmp .L330
1664:main.c        ****         {
1665:main.c        ****             DATA_DDR = 0x00;
 5803               		.loc 1 1665 0
 5804 1a42 1AB8      		out 0xa,__zero_reg__
1666:main.c        ****             akt_gcr_byte = in_gcr_byte;
 5805               		.loc 1 1666 0
 5806 1a44 89B1      		in r24,0x9
 5807 1a46 8093 0000 		sts akt_gcr_byte,r24
1667:main.c        **** 
1668:main.c        ****             // BYTE_READY für 3µs löschen
1669:main.c        ****             if(no_byte_ready_send == 0)
 5808               		.loc 1 1669 0
 5809 1a4a 8091 0000 		lds r24,no_byte_ready_send
 5810 1a4e 8111      		cpse r24,__zero_reg__
 5811 1a50 00C0      		rjmp .L330
1670:main.c        ****             {
1671:main.c        ****                 clear_byte_ready();
 5812               		.loc 1 1671 0
 5813 1a52 389A      		sbi 0x7,0
 5814               	.LVL465:
 5815               	.LBB237:
 5816               	.LBB238:
 5817               		.loc 2 276 0
 5818 1a54 88E1      		ldi r24,lo8(24)
 5819 1a56 8A95      	1:	dec r24
 5820 1a58 01F4      		brne 1b
 5821               	.LVL466:
 5822               	.LBE238:
 5823               	.LBE237:
1672:main.c        ****                 _delay_us(3);
1673:main.c        ****                 set_byte_ready();
 5824               		.loc 1 1673 0
 5825 1a5a 3898      		cbi 0x7,0
 5826               	.L330:
1674:main.c        ****             }
1675:main.c        ****         }
1676:main.c        **** 
1677:main.c        ****         // Daten aus Ringpuffer senden wenn Motor an
1678:main.c        ****         if(get_motor_status())
 5827               		.loc 1 1678 0
 5828 1a5c 329B      		sbis 0x6,2
 5829 1a5e 00C0      		rjmp .L319
1679:main.c        ****         {
1680:main.c        ****             // Wenn Motor läuft
1681:main.c        ****             gcr_track[akt_track_pos++] = akt_gcr_byte;                  // Nächstes GCR Byte schre
 5830               		.loc 1 1681 0
 5831 1a60 8091 0000 		lds r24,akt_track_pos
 5832 1a64 9091 0000 		lds r25,akt_track_pos+1
 5833 1a68 9C01      		movw r18,r24
 5834 1a6a 2F5F      		subi r18,-1
 5835 1a6c 3F4F      		sbci r19,-1
 5836 1a6e 3093 0000 		sts akt_track_pos+1,r19
 5837 1a72 2093 0000 		sts akt_track_pos,r18
 5838 1a76 2091 0000 		lds r18,akt_gcr_byte
 5839 1a7a FC01      		movw r30,r24
 5840 1a7c E050      		subi r30,lo8(-(gcr_track))
 5841 1a7e F040      		sbci r31,hi8(-(gcr_track))
 5842 1a80 2083      		st Z,r18
1682:main.c        ****             track_is_written = 1;
 5843               		.loc 1 1682 0
 5844 1a82 81E0      		ldi r24,lo8(1)
 5845 1a84 8093 0000 		sts track_is_written,r24
1683:main.c        ****             if(akt_track_pos == gcr_track_length) akt_track_pos = 0;    // Ist Spurende erreicht? Z
 5846               		.loc 1 1683 0
 5847 1a88 2091 0000 		lds r18,akt_track_pos
 5848 1a8c 3091 0000 		lds r19,akt_track_pos+1
 5849 1a90 8091 0000 		lds r24,gcr_track_length
 5850 1a94 9091 0000 		lds r25,gcr_track_length+1
 5851 1a98 2817      		cp r18,r24
 5852 1a9a 3907      		cpc r19,r25
 5853 1a9c 01F4      		brne .L319
 5854               		.loc 1 1683 0 is_stmt 0 discriminator 1
 5855 1a9e 1092 0000 		sts akt_track_pos+1,__zero_reg__
 5856 1aa2 1092 0000 		sts akt_track_pos,__zero_reg__
 5857               	.L319:
 5858               	/* epilogue start */
1684:main.c        ****         }
1685:main.c        ****     }
1686:main.c        **** }
 5859               		.loc 1 1686 0 is_stmt 1
 5860 1aa6 FF91      		pop r31
 5861 1aa8 EF91      		pop r30
 5862 1aaa 9F91      		pop r25
 5863 1aac 8F91      		pop r24
 5864 1aae 3F91      		pop r19
 5865 1ab0 2F91      		pop r18
 5866 1ab2 0F90      		pop r0
 5867 1ab4 0BBE      		out __RAMPZ__,r0
 5868 1ab6 0F90      		pop r0
 5869 1ab8 0FBE      		out __SREG__,r0
 5870 1aba 0F90      		pop r0
 5871 1abc 1F90      		pop r1
 5872 1abe 1895      		reti
 5873               		.cfi_endproc
 5874               	.LFE55:
 5876               	.global	__vector_9
 5878               	__vector_9:
 5879               	.LFB56:
1687:main.c        **** 
1688:main.c        **** /////////////////////////////////////////////////////////////////////
1689:main.c        **** 
1690:main.c        **** ISR (TIMER2_COMPA_vect)
1691:main.c        **** {
 5880               		.loc 1 1691 0
 5881               		.cfi_startproc
 5882 1ac0 1F92      		push r1
 5883               	.LCFI116:
 5884               		.cfi_def_cfa_offset 3
 5885               		.cfi_offset 1, -2
 5886 1ac2 0F92      		push r0
 5887               	.LCFI117:
 5888               		.cfi_def_cfa_offset 4
 5889               		.cfi_offset 0, -3
 5890 1ac4 0FB6      		in r0,__SREG__
 5891 1ac6 0F92      		push r0
 5892 1ac8 1124      		clr __zero_reg__
 5893 1aca 0BB6      		in r0,__RAMPZ__
 5894 1acc 0F92      		push r0
 5895 1ace 2F93      		push r18
 5896               	.LCFI118:
 5897               		.cfi_def_cfa_offset 5
 5898               		.cfi_offset 18, -4
 5899 1ad0 3F93      		push r19
 5900               	.LCFI119:
 5901               		.cfi_def_cfa_offset 6
 5902               		.cfi_offset 19, -5
 5903 1ad2 4F93      		push r20
 5904               	.LCFI120:
 5905               		.cfi_def_cfa_offset 7
 5906               		.cfi_offset 20, -6
 5907 1ad4 5F93      		push r21
 5908               	.LCFI121:
 5909               		.cfi_def_cfa_offset 8
 5910               		.cfi_offset 21, -7
 5911 1ad6 8F93      		push r24
 5912               	.LCFI122:
 5913               		.cfi_def_cfa_offset 9
 5914               		.cfi_offset 24, -8
 5915 1ad8 9F93      		push r25
 5916               	.LCFI123:
 5917               		.cfi_def_cfa_offset 10
 5918               		.cfi_offset 25, -9
 5919 1ada AF93      		push r26
 5920               	.LCFI124:
 5921               		.cfi_def_cfa_offset 11
 5922               		.cfi_offset 26, -10
 5923 1adc BF93      		push r27
 5924               	.LCFI125:
 5925               		.cfi_def_cfa_offset 12
 5926               		.cfi_offset 27, -11
 5927 1ade EF93      		push r30
 5928               	.LCFI126:
 5929               		.cfi_def_cfa_offset 13
 5930               		.cfi_offset 30, -12
 5931 1ae0 FF93      		push r31
 5932               	.LCFI127:
 5933               		.cfi_def_cfa_offset 14
 5934               		.cfi_offset 31, -13
 5935               	/* prologue: Signal */
 5936               	/* frame size = 0 */
 5937               	/* stack size = 14 */
 5938               	.L__stack_usage = 14
1692:main.c        ****     // ISR wird alle 2ms (500Hz) aufgerufen
1693:main.c        **** 
1694:main.c        ****     volatile static uint8_t counter0 = 0;
1695:main.c        **** 
1696:main.c        ****     volatile static uint16_t counter1 = 0;
1697:main.c        ****     volatile static uint8_t key2_is_pressed = 0;
1698:main.c        ****     volatile static uint8_t key2_next_up_is_invalid = 0;
1699:main.c        **** 
1700:main.c        ****     volatile static uint8_t old_drehgeber = 0;
1701:main.c        ****     uint8_t pos_change;	// 0=keine Änderung 1=hoch 2=runter
1702:main.c        **** 
1703:main.c        ****     /// Drehencoder
1704:main.c        ****     if(input_mode == INPUT_MODE_ENCODER)
 5939               		.loc 1 1704 0
 5940 1ae2 4091 0000 		lds r20,input_mode
 5941 1ae6 4130      		cpi r20,lo8(1)
 5942 1ae8 01F4      		brne .L342
1705:main.c        ****     {
1706:main.c        ****         old_drehgeber = (old_drehgeber << 2)  & 0x0F;
 5943               		.loc 1 1706 0
 5944 1aea 8091 0000 		lds r24,old_drehgeber.3065
 5945 1aee 24E0      		ldi r18,lo8(4)
 5946 1af0 829F      		mul r24,r18
 5947 1af2 C001      		movw r24,r0
 5948 1af4 1124      		clr __zero_reg__
 5949 1af6 8F70      		andi r24,lo8(15)
 5950 1af8 8093 0000 		sts old_drehgeber.3065,r24
1707:main.c        ****         if (PHASE_1A) old_drehgeber |=2;
 5951               		.loc 1 1707 0
 5952 1afc 199B      		sbis 0x3,1
 5953 1afe 00C0      		rjmp .L343
 5954               		.loc 1 1707 0 is_stmt 0 discriminator 1
 5955 1b00 8091 0000 		lds r24,old_drehgeber.3065
 5956 1b04 8260      		ori r24,lo8(2)
 5957 1b06 8093 0000 		sts old_drehgeber.3065,r24
 5958               	.L343:
1708:main.c        ****         if (PHASE_1B) old_drehgeber |=1;
 5959               		.loc 1 1708 0 is_stmt 1
 5960 1b0a 189B      		sbis 0x3,0
 5961 1b0c 00C0      		rjmp .L344
 5962               		.loc 1 1708 0 is_stmt 0 discriminator 1
 5963 1b0e 8091 0000 		lds r24,old_drehgeber.3065
 5964 1b12 8160      		ori r24,lo8(1)
 5965 1b14 8093 0000 		sts old_drehgeber.3065,r24
 5966               	.L344:
 5967               	.LBB239:
1709:main.c        ****         pos_change = (char)pgm_read_byte(&drehimp_tab[old_drehgeber]);
 5968               		.loc 1 1709 0 is_stmt 1
 5969 1b18 E091 0000 		lds r30,old_drehgeber.3065
 5970               	.LVL467:
 5971 1b1c F0E0      		ldi r31,0
 5972 1b1e E050      		subi r30,lo8(-(drehimp_tab))
 5973 1b20 F040      		sbci r31,hi8(-(drehimp_tab))
 5974               	.LVL468:
 5975               	/* #APP */
 5976               	 ;  1709 "main.c" 1
 5977 1b22 E491      		lpm r30, Z
 5978               		
 5979               	 ;  0 "" 2
 5980               	.LVL469:
 5981               	/* #NOAPP */
 5982               	.LBE239:
1710:main.c        **** 
1711:main.c        ****         switch(pos_change)
 5983               		.loc 1 1711 0
 5984 1b24 E130      		cpi r30,lo8(1)
 5985 1b26 01F0      		breq .L346
 5986 1b28 E230      		cpi r30,lo8(2)
 5987 1b2a 01F4      		brne .L345
1712:main.c        ****         {
1713:main.c        ****         case 1:
1714:main.c        ****             key_buffer[key_buffer_w_pos++] = KEY0_DOWN;
1715:main.c        ****             break;
1716:main.c        ****         case 2:
1717:main.c        ****             key_buffer[key_buffer_w_pos++] = KEY1_DOWN;
 5988               		.loc 1 1717 0
 5989 1b2c A091 0000 		lds r26,key_buffer_w_pos
 5990 1b30 81E0      		ldi r24,lo8(1)
 5991 1b32 8A0F      		add r24,r26
 5992 1b34 8093 0000 		sts key_buffer_w_pos,r24
 5993 1b38 B0E0      		ldi r27,0
 5994 1b3a A050      		subi r26,lo8(-(key_buffer))
 5995 1b3c B040      		sbci r27,hi8(-(key_buffer))
 5996 1b3e EC93      		st X,r30
1718:main.c        ****             break;
 5997               		.loc 1 1718 0
 5998 1b40 00C0      		rjmp .L345
 5999               	.L346:
1714:main.c        ****             break;
 6000               		.loc 1 1714 0
 6001 1b42 E091 0000 		lds r30,key_buffer_w_pos
 6002               	.LVL470:
 6003 1b46 81E0      		ldi r24,lo8(1)
 6004 1b48 8E0F      		add r24,r30
 6005 1b4a 8093 0000 		sts key_buffer_w_pos,r24
 6006 1b4e F0E0      		ldi r31,0
 6007 1b50 E050      		subi r30,lo8(-(key_buffer))
 6008 1b52 F040      		sbci r31,hi8(-(key_buffer))
 6009 1b54 1082      		st Z,__zero_reg__
 6010               	.L345:
1719:main.c        ****         default:
1720:main.c        ****             break;
1721:main.c        ****         }
1722:main.c        ****         key_buffer_w_pos &= 0x0f;
 6011               		.loc 1 1722 0
 6012 1b56 8091 0000 		lds r24,key_buffer_w_pos
 6013 1b5a 8F70      		andi r24,lo8(15)
 6014 1b5c 8093 0000 		sts key_buffer_w_pos,r24
 6015               	.L342:
1723:main.c        ****     }
1724:main.c        **** 
1725:main.c        ****     if(counter0 < 25)
 6016               		.loc 1 1725 0
 6017 1b60 8091 0000 		lds r24,counter0.3061
 6018 1b64 8931      		cpi r24,lo8(25)
 6019 1b66 00F4      		brsh .L348
1726:main.c        ****     {
1727:main.c        ****         counter0++;
 6020               		.loc 1 1727 0
 6021 1b68 8091 0000 		lds r24,counter0.3061
 6022 1b6c 8F5F      		subi r24,lo8(-(1))
 6023 1b6e 8093 0000 		sts counter0.3061,r24
1728:main.c        ****         return 0;
 6024               		.loc 1 1728 0
 6025 1b72 00C0      		rjmp .L341
 6026               	.L348:
1729:main.c        ****     }
1730:main.c        **** 
1731:main.c        ****     // Alle 50ms ab hier //
1732:main.c        **** 
1733:main.c        ****     counter0 = 0;
 6027               		.loc 1 1733 0
 6028 1b74 1092 0000 		sts counter0.3061,__zero_reg__
1734:main.c        ****     counter1++;
 6029               		.loc 1 1734 0
 6030 1b78 8091 0000 		lds r24,counter1.3062
 6031 1b7c 9091 0000 		lds r25,counter1.3062+1
 6032 1b80 0196      		adiw r24,1
 6033 1b82 9093 0000 		sts counter1.3062+1,r25
 6034 1b86 8093 0000 		sts counter1.3062,r24
1735:main.c        **** 
1736:main.c        ****     volatile static uint8_t old_key0 = 0;
1737:main.c        ****     volatile static uint8_t old_key1 = 0;
1738:main.c        ****     volatile static uint8_t old_key2 = 0;
1739:main.c        **** 
1740:main.c        ****     uint8_t key0 = get_key0();
 6035               		.loc 1 1740 0
 6036 1b8a 33B1      		in r19,0x3
 6037 1b8c 3170      		andi r19,lo8(1)
 6038 1b8e 51E0      		ldi r21,lo8(1)
 6039 1b90 232F      		mov r18,r19
 6040 1b92 2527      		eor r18,r21
 6041               	.LVL471:
1741:main.c        ****     uint8_t key1 = get_key1();
 6042               		.loc 1 1741 0
 6043 1b94 93B1      		in r25,0x3
 6044 1b96 9095      		com r25
 6045 1b98 9270      		andi r25,lo8(2)
 6046               	.LVL472:
1742:main.c        ****     uint8_t key2 = get_key2();
 6047               		.loc 1 1742 0
 6048 1b9a 86B1      		in r24,0x6
 6049 1b9c 8095      		com r24
 6050 1b9e 8870      		andi r24,lo8(8)
 6051               	.LVL473:
1743:main.c        **** 
1744:main.c        ****     if(input_mode == INPUT_MODE_BUTTON)
 6052               		.loc 1 1744 0
 6053 1ba0 4111      		cpse r20,__zero_reg__
 6054 1ba2 00C0      		rjmp .L350
1745:main.c        ****     {
1746:main.c        ****         if(key0 != old_key0)
 6055               		.loc 1 1746 0
 6056 1ba4 4091 0000 		lds r20,old_key0.3074
 6057 1ba8 4217      		cp r20,r18
 6058 1baa 01F0      		breq .L351
1747:main.c        ****         {
1748:main.c        ****             if(key0)
1749:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY0_DOWN;
 6059               		.loc 1 1749 0
 6060 1bac E091 0000 		lds r30,key_buffer_w_pos
1748:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY0_DOWN;
 6061               		.loc 1 1748 0
 6062 1bb0 3111      		cpse r19,__zero_reg__
 6063 1bb2 00C0      		rjmp .L352
 6064               		.loc 1 1749 0
 6065 1bb4 31E0      		ldi r19,lo8(1)
 6066 1bb6 3E0F      		add r19,r30
 6067 1bb8 3093 0000 		sts key_buffer_w_pos,r19
 6068 1bbc F0E0      		ldi r31,0
 6069 1bbe E050      		subi r30,lo8(-(key_buffer))
 6070 1bc0 F040      		sbci r31,hi8(-(key_buffer))
 6071 1bc2 1082      		st Z,__zero_reg__
 6072 1bc4 00C0      		rjmp .L351
 6073               	.L352:
1750:main.c        ****             else
1751:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY0_UP;
 6074               		.loc 1 1751 0
 6075 1bc6 31E0      		ldi r19,lo8(1)
 6076 1bc8 3E0F      		add r19,r30
 6077 1bca 3093 0000 		sts key_buffer_w_pos,r19
 6078 1bce F0E0      		ldi r31,0
 6079 1bd0 E050      		subi r30,lo8(-(key_buffer))
 6080 1bd2 F040      		sbci r31,hi8(-(key_buffer))
 6081 1bd4 5083      		st Z,r21
 6082               	.L351:
1752:main.c        ****         }
1753:main.c        ****         key_buffer_w_pos &= 0x0f;
 6083               		.loc 1 1753 0
 6084 1bd6 3091 0000 		lds r19,key_buffer_w_pos
 6085 1bda 3F70      		andi r19,lo8(15)
 6086 1bdc 3093 0000 		sts key_buffer_w_pos,r19
1754:main.c        **** 
1755:main.c        ****         if(key1 != old_key1)
 6087               		.loc 1 1755 0
 6088 1be0 3091 0000 		lds r19,old_key1.3075
 6089 1be4 9317      		cp r25,r19
 6090 1be6 01F0      		breq .L353
1756:main.c        ****         {
1757:main.c        ****             if(key1)
1758:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY1_DOWN;
 6091               		.loc 1 1758 0
 6092 1be8 E091 0000 		lds r30,key_buffer_w_pos
 6093 1bec 31E0      		ldi r19,lo8(1)
 6094 1bee 3E0F      		add r19,r30
 6095 1bf0 3093 0000 		sts key_buffer_w_pos,r19
 6096 1bf4 F0E0      		ldi r31,0
 6097 1bf6 E050      		subi r30,lo8(-(key_buffer))
 6098 1bf8 F040      		sbci r31,hi8(-(key_buffer))
1757:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY1_DOWN;
 6099               		.loc 1 1757 0
 6100 1bfa 9923      		tst r25
 6101 1bfc 01F0      		breq .L354
 6102               		.loc 1 1758 0
 6103 1bfe 32E0      		ldi r19,lo8(2)
 6104 1c00 00C0      		rjmp .L372
 6105               	.L354:
1759:main.c        ****             else
1760:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY1_UP;
 6106               		.loc 1 1760 0
 6107 1c02 33E0      		ldi r19,lo8(3)
 6108               	.L372:
 6109 1c04 3083      		st Z,r19
 6110               	.L353:
1761:main.c        ****         }
1762:main.c        ****         key_buffer_w_pos &= 0x0f;
 6111               		.loc 1 1762 0
 6112 1c06 3091 0000 		lds r19,key_buffer_w_pos
 6113 1c0a 3F70      		andi r19,lo8(15)
 6114 1c0c 3093 0000 		sts key_buffer_w_pos,r19
 6115               	.L350:
1763:main.c        ****     }
1764:main.c        **** 
1765:main.c        ****     if(key2 != old_key2)
 6116               		.loc 1 1765 0
 6117 1c10 3091 0000 		lds r19,old_key2.3076
 6118 1c14 8317      		cp r24,r19
 6119 1c16 01F0      		breq .L355
1766:main.c        ****     {
1767:main.c        ****         if(key2)
 6120               		.loc 1 1767 0
 6121 1c18 8823      		tst r24
 6122 1c1a 01F0      		breq .L356
1768:main.c        ****         {
1769:main.c        ****             key_buffer[key_buffer_w_pos++] = KEY2_DOWN;
 6123               		.loc 1 1769 0
 6124 1c1c E091 0000 		lds r30,key_buffer_w_pos
 6125 1c20 31E0      		ldi r19,lo8(1)
 6126 1c22 3E0F      		add r19,r30
 6127 1c24 3093 0000 		sts key_buffer_w_pos,r19
 6128 1c28 F0E0      		ldi r31,0
 6129 1c2a E050      		subi r30,lo8(-(key_buffer))
 6130 1c2c F040      		sbci r31,hi8(-(key_buffer))
 6131 1c2e 34E0      		ldi r19,lo8(4)
 6132 1c30 3083      		st Z,r19
1770:main.c        ****             counter1 = 0;
 6133               		.loc 1 1770 0
 6134 1c32 1092 0000 		sts counter1.3062+1,__zero_reg__
 6135 1c36 1092 0000 		sts counter1.3062,__zero_reg__
1771:main.c        ****             key2_is_pressed = 1;
 6136               		.loc 1 1771 0
 6137 1c3a 31E0      		ldi r19,lo8(1)
 6138 1c3c 3093 0000 		sts key2_is_pressed.3063,r19
 6139 1c40 00C0      		rjmp .L355
 6140               	.L356:
1772:main.c        ****         }
1773:main.c        ****         else
1774:main.c        ****         {
1775:main.c        ****             if(!key2_next_up_is_invalid)
 6141               		.loc 1 1775 0
 6142 1c42 3091 0000 		lds r19,key2_next_up_is_invalid.3064
 6143 1c46 3111      		cpse r19,__zero_reg__
 6144 1c48 00C0      		rjmp .L357
1776:main.c        ****                 key_buffer[key_buffer_w_pos++] = KEY2_UP;
 6145               		.loc 1 1776 0
 6146 1c4a E091 0000 		lds r30,key_buffer_w_pos
 6147 1c4e 31E0      		ldi r19,lo8(1)
 6148 1c50 3E0F      		add r19,r30
 6149 1c52 3093 0000 		sts key_buffer_w_pos,r19
 6150 1c56 F0E0      		ldi r31,0
 6151 1c58 E050      		subi r30,lo8(-(key_buffer))
 6152 1c5a F040      		sbci r31,hi8(-(key_buffer))
 6153 1c5c 35E0      		ldi r19,lo8(5)
 6154 1c5e 3083      		st Z,r19
 6155               	.L357:
1777:main.c        ****             key2_is_pressed = 0;
 6156               		.loc 1 1777 0
 6157 1c60 1092 0000 		sts key2_is_pressed.3063,__zero_reg__
1778:main.c        ****             key2_next_up_is_invalid = 0;
 6158               		.loc 1 1778 0
 6159 1c64 1092 0000 		sts key2_next_up_is_invalid.3064,__zero_reg__
 6160               	.L355:
1779:main.c        ****         }
1780:main.c        ****     }
1781:main.c        **** 
1782:main.c        ****     if(key2_is_pressed && counter1 == TIMEOUT1_KEY2)
 6161               		.loc 1 1782 0
 6162 1c68 3091 0000 		lds r19,key2_is_pressed.3063
 6163 1c6c 3323      		tst r19
 6164 1c6e 01F0      		breq .L358
 6165               		.loc 1 1782 0 is_stmt 0 discriminator 1
 6166 1c70 4091 0000 		lds r20,counter1.3062
 6167 1c74 5091 0000 		lds r21,counter1.3062+1
 6168 1c78 4F30      		cpi r20,15
 6169 1c7a 5105      		cpc r21,__zero_reg__
 6170 1c7c 01F4      		brne .L358
1783:main.c        ****     {
1784:main.c        ****         key_buffer[key_buffer_w_pos++] = KEY2_TIMEOUT1;
 6171               		.loc 1 1784 0 is_stmt 1
 6172 1c7e E091 0000 		lds r30,key_buffer_w_pos
 6173 1c82 31E0      		ldi r19,lo8(1)
 6174 1c84 3E0F      		add r19,r30
 6175 1c86 3093 0000 		sts key_buffer_w_pos,r19
 6176 1c8a F0E0      		ldi r31,0
 6177 1c8c E050      		subi r30,lo8(-(key_buffer))
 6178 1c8e F040      		sbci r31,hi8(-(key_buffer))
 6179 1c90 36E0      		ldi r19,lo8(6)
 6180 1c92 3083      		st Z,r19
1785:main.c        ****         key2_next_up_is_invalid = 1;
 6181               		.loc 1 1785 0
 6182 1c94 31E0      		ldi r19,lo8(1)
 6183 1c96 3093 0000 		sts key2_next_up_is_invalid.3064,r19
 6184               	.L358:
1786:main.c        ****     }
1787:main.c        **** 
1788:main.c        ****     if(key2_is_pressed && counter1 == TIMEOUT2_KEY2)
 6185               		.loc 1 1788 0
 6186 1c9a 3091 0000 		lds r19,key2_is_pressed.3063
 6187 1c9e 3323      		tst r19
 6188 1ca0 01F0      		breq .L359
 6189               		.loc 1 1788 0 is_stmt 0 discriminator 1
 6190 1ca2 4091 0000 		lds r20,counter1.3062
 6191 1ca6 5091 0000 		lds r21,counter1.3062+1
 6192 1caa 4C33      		cpi r20,60
 6193 1cac 5105      		cpc r21,__zero_reg__
 6194 1cae 01F4      		brne .L359
1789:main.c        ****     {
1790:main.c        ****         key_buffer[key_buffer_w_pos++] = KEY2_TIMEOUT2;
 6195               		.loc 1 1790 0 is_stmt 1
 6196 1cb0 E091 0000 		lds r30,key_buffer_w_pos
 6197 1cb4 31E0      		ldi r19,lo8(1)
 6198 1cb6 3E0F      		add r19,r30
 6199 1cb8 3093 0000 		sts key_buffer_w_pos,r19
 6200 1cbc F0E0      		ldi r31,0
 6201 1cbe E050      		subi r30,lo8(-(key_buffer))
 6202 1cc0 F040      		sbci r31,hi8(-(key_buffer))
 6203 1cc2 37E0      		ldi r19,lo8(7)
 6204 1cc4 3083      		st Z,r19
1791:main.c        ****         key2_next_up_is_invalid = 1;
 6205               		.loc 1 1791 0
 6206 1cc6 31E0      		ldi r19,lo8(1)
 6207 1cc8 3093 0000 		sts key2_next_up_is_invalid.3064,r19
 6208               	.L359:
1792:main.c        ****     }
1793:main.c        **** 
1794:main.c        ****     key_buffer_w_pos &= 0x0f;
 6209               		.loc 1 1794 0
 6210 1ccc 3091 0000 		lds r19,key_buffer_w_pos
 6211 1cd0 3F70      		andi r19,lo8(15)
 6212 1cd2 3093 0000 		sts key_buffer_w_pos,r19
1795:main.c        **** 
1796:main.c        ****     old_key0 = key0;
 6213               		.loc 1 1796 0
 6214 1cd6 2093 0000 		sts old_key0.3074,r18
1797:main.c        ****     old_key1 = key1;
 6215               		.loc 1 1797 0
 6216 1cda 9093 0000 		sts old_key1.3075,r25
1798:main.c        ****     old_key2 = key2;
 6217               		.loc 1 1798 0
 6218 1cde 8093 0000 		sts old_key2.3076,r24
 6219               	.LVL474:
 6220               	.L341:
 6221               	/* epilogue start */
1799:main.c        **** }
 6222               		.loc 1 1799 0
 6223 1ce2 FF91      		pop r31
 6224 1ce4 EF91      		pop r30
 6225 1ce6 BF91      		pop r27
 6226 1ce8 AF91      		pop r26
 6227 1cea 9F91      		pop r25
 6228 1cec 8F91      		pop r24
 6229 1cee 5F91      		pop r21
 6230 1cf0 4F91      		pop r20
 6231 1cf2 3F91      		pop r19
 6232 1cf4 2F91      		pop r18
 6233 1cf6 0F90      		pop r0
 6234 1cf8 0BBE      		out __RAMPZ__,r0
 6235 1cfa 0F90      		pop r0
 6236 1cfc 0FBE      		out __SREG__,r0
 6237 1cfe 0F90      		pop r0
 6238 1d00 1F90      		pop r1
 6239 1d02 1895      		reti
 6240               		.cfi_endproc
 6241               	.LFE56:
 6243               		.local	key2_next_up_is_invalid.3064
 6244               		.comm	key2_next_up_is_invalid.3064,1,1
 6245               		.local	key2_is_pressed.3063
 6246               		.comm	key2_is_pressed.3063,1,1
 6247               		.local	old_key2.3076
 6248               		.comm	old_key2.3076,1,1
 6249               		.local	old_key1.3075
 6250               		.comm	old_key1.3075,1,1
 6251               		.local	old_key0.3074
 6252               		.comm	old_key0.3074,1,1
 6253               		.local	counter1.3062
 6254               		.comm	counter1.3062,2,1
 6255               		.local	counter0.3061
 6256               		.comm	counter0.3061,1,1
 6257               		.local	old_drehgeber.3065
 6258               		.comm	old_drehgeber.3065,1,1
 6259               		.local	old_gcr_byte.3054
 6260               		.comm	old_gcr_byte.3054,1,1
 6261               		.section	.rodata
 6264               	GCR_DEC_TBL.3032:
 6265 003d 00        		.byte	0
 6266 003e 00        		.byte	0
 6267 003f 00        		.byte	0
 6268 0040 00        		.byte	0
 6269 0041 00        		.byte	0
 6270 0042 00        		.byte	0
 6271 0043 00        		.byte	0
 6272 0044 40        		.byte	64
 6273 0045 00        		.byte	0
 6274 0046 28        		.byte	40
 6275 0047 00        		.byte	0
 6276 0048 61        		.byte	97
 6277 0049 00        		.byte	0
 6278 004a AC        		.byte	-84
 6279 004b 04        		.byte	4
 6280 004c E5        		.byte	-27
 6281 004d 00        		.byte	0
 6282 004e 00        		.byte	0
 6283 004f 82        		.byte	-126
 6284 0050 03        		.byte	3
 6285 0051 00        		.byte	0
 6286 0052 0F        		.byte	15
 6287 0053 16        		.byte	22
 6288 0054 07        		.byte	7
 6289 0055 00        		.byte	0
 6290 0056 09        		.byte	9
 6291 0057 CA        		.byte	-54
 6292 0058 0B        		.byte	11
 6293 0059 40        		.byte	64
 6294 005a 0D        		.byte	13
 6295 005b 5E        		.byte	94
 6296 005c 00        		.byte	0
 6297 005d 00        		.byte	0
 6298 005e 82        		.byte	-126
 6299 005f 00        		.byte	0
 6300 0060 90        		.byte	-112
 6301 0061 28        		.byte	40
 6302 0062 00        		.byte	0
 6303 0063 30        		.byte	48
 6304 0064 00        		.byte	0
 6305 0065 00        		.byte	0
 6306 0066 00        		.byte	0
 6307 0067 F0        		.byte	-16
 6308 0068 00        		.byte	0
 6309 0069 61        		.byte	97
 6310 006a 00        		.byte	0
 6311 006b 70        		.byte	112
 6312 006c 00        		.byte	0
 6313 006d 00        		.byte	0
 6314 006e 03        		.byte	3
 6315 006f 90        		.byte	-112
 6316 0070 00        		.byte	0
 6317 0071 AC        		.byte	-84
 6318 0072 00        		.byte	0
 6319 0073 B0        		.byte	-80
 6320 0074 00        		.byte	0
 6321 0075 04        		.byte	4
 6322 0076 00        		.byte	0
 6323 0077 D0        		.byte	-48
 6324 0078 00        		.byte	0
 6325 0079 E5        		.byte	-27
 6326 007a 00        		.byte	0
 6327 007b 00        		.byte	0
 6328 007c 00        		.byte	0
 6329 007d 00        		.byte	0
 6330 007e 00        		.byte	0
 6331 007f 28        		.byte	40
 6332 0080 AC        		.byte	-84
 6333 0081 00        		.byte	0
 6334 0082 0F        		.byte	15
 6335 0083 09        		.byte	9
 6336 0084 0D        		.byte	13
 6337 0085 82        		.byte	-126
 6338 0086 00        		.byte	0
 6339 0087 00        		.byte	0
 6340 0088 00        		.byte	0
 6341 0089 03        		.byte	3
 6342 008a 00        		.byte	0
 6343 008b 00        		.byte	0
 6344 008c 00        		.byte	0
 6345 008d 00        		.byte	0
 6346 008e 0F        		.byte	15
 6347 008f 00        		.byte	0
 6348 0090 00        		.byte	0
 6349 0091 0F        		.byte	15
 6350 0092 00        		.byte	0
 6351 0093 00        		.byte	0
 6352 0094 00        		.byte	0
 6353 0095 16        		.byte	22
 6354 0096 00        		.byte	0
 6355 0097 00        		.byte	0
 6356 0098 00        		.byte	0
 6357 0099 07        		.byte	7
 6358 009a 00        		.byte	0
 6359 009b 00        		.byte	0
 6360 009c 00        		.byte	0
 6361 009d 00        		.byte	0
 6362 009e 16        		.byte	22
 6363 009f 30        		.byte	48
 6364 00a0 B0        		.byte	-80
 6365 00a1 09        		.byte	9
 6366 00a2 00        		.byte	0
 6367 00a3 00        		.byte	0
 6368 00a4 00        		.byte	0
 6369 00a5 CA        		.byte	-54
 6370 00a6 00        		.byte	0
 6371 00a7 00        		.byte	0
 6372 00a8 00        		.byte	0
 6373 00a9 0B        		.byte	11
 6374 00aa 00        		.byte	0
 6375 00ab 00        		.byte	0
 6376 00ac 00        		.byte	0
 6377 00ad 40        		.byte	64
 6378 00ae 07        		.byte	7
 6379 00af 00        		.byte	0
 6380 00b0 00        		.byte	0
 6381 00b1 0D        		.byte	13
 6382 00b2 00        		.byte	0
 6383 00b3 00        		.byte	0
 6384 00b4 00        		.byte	0
 6385 00b5 5E        		.byte	94
 6386 00b6 00        		.byte	0
 6387 00b7 00        		.byte	0
 6388 00b8 00        		.byte	0
 6389 00b9 00        		.byte	0
 6390 00ba 00        		.byte	0
 6391 00bb 00        		.byte	0
 6392 00bc 00        		.byte	0
 6393 00bd 00        		.byte	0
 6394 00be 00        		.byte	0
 6395 00bf 00        		.byte	0
 6396 00c0 04        		.byte	4
 6397 00c1 82        		.byte	-126
 6398 00c2 16        		.byte	22
 6399 00c3 CA        		.byte	-54
 6400 00c4 5E        		.byte	94
 6401 00c5 00        		.byte	0
 6402 00c6 30        		.byte	48
 6403 00c7 F0        		.byte	-16
 6404 00c8 70        		.byte	112
 6405 00c9 90        		.byte	-112
 6406 00ca B0        		.byte	-80
 6407 00cb D0        		.byte	-48
 6408 00cc 00        		.byte	0
 6409 00cd 28        		.byte	40
 6410 00ce 09        		.byte	9
 6411 00cf 00        		.byte	0
 6412 00d0 00        		.byte	0
 6413 00d1 00        		.byte	0
 6414 00d2 00        		.byte	0
 6415 00d3 00        		.byte	0
 6416 00d4 00        		.byte	0
 6417 00d5 30        		.byte	48
 6418 00d6 00        		.byte	0
 6419 00d7 00        		.byte	0
 6420 00d8 00        		.byte	0
 6421 00d9 00        		.byte	0
 6422 00da 00        		.byte	0
 6423 00db 00        		.byte	0
 6424 00dc 00        		.byte	0
 6425 00dd 00        		.byte	0
 6426 00de CA        		.byte	-54
 6427 00df F0        		.byte	-16
 6428 00e0 D0        		.byte	-48
 6429 00e1 00        		.byte	0
 6430 00e2 00        		.byte	0
 6431 00e3 00        		.byte	0
 6432 00e4 00        		.byte	0
 6433 00e5 F0        		.byte	-16
 6434 00e6 00        		.byte	0
 6435 00e7 00        		.byte	0
 6436 00e8 00        		.byte	0
 6437 00e9 00        		.byte	0
 6438 00ea 00        		.byte	0
 6439 00eb 00        		.byte	0
 6440 00ec 00        		.byte	0
 6441 00ed 61        		.byte	97
 6442 00ee 0B        		.byte	11
 6443 00ef 00        		.byte	0
 6444 00f0 00        		.byte	0
 6445 00f1 00        		.byte	0
 6446 00f2 00        		.byte	0
 6447 00f3 00        		.byte	0
 6448 00f4 00        		.byte	0
 6449 00f5 70        		.byte	112
 6450 00f6 00        		.byte	0
 6451 00f7 00        		.byte	0
 6452 00f8 00        		.byte	0
 6453 00f9 00        		.byte	0
 6454 00fa 00        		.byte	0
 6455 00fb 00        		.byte	0
 6456 00fc 00        		.byte	0
 6457 00fd 00        		.byte	0
 6458 00fe 40        		.byte	64
 6459 00ff 61        		.byte	97
 6460 0100 E5        		.byte	-27
 6461 0101 03        		.byte	3
 6462 0102 07        		.byte	7
 6463 0103 0B        		.byte	11
 6464 0104 00        		.byte	0
 6465 0105 90        		.byte	-112
 6466 0106 00        		.byte	0
 6467 0107 00        		.byte	0
 6468 0108 00        		.byte	0
 6469 0109 00        		.byte	0
 6470 010a 00        		.byte	0
 6471 010b 00        		.byte	0
 6472 010c 00        		.byte	0
 6473 010d AC        		.byte	-84
 6474 010e 0D        		.byte	13
 6475 010f 00        		.byte	0
 6476 0110 00        		.byte	0
 6477 0111 00        		.byte	0
 6478 0112 00        		.byte	0
 6479 0113 00        		.byte	0
 6480 0114 00        		.byte	0
 6481 0115 B0        		.byte	-80
 6482 0116 00        		.byte	0
 6483 0117 00        		.byte	0
 6484 0118 00        		.byte	0
 6485 0119 00        		.byte	0
 6486 011a 00        		.byte	0
 6487 011b 00        		.byte	0
 6488 011c 00        		.byte	0
 6489 011d 04        		.byte	4
 6490 011e 5E        		.byte	94
 6491 011f 70        		.byte	112
 6492 0120 00        		.byte	0
 6493 0121 00        		.byte	0
 6494 0122 00        		.byte	0
 6495 0123 00        		.byte	0
 6496 0124 00        		.byte	0
 6497 0125 D0        		.byte	-48
 6498 0126 00        		.byte	0
 6499 0127 00        		.byte	0
 6500 0128 00        		.byte	0
 6501 0129 00        		.byte	0
 6502 012a 00        		.byte	0
 6503 012b 00        		.byte	0
 6504 012c 00        		.byte	0
 6505 012d E5        		.byte	-27
 6506 012e 00        		.byte	0
 6507 012f 00        		.byte	0
 6508 0130 00        		.byte	0
 6509 0131 00        		.byte	0
 6510 0132 00        		.byte	0
 6511 0133 00        		.byte	0
 6512 0134 00        		.byte	0
 6513 0135 00        		.byte	0
 6514 0136 00        		.byte	0
 6515 0137 00        		.byte	0
 6516 0138 00        		.byte	0
 6517 0139 00        		.byte	0
 6518 013a 00        		.byte	0
 6519 013b 00        		.byte	0
 6520 013c 00        		.byte	0
 6523               	GCR_TBL.3026:
 6524 013d 0A        		.byte	10
 6525 013e 0B        		.byte	11
 6526 013f 12        		.byte	18
 6527 0140 13        		.byte	19
 6528 0141 0E        		.byte	14
 6529 0142 0F        		.byte	15
 6530 0143 16        		.byte	22
 6531 0144 17        		.byte	23
 6532 0145 09        		.byte	9
 6533 0146 19        		.byte	25
 6534 0147 1A        		.byte	26
 6535 0148 1B        		.byte	27
 6536 0149 0D        		.byte	13
 6537 014a 1D        		.byte	29
 6538 014b 1E        		.byte	30
 6539 014c 15        		.byte	21
 6540               		.local	wait_counter0.2838
 6541               		.comm	wait_counter0.2838,2,1
 6542               		.local	wait_counter0.2794
 6543               		.comm	wait_counter0.2794,2,1
 6544               		.local	old_motor_status.2793
 6545               		.comm	old_motor_status.2793,1,1
 6546               		.local	old_half_track.2792
 6547               		.comm	old_half_track.2792,1,1
 6548               		.data
 6551               	exit_main:
 6552 0000 01        		.byte	1
 6553               		.comm	info_menu,13,1
 6554               		.comm	settings_menu,13,1
 6555               		.comm	image_menu,13,1
 6556               		.comm	main_menu,13,1
 6557               	.global	drehimp_tab
 6558               		.section	.progmem.data,"a",@progbits
 6561               	drehimp_tab:
 6562 0000 00        		.byte	0
 6563 0001 00        		.byte	0
 6564 0002 02        		.byte	2
 6565 0003 00        		.byte	0
 6566 0004 00        		.byte	0
 6567 0005 00        		.byte	0
 6568 0006 00        		.byte	0
 6569 0007 00        		.byte	0
 6570 0008 01        		.byte	1
 6571 0009 00        		.byte	0
 6572 000a 00        		.byte	0
 6573 000b 00        		.byte	0
 6574 000c 00        		.byte	0
 6575 000d 00        		.byte	0
 6576 000e 00        		.byte	0
 6577 000f 00        		.byte	0
 6578               		.comm	gcr_track,8192,1
 6579               	.global	no_byte_ready_send
 6580               		.section .bss
 6583               	no_byte_ready_send:
 6584 0000 00        		.zero	1
 6585               	.global	track_is_written_old
 6588               	track_is_written_old:
 6589 0001 00        		.zero	1
 6590               	.global	track_is_written
 6593               	track_is_written:
 6594 0002 00        		.zero	1
 6595               	.global	stepper_signal
 6598               	stepper_signal:
 6599 0003 00        		.zero	1
 6600               	.global	stepper_signal_time
 6603               	stepper_signal_time:
 6604 0004 00        		.zero	1
 6605               	.global	stepper_signal_w_pos
 6608               	stepper_signal_w_pos:
 6609 0005 00        		.zero	1
 6610               	.global	stepper_signal_r_pos
 6613               	stepper_signal_r_pos:
 6614 0006 00        		.zero	1
 6615               		.comm	stepper_signal_puffer,256,1
 6616               	.global	d64_sector_gap
 6617               		.section	.rodata
 6620               	d64_sector_gap:
 6621 014d 0C        		.byte	12
 6622 014e 15        		.byte	21
 6623 014f 10        		.byte	16
 6624 0150 0D        		.byte	13
 6625               	.global	timer0_orca0
 6628               	timer0_orca0:
 6629 0151 4D        		.byte	77
 6630 0152 53        		.byte	83
 6631 0153 59        		.byte	89
 6632 0154 5F        		.byte	95
 6633               	.global	d64_track_zone
 6636               	d64_track_zone:
 6637 0155 00        		.byte	0
 6638 0156 00        		.byte	0
 6639 0157 00        		.byte	0
 6640 0158 00        		.byte	0
 6641 0159 00        		.byte	0
 6642 015a 00        		.byte	0
 6643 015b 00        		.byte	0
 6644 015c 00        		.byte	0
 6645 015d 00        		.byte	0
 6646 015e 00        		.byte	0
 6647 015f 00        		.byte	0
 6648 0160 00        		.byte	0
 6649 0161 00        		.byte	0
 6650 0162 00        		.byte	0
 6651 0163 00        		.byte	0
 6652 0164 00        		.byte	0
 6653 0165 00        		.byte	0
 6654 0166 00        		.byte	0
 6655 0167 01        		.byte	1
 6656 0168 01        		.byte	1
 6657 0169 01        		.byte	1
 6658 016a 01        		.byte	1
 6659 016b 01        		.byte	1
 6660 016c 01        		.byte	1
 6661 016d 01        		.byte	1
 6662 016e 02        		.byte	2
 6663 016f 02        		.byte	2
 6664 0170 02        		.byte	2
 6665 0171 02        		.byte	2
 6666 0172 02        		.byte	2
 6667 0173 02        		.byte	2
 6668 0174 03        		.byte	3
 6669 0175 03        		.byte	3
 6670 0176 03        		.byte	3
 6671 0177 03        		.byte	3
 6672 0178 03        		.byte	3
 6673 0179 03        		.byte	3
 6674 017a 03        		.byte	3
 6675 017b 03        		.byte	3
 6676 017c 03        		.byte	3
 6677 017d 03        		.byte	3
 6678               	.global	d64_sector_count
 6681               	d64_sector_count:
 6682 017e 00        		.byte	0
 6683 017f 15        		.byte	21
 6684 0180 15        		.byte	21
 6685 0181 15        		.byte	21
 6686 0182 15        		.byte	21
 6687 0183 15        		.byte	21
 6688 0184 15        		.byte	21
 6689 0185 15        		.byte	21
 6690 0186 15        		.byte	21
 6691 0187 15        		.byte	21
 6692 0188 15        		.byte	21
 6693 0189 15        		.byte	21
 6694 018a 15        		.byte	21
 6695 018b 15        		.byte	21
 6696 018c 15        		.byte	21
 6697 018d 15        		.byte	21
 6698 018e 15        		.byte	21
 6699 018f 15        		.byte	21
 6700 0190 13        		.byte	19
 6701 0191 13        		.byte	19
 6702 0192 13        		.byte	19
 6703 0193 13        		.byte	19
 6704 0194 13        		.byte	19
 6705 0195 13        		.byte	19
 6706 0196 13        		.byte	19
 6707 0197 12        		.byte	18
 6708 0198 12        		.byte	18
 6709 0199 12        		.byte	18
 6710 019a 12        		.byte	18
 6711 019b 12        		.byte	18
 6712 019c 12        		.byte	18
 6713 019d 11        		.byte	17
 6714 019e 11        		.byte	17
 6715 019f 11        		.byte	17
 6716 01a0 11        		.byte	17
 6717 01a1 11        		.byte	17
 6718 01a2 11        		.byte	17
 6719 01a3 11        		.byte	17
 6720 01a4 11        		.byte	17
 6721 01a5 11        		.byte	17
 6722 01a6 11        		.byte	17
 6723               	.global	d64_track_offset
 6726               	d64_track_offset:
 6727 01a7 00        		.byte	0
 6728 01a8 00        		.byte	0
 6729 01a9 00        		.byte	0
 6730 01aa 00        		.byte	0
 6731 01ab 00        		.byte	0
 6732 01ac 00        		.byte	0
 6733 01ad 00        		.byte	0
 6734 01ae 00        		.byte	0
 6735 01af 00        		.byte	0
 6736 01b0 15        		.byte	21
 6737 01b1 00        		.byte	0
 6738 01b2 00        		.byte	0
 6739 01b3 00        		.byte	0
 6740 01b4 2A        		.byte	42
 6741 01b5 00        		.byte	0
 6742 01b6 00        		.byte	0
 6743 01b7 00        		.byte	0
 6744 01b8 3F        		.byte	63
 6745 01b9 00        		.byte	0
 6746 01ba 00        		.byte	0
 6747 01bb 00        		.byte	0
 6748 01bc 54        		.byte	84
 6749 01bd 00        		.byte	0
 6750 01be 00        		.byte	0
 6751 01bf 00        		.byte	0
 6752 01c0 69        		.byte	105
 6753 01c1 00        		.byte	0
 6754 01c2 00        		.byte	0
 6755 01c3 00        		.byte	0
 6756 01c4 7E        		.byte	126
 6757 01c5 00        		.byte	0
 6758 01c6 00        		.byte	0
 6759 01c7 00        		.byte	0
 6760 01c8 93        		.byte	-109
 6761 01c9 00        		.byte	0
 6762 01ca 00        		.byte	0
 6763 01cb 00        		.byte	0
 6764 01cc A8        		.byte	-88
 6765 01cd 00        		.byte	0
 6766 01ce 00        		.byte	0
 6767 01cf 00        		.byte	0
 6768 01d0 BD        		.byte	-67
 6769 01d1 00        		.byte	0
 6770 01d2 00        		.byte	0
 6771 01d3 00        		.byte	0
 6772 01d4 D2        		.byte	-46
 6773 01d5 00        		.byte	0
 6774 01d6 00        		.byte	0
 6775 01d7 00        		.byte	0
 6776 01d8 E7        		.byte	-25
 6777 01d9 00        		.byte	0
 6778 01da 00        		.byte	0
 6779 01db 00        		.byte	0
 6780 01dc FC        		.byte	-4
 6781 01dd 00        		.byte	0
 6782 01de 00        		.byte	0
 6783 01df 00        		.byte	0
 6784 01e0 11        		.byte	17
 6785 01e1 01        		.byte	1
 6786 01e2 00        		.byte	0
 6787 01e3 00        		.byte	0
 6788 01e4 26        		.byte	38
 6789 01e5 01        		.byte	1
 6790 01e6 00        		.byte	0
 6791 01e7 00        		.byte	0
 6792 01e8 3B        		.byte	59
 6793 01e9 01        		.byte	1
 6794 01ea 00        		.byte	0
 6795 01eb 00        		.byte	0
 6796 01ec 50        		.byte	80
 6797 01ed 01        		.byte	1
 6798 01ee 00        		.byte	0
 6799 01ef 00        		.byte	0
 6800 01f0 65        		.byte	101
 6801 01f1 01        		.byte	1
 6802 01f2 00        		.byte	0
 6803 01f3 00        		.byte	0
 6804 01f4 78        		.byte	120
 6805 01f5 01        		.byte	1
 6806 01f6 00        		.byte	0
 6807 01f7 00        		.byte	0
 6808 01f8 8B        		.byte	-117
 6809 01f9 01        		.byte	1
 6810 01fa 00        		.byte	0
 6811 01fb 00        		.byte	0
 6812 01fc 9E        		.byte	-98
 6813 01fd 01        		.byte	1
 6814 01fe 00        		.byte	0
 6815 01ff 00        		.byte	0
 6816 0200 B1        		.byte	-79
 6817 0201 01        		.byte	1
 6818 0202 00        		.byte	0
 6819 0203 00        		.byte	0
 6820 0204 C4        		.byte	-60
 6821 0205 01        		.byte	1
 6822 0206 00        		.byte	0
 6823 0207 00        		.byte	0
 6824 0208 D7        		.byte	-41
 6825 0209 01        		.byte	1
 6826 020a 00        		.byte	0
 6827 020b 00        		.byte	0
 6828 020c EA        		.byte	-22
 6829 020d 01        		.byte	1
 6830 020e 00        		.byte	0
 6831 020f 00        		.byte	0
 6832 0210 FC        		.byte	-4
 6833 0211 01        		.byte	1
 6834 0212 00        		.byte	0
 6835 0213 00        		.byte	0
 6836 0214 0E        		.byte	14
 6837 0215 02        		.byte	2
 6838 0216 00        		.byte	0
 6839 0217 00        		.byte	0
 6840 0218 20        		.byte	32
 6841 0219 02        		.byte	2
 6842 021a 00        		.byte	0
 6843 021b 00        		.byte	0
 6844 021c 32        		.byte	50
 6845 021d 02        		.byte	2
 6846 021e 00        		.byte	0
 6847 021f 00        		.byte	0
 6848 0220 44        		.byte	68
 6849 0221 02        		.byte	2
 6850 0222 00        		.byte	0
 6851 0223 00        		.byte	0
 6852 0224 56        		.byte	86
 6853 0225 02        		.byte	2
 6854 0226 00        		.byte	0
 6855 0227 00        		.byte	0
 6856 0228 67        		.byte	103
 6857 0229 02        		.byte	2
 6858 022a 00        		.byte	0
 6859 022b 00        		.byte	0
 6860 022c 78        		.byte	120
 6861 022d 02        		.byte	2
 6862 022e 00        		.byte	0
 6863 022f 00        		.byte	0
 6864 0230 89        		.byte	-119
 6865 0231 02        		.byte	2
 6866 0232 00        		.byte	0
 6867 0233 00        		.byte	0
 6868 0234 9A        		.byte	-102
 6869 0235 02        		.byte	2
 6870 0236 00        		.byte	0
 6871 0237 00        		.byte	0
 6872 0238 AB        		.byte	-85
 6873 0239 02        		.byte	2
 6874 023a 00        		.byte	0
 6875 023b 00        		.byte	0
 6876 023c BC        		.byte	-68
 6877 023d 02        		.byte	2
 6878 023e 00        		.byte	0
 6879 023f 00        		.byte	0
 6880 0240 CD        		.byte	-51
 6881 0241 02        		.byte	2
 6882 0242 00        		.byte	0
 6883 0243 00        		.byte	0
 6884 0244 DE        		.byte	-34
 6885 0245 02        		.byte	2
 6886 0246 00        		.byte	0
 6887 0247 00        		.byte	0
 6888 0248 EF        		.byte	-17
 6889 0249 02        		.byte	2
 6890 024a 00        		.byte	0
 6891               		.comm	old_motor_status,1,1
 6892               		.comm	old_half_track,1,1
 6893               		.comm	akt_half_track,1,1
 6894               	.global	akt_track_pos
 6895               		.section .bss
 6898               	akt_track_pos:
 6899 0007 0000      		.zero	2
 6900               	.global	akt_gcr_byte
 6903               	akt_gcr_byte:
 6904 0009 00        		.zero	1
 6905               	.global	gcr_track_length
 6906               		.data
 6909               	gcr_track_length:
 6910 0001 E31B      		.word	7139
 6911               		.local	stp_signals_old
 6912               		.comm	stp_signals_old,1,1
 6913               	.global	floppy_wp
 6914               		.section .bss
 6917               	floppy_wp:
 6918 000a 00        		.zero	1
 6919               	.global	is_wps_pin_enable
 6922               	is_wps_pin_enable:
 6923 000b 00        		.zero	1
 6924               		.comm	is_image_mount,1,1
 6925               	.global	akt_image_type
 6928               	akt_image_type:
 6929 000c 00        		.zero	1
 6930               		.comm	fd,2,1
 6931               		.comm	file_entry,49,1
 6932               	.global	dd
 6935               	dd:
 6936 000d 0000      		.zero	2
 6937               		.comm	dir_entry,49,1
 6938               	.global	fs
 6941               	fs:
 6942 000f 0000      		.zero	2
 6943               	.global	partition
 6946               	partition:
 6947 0011 0000      		.zero	2
 6948               		.comm	fb_dir_entry,196,1
 6949               	.global	fb_line_scroll_end_begin_wait
 6950               		.data
 6953               	fb_line_scroll_end_begin_wait:
 6954 0003 0A        		.byte	10
 6955               	.global	fb_line_scroll_direction
 6956               		.section .bss
 6959               	fb_line_scroll_direction:
 6960 0013 00        		.zero	1
 6961               	.global	fb_line_scroll_pos
 6964               	fb_line_scroll_pos:
 6965 0014 00        		.zero	1
 6966               	.global	fb_current_line_offset
 6969               	fb_current_line_offset:
 6970 0015 00        		.zero	1
 6971               	.global	fb_lcd_window_pos
 6974               	fb_lcd_window_pos:
 6975 0016 00        		.zero	1
 6976               	.global	fb_lcd_cursor_pos
 6979               	fb_lcd_cursor_pos:
 6980 0017 00        		.zero	1
 6981               	.global	fb_dir_entry_count
 6984               	fb_dir_entry_count:
 6985 0018 0000      		.zero	2
 6986               		.comm	fb_lcd_more_down_char,1,1
 6987               		.comm	fb_lcd_more_top_char,1,1
 6988               		.comm	fb_lcd_cursor_char,1,1
 6989               		.comm	fb_lcd_disk_char,1,1
 6990               		.comm	fb_lcd_dir_char,1,1
 6991               		.comm	gui_line_scroll_end_begin_wait,1,1
 6992               		.comm	gui_line_scroll_direction,1,1
 6993               		.comm	gui_line_scroll_pos,1,1
 6994               		.comm	gui_current_line_offset,1,1
 6995               		.comm	byte_str,16,1
 6996               		.comm	current_gui_mode,1,1
 6997               	.global	input_mode
 6998               		.data
 7001               	input_mode:
 7002 0004 01        		.byte	1
 7003               		.comm	key_buffer_w_pos,1,1
 7004               		.comm	key_buffer_r_pos,1,1
 7005               		.comm	key_buffer,16,1
 7006               		.comm	image_filename,32,1
 7007               		.text
 7008               	.Letext0:
 7009               		.file 3 "/usr/lib/avr/include/stdint.h"
 7010               		.file 4 "././sd_card_lib/sd_raw_config.h"
 7011               		.file 5 "././sd_card_lib/fat_config.h"
 7012               		.file 6 "././sd_card_lib/fat.h"
 7013               		.file 7 "././sd_card_lib/partition.h"
 7014               		.file 8 "././sd_card_lib/sd_raw.h"
 7015               		.file 9 "././gui_constants.h"
 7016               		.file 10 "././menu.h"
 7017               		.file 11 "./main.h"
 7018               		.file 12 "././lcd.h"
 7019               		.file 13 "/usr/lib/avr/include/stdio.h"
 7020               		.file 14 "/usr/lib/avr/include/string.h"
 7021               		.file 15 "/usr/lib/avr/include/ctype.h"
 7022               		.file 16 "/usr/lib/avr/include/avr/eeprom.h"
 7023               		.file 17 "././settings.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1pgaR2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1pgaR2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1pgaR2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1pgaR2.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc1pgaR2.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1pgaR2.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1pgaR2.s:30     .text:0000000000000000 set_gui_mode.part.3
                            *COM*:0000000000000001 akt_half_track
                            *COM*:0000000000000010 byte_str
     /tmp/cc1pgaR2.s:6917   .bss:000000000000000a floppy_wp
                            *COM*:0000000000000001 is_image_mount
                            *COM*:0000000000000020 image_filename
                            *COM*:0000000000000001 gui_current_line_offset
                            *COM*:0000000000000001 gui_line_scroll_pos
                            *COM*:0000000000000001 gui_line_scroll_direction
                            *COM*:0000000000000001 gui_line_scroll_end_begin_wait
     /tmp/cc1pgaR2.s:217    .text:00000000000000fa get_key_from_buffer
                            *COM*:0000000000000001 key_buffer_r_pos
                            *COM*:0000000000000001 key_buffer_w_pos
                            *COM*:0000000000000010 key_buffer
     /tmp/cc1pgaR2.s:260    .text:000000000000012a init_pb2_pb3
     /tmp/cc1pgaR2.s:298    .text:0000000000000138 init_sd_card
     /tmp/cc1pgaR2.s:6946   .bss:0000000000000011 partition
     /tmp/cc1pgaR2.s:6941   .bss:000000000000000f fs
                            *COM*:0000000000000031 dir_entry
     /tmp/cc1pgaR2.s:6935   .bss:000000000000000d dd
     /tmp/cc1pgaR2.s:480    .text:0000000000000250 release_sd_card
     /tmp/cc1pgaR2.s:508    .text:0000000000000274 find_file_in_dir
     /tmp/cc1pgaR2.s:584    .text:00000000000002b4 get_dir_entry_count
     /tmp/cc1pgaR2.s:641    .text:00000000000002f0 seek_to_dir_entry
     /tmp/cc1pgaR2.s:734    .text:0000000000000350 filebrowser_refresh
     /tmp/cc1pgaR2.s:6974   .bss:0000000000000016 fb_lcd_window_pos
                            *COM*:00000000000000c4 fb_dir_entry
     /tmp/cc1pgaR2.s:6984   .bss:0000000000000018 fb_dir_entry_count
                            *COM*:0000000000000001 fb_lcd_dir_char
     /tmp/cc1pgaR2.s:6979   .bss:0000000000000017 fb_lcd_cursor_pos
                            *COM*:0000000000000001 fb_lcd_cursor_char
                            *COM*:0000000000000001 fb_lcd_more_top_char
                            *COM*:0000000000000001 fb_lcd_more_down_char
     /tmp/cc1pgaR2.s:6969   .bss:0000000000000015 fb_current_line_offset
     /tmp/cc1pgaR2.s:6964   .bss:0000000000000014 fb_line_scroll_pos
     /tmp/cc1pgaR2.s:6959   .bss:0000000000000013 fb_line_scroll_direction
     /tmp/cc1pgaR2.s:6953   .data:0000000000000003 fb_line_scroll_end_begin_wait
     /tmp/cc1pgaR2.s:933    .text:000000000000047a set_gui_mode
                            *COM*:0000000000000001 current_gui_mode
     /tmp/cc1pgaR2.s:967    .text:0000000000000496 change_dir
     /tmp/cc1pgaR2.s:1083   .text:0000000000000522 show_start_message
     /tmp/cc1pgaR2.s:1193   .text:0000000000000574 show_sdcard_info_message
     /tmp/cc1pgaR2.s:1607   .text:00000000000007b8 init_stepper
     /tmp/cc1pgaR2.s:1634   .text:00000000000007d2 stepper_inc
     /tmp/cc1pgaR2.s:1656   .text:00000000000007e2 stepper_dec
     /tmp/cc1pgaR2.s:1678   .text:00000000000007f2 init_motor
     /tmp/cc1pgaR2.s:1694   .text:00000000000007f6 init_controll_signals
     /tmp/cc1pgaR2.s:1720   .text:0000000000000804 start_timer0
     /tmp/cc1pgaR2.s:1740   .text:0000000000000810 init_timer0
     /tmp/cc1pgaR2.s:6636   .rodata:0000000000000155 d64_track_zone
     /tmp/cc1pgaR2.s:6628   .rodata:0000000000000151 timer0_orca0
     /tmp/cc1pgaR2.s:1775   .text:0000000000000836 stop_timer0
     /tmp/cc1pgaR2.s:1795   .text:0000000000000842 start_timer2
     /tmp/cc1pgaR2.s:1815   .text:000000000000084e init_timer2
     /tmp/cc1pgaR2.s:1843   .text:0000000000000868 stop_timer2
     /tmp/cc1pgaR2.s:1863   .text:0000000000000874 init_keys
     /tmp/cc1pgaR2.s:1889   .text:0000000000000882 soe_gatearry_hi
     /tmp/cc1pgaR2.s:1905   .text:0000000000000886 soe_gatearry_lo
     /tmp/cc1pgaR2.s:1921   .text:000000000000088a soe_gatearry_init
     /tmp/cc1pgaR2.s:1939   .text:0000000000000890 close_disk_image
     /tmp/cc1pgaR2.s:1956   .text:0000000000000894 open_g64_image
     /tmp/cc1pgaR2.s:1970   .text:0000000000000898 open_d64_image
     /tmp/cc1pgaR2.s:1988   .text:000000000000089c read_disk_track
     /tmp/cc1pgaR2.s:6726   .rodata:00000000000001a7 d64_track_offset
     /tmp/cc1pgaR2.s:6681   .rodata:000000000000017e d64_sector_count
     /tmp/cc1pgaR2.s:6523   .rodata:000000000000013d GCR_TBL.3026
     /tmp/cc1pgaR2.s:6620   .rodata:000000000000014d d64_sector_gap
                            *COM*:0000000000002000 gcr_track
     /tmp/cc1pgaR2.s:3020   .text:0000000000000e5a write_disk_track
     /tmp/cc1pgaR2.s:6264   .rodata:000000000000003d GCR_DEC_TBL.3032
     /tmp/cc1pgaR2.s:3486   .text:00000000000010e8 check_stepper_signals
     /tmp/cc1pgaR2.s:6613   .bss:0000000000000006 stepper_signal_r_pos
     /tmp/cc1pgaR2.s:6608   .bss:0000000000000005 stepper_signal_w_pos
                            *COM*:0000000000000100 stepper_signal_puffer
     /tmp/cc1pgaR2.s:6603   .bss:0000000000000004 stepper_signal_time
     /tmp/cc1pgaR2.s:6598   .bss:0000000000000003 stepper_signal
     /tmp/cc1pgaR2.s:6898   .bss:0000000000000007 akt_track_pos
     /tmp/cc1pgaR2.s:6593   .bss:0000000000000002 track_is_written
                            *COM*:0000000000000002 fd
     /tmp/cc1pgaR2.s:6583   .bss:0000000000000000 no_byte_ready_send
                            *COM*:0000000000000001 old_half_track
     /tmp/cc1pgaR2.s:6909   .data:0000000000000001 gcr_track_length
     /tmp/cc1pgaR2.s:6928   .bss:000000000000000c akt_image_type
     /tmp/cc1pgaR2.s:3675   .text:0000000000001228 check_motor_signal
     /tmp/cc1pgaR2.s:3751   .text:000000000000127a set_write_protection
     /tmp/cc1pgaR2.s:6922   .bss:000000000000000b is_wps_pin_enable
     /tmp/cc1pgaR2.s:3794   .text:0000000000001292 open_disk_image
     /tmp/cc1pgaR2.s:3980   .text:000000000000136a endable_wps_port.part.6
     /tmp/cc1pgaR2.s:4002   .text:0000000000001376 endable_wps_port
     /tmp/cc1pgaR2.s:4029   .text:0000000000001388 send_disk_change
     /tmp/cc1pgaR2.s:4149   .text:00000000000013ec filebrowser_update
                            *COM*:000000000000000d image_menu
     /tmp/cc1pgaR2.s:6260   .bss:0000000000000024 wait_counter0.2838
     /tmp/cc1pgaR2.s:4507   .text:000000000000161c remove_image
     /tmp/cc1pgaR2.s:4548   .text:000000000000163a reset
     /tmp/cc1pgaR2.s:7001   .data:0000000000000004 input_mode
     /tmp/cc1pgaR2.s:4758   .text:0000000000001748 check_menu_events
                            *COM*:000000000000000d settings_menu
     /tmp/cc1pgaR2.s:6551   .data:0000000000000000 exit_main
     /tmp/cc1pgaR2.s:4926   .text:00000000000017e0 update_gui
     /tmp/cc1pgaR2.s:6545   .bss:0000000000000029 old_half_track.2792
     /tmp/cc1pgaR2.s:6543   .bss:0000000000000028 old_motor_status.2793
     /tmp/cc1pgaR2.s:6541   .bss:0000000000000026 wait_counter0.2794
                            *COM*:000000000000000d info_menu
     /tmp/cc1pgaR2.s:5252   .text.startup:0000000000000000 main
                            *COM*:000000000000000d main_menu
                            *COM*:0000000000000001 fb_lcd_disk_char
     /tmp/cc1pgaR2.s:5587   .text:000000000000193a __vector_4
     /tmp/cc1pgaR2.s:5649   .text:000000000000197c __vector_16
     /tmp/cc1pgaR2.s:6903   .bss:0000000000000009 akt_gcr_byte
     /tmp/cc1pgaR2.s:6258   .bss:0000000000000023 old_gcr_byte.3054
     /tmp/cc1pgaR2.s:5878   .text:0000000000001ac0 __vector_9
     /tmp/cc1pgaR2.s:6256   .bss:0000000000000022 old_drehgeber.3065
     /tmp/cc1pgaR2.s:6561   .progmem.data:0000000000000000 drehimp_tab
     /tmp/cc1pgaR2.s:6254   .bss:0000000000000021 counter0.3061
     /tmp/cc1pgaR2.s:6252   .bss:000000000000001f counter1.3062
     /tmp/cc1pgaR2.s:6250   .bss:000000000000001e old_key0.3074
     /tmp/cc1pgaR2.s:6248   .bss:000000000000001d old_key1.3075
     /tmp/cc1pgaR2.s:6246   .bss:000000000000001c old_key2.3076
     /tmp/cc1pgaR2.s:6244   .bss:000000000000001b key2_is_pressed.3063
                             .bss:000000000000001a key2_next_up_is_invalid.3064
     /tmp/cc1pgaR2.s:6588   .bss:0000000000000001 track_is_written_old
                            *COM*:0000000000000001 old_motor_status
     /tmp/cc1pgaR2.s:6547   .bss:000000000000002a stp_signals_old
                            *COM*:0000000000000031 file_entry

UNDEFINED SYMBOLS
lcd_clear
lcd_setcursor
lcd_string
sprintf
lcd_print
sd_raw_init
sd_raw_write_interval
sd_raw_write
sd_raw_read_interval
sd_raw_read
partition_open
fat_open
fat_get_dir_entry_of_path
fat_open_dir
fat_close_dir
fat_close
partition_close
fat_reset_dir
fat_read_dir
strcmp
lcd_data
menu_refresh
sd_raw_get_info
__lshrdi3
__tablejump2__
fat_close_file
fat_seek_file
fat_read_file
memset
fat_write_file
strcpy
tolower
fat_open_file
menu_set_entry_var1
eeprom_read_dword
settings_set_default_values
lcd_init
eeprom_read_byte
eeprom_update_byte
menu_get_entry_var1
menu_update
menu_init
menu_set_root
lcd_generatechar
__do_copy_data
__do_clear_bss
